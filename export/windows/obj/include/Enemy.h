// Generated by Haxe 4.0.0-rc.2+77068e10c
#ifndef INCLUDED_Enemy
#define INCLUDED_Enemy

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_Entity
#include <Entity.h>
#endif
HX_DECLARE_CLASS0(Enemy)
HX_DECLARE_CLASS0(Entity)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,math,FlxRandom)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)



class HXCPP_CLASS_ATTRIBUTES Enemy_obj : public  ::Entity_obj
{
	public:
		typedef  ::Entity_obj super;
		typedef Enemy_obj OBJ_;
		Enemy_obj();

	public:
		enum { _hx_ClassId = 0x03a88228 };

		void __construct(int wave, ::Entity playerToChase);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Enemy")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Enemy"); }
		static hx::ObjectPtr< Enemy_obj > __new(int wave, ::Entity playerToChase);
		static hx::ObjectPtr< Enemy_obj > __alloc(hx::Ctx *_hx_ctx,int wave, ::Entity playerToChase);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Enemy_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Enemy",28,82,a8,03); }

		 ::Entity _playerToChase;
		 ::flixel::math::FlxPoint _velocity;
		Float ENEMY_SPEED;
		 ::flixel::math::FlxRandom random;
		void update(Float elapsed);

		void setHealthByWave(int wave);
		::Dynamic setHealthByWave_dyn();

		void setRandomVelocityVariedByWave(int wave);
		::Dynamic setRandomVelocityVariedByWave_dyn();

		void chasePlayer();
		::Dynamic chasePlayer_dyn();

};


#endif /* INCLUDED_Enemy */ 
