// Generated by Haxe 4.0.0-rc.2+77068e10c
#ifndef INCLUDED_HUD
#define INCLUDED_HUD

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
HX_DECLARE_CLASS0(Entity)
HX_DECLARE_CLASS0(HUD)
HX_DECLARE_CLASS0(PlayState)
HX_DECLARE_CLASS0(Survivor)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)



class HXCPP_CLASS_ATTRIBUTES HUD_obj : public  ::flixel::group::FlxTypedGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedGroup_obj super;
		typedef HUD_obj OBJ_;
		HUD_obj();

	public:
		enum { _hx_ClassId = 0x0036ec97 };

		void __construct( ::Survivor survivor);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="HUD")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"HUD"); }
		static hx::ObjectPtr< HUD_obj > __new( ::Survivor survivor);
		static hx::ObjectPtr< HUD_obj > __alloc(hx::Ctx *_hx_ctx, ::Survivor survivor);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~HUD_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("HUD",97,ec,36,00); }

		 ::Survivor _survivor;
		 ::flixel::text::FlxText _health;
		 ::flixel::text::FlxText _ammoForCurrentWeapon;
		 ::flixel::text::FlxText _money;
		 ::flixel::text::FlxText _wave;
		 ::flixel::text::FlxText _timeUntilNextWave;
		 ::Dynamic lineStyle;
		 ::Dynamic drawStyle;
		int inventorySpaceSquareSize;
		int inventorySpaces;
		int inventoryBarTotalWidth;
		int _inventoryItemSpritePadding;
		::Array< int > _inventoryRenderedItems;
		::Array< ::Dynamic> _inventoryNumberTextList;
		 ::flixel::group::FlxTypedGroup _itemStore;
		bool _isItemStoreVisible;
		 ::haxe::ds::IntMap _storePriceMap;
		 ::haxe::ds::IntMap _itemSpriteMap;
		 ::haxe::ds::IntMap _itemQtdToBuyMap;
		void update(Float elapsed);

		void drawTimeUntilNextWave( ::PlayState s);
		::Dynamic drawTimeUntilNextWave_dyn();

		void drawInventorySpaces();
		::Dynamic drawInventorySpaces_dyn();

		void updateInventory();
		::Dynamic updateInventory_dyn();

		void drawStore();
		::Dynamic drawStore_dyn();

		void buyItem(int itemId);
		::Dynamic buyItem_dyn();

};


#endif /* INCLUDED_HUD */ 
