// Generated by Haxe 4.0.0-rc.2+77068e10c
#ifndef INCLUDED_Survivor
#define INCLUDED_Survivor

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_Entity
#include <Entity.h>
#endif
HX_DECLARE_CLASS0(Entity)
HX_DECLARE_CLASS0(Survivor)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,_hx_system,FlxSound)
HX_DECLARE_CLASS2(flixel,util,FlxTimer)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)



class HXCPP_CLASS_ATTRIBUTES Survivor_obj : public  ::Entity_obj
{
	public:
		typedef  ::Entity_obj super;
		typedef Survivor_obj OBJ_;
		Survivor_obj();

	public:
		enum { _hx_ClassId = 0x58632e56 };

		void __construct(int x,int y, ::flixel::group::FlxTypedGroup bullets);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Survivor")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Survivor"); }
		static hx::ObjectPtr< Survivor_obj > __new(int x,int y, ::flixel::group::FlxTypedGroup bullets);
		static hx::ObjectPtr< Survivor_obj > __alloc(hx::Ctx *_hx_ctx,int x,int y, ::flixel::group::FlxTypedGroup bullets);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Survivor_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Survivor",56,2e,63,58); }

		static void __boot();
		static Float PLAYER_SPEED;
		static int BULLET_SPEED;
		static  ::haxe::ds::IntMap FIRE_RATE_MAP;
		 ::flixel::group::FlxTypedGroup _bullets;
		 ::flixel::math::FlxPoint _velocity;
		 ::flixel::util::FlxTimer _shootTimer;
		 ::haxe::ds::IntMap _bulletsMap;
		Float money;
		 ::flixel::_hx_system::FlxSound _sndPistolShot;
		void update(Float elapsed);

		void giveInitialBullets();
		::Dynamic giveInitialBullets_dyn();

		void checkInputs();
		::Dynamic checkInputs_dyn();

		void shoot();
		::Dynamic shoot_dyn();

		void updateInventorySelectedItem();
		::Dynamic updateInventorySelectedItem_dyn();

};


#endif /* INCLUDED_Survivor */ 
