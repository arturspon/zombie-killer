// Generated by Haxe 4.0.0-rc.2+77068e10c
#include <hxcpp.h>

#ifndef INCLUDED_Bullet
#include <Bullet.h>
#endif
#ifndef INCLUDED_Entity
#include <Entity.h>
#endif
#ifndef INCLUDED_HUD
#include <HUD.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Survivor
#include <Survivor.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math__FlxVector_FlxVector_Impl_
#include <flixel/math/_FlxVector/FlxVector_Impl_.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2e55f1775ff1d8df_9_new,"Survivor","new",0xd7c3b248,"Survivor.new","Survivor.hx",9,0x68492e28)
HX_LOCAL_STACK_FRAME(_hx_pos_2e55f1775ff1d8df_44_update,"Survivor","update",0x1151c521,"Survivor.update","Survivor.hx",44,0x68492e28)
HX_LOCAL_STACK_FRAME(_hx_pos_2e55f1775ff1d8df_50_giveInitialBullets,"Survivor","giveInitialBullets",0x25e5a896,"Survivor.giveInitialBullets","Survivor.hx",50,0x68492e28)
HX_LOCAL_STACK_FRAME(_hx_pos_2e55f1775ff1d8df_57_checkInputs,"Survivor","checkInputs",0x347fa1f9,"Survivor.checkInputs","Survivor.hx",57,0x68492e28)
HX_LOCAL_STACK_FRAME(_hx_pos_2e55f1775ff1d8df_82_shoot,"Survivor","shoot",0xf8c1adc7,"Survivor.shoot","Survivor.hx",82,0x68492e28)
HX_LOCAL_STACK_FRAME(_hx_pos_2e55f1775ff1d8df_109_updateInventorySelectedItem,"Survivor","updateInventorySelectedItem",0x0a3d02e9,"Survivor.updateInventorySelectedItem","Survivor.hx",109,0x68492e28)
HX_LOCAL_STACK_FRAME(_hx_pos_2e55f1775ff1d8df_13_boot,"Survivor","boot",0xeb914d4a,"Survivor.boot","Survivor.hx",13,0x68492e28)
HX_LOCAL_STACK_FRAME(_hx_pos_2e55f1775ff1d8df_14_boot,"Survivor","boot",0xeb914d4a,"Survivor.boot","Survivor.hx",14,0x68492e28)
HX_LOCAL_STACK_FRAME(_hx_pos_2e55f1775ff1d8df_15_boot,"Survivor","boot",0xeb914d4a,"Survivor.boot","Survivor.hx",15,0x68492e28)

void Survivor_obj::__construct(int x,int y, ::flixel::group::FlxTypedGroup bullets){
            	HX_GC_STACKFRAME(&_hx_pos_2e55f1775ff1d8df_9_new)
HXLINE(  23)		this->money = ((Float)200.0);
HXLINE(  19)		 ::haxe::ds::IntMap _g =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXDLIN(  19)		_g->set(0,100);
HXDLIN(  19)		this->_bulletsMap = _g;
HXLINE(  12)		this->_shootTimer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXLINE(  11)		 ::flixel::math::FlxPoint this1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ));
HXDLIN(  11)		this->_velocity = this1;
HXLINE(  29)		super::__construct(x,y,null());
HXLINE(  30)		this->health = ( (Float)(10) );
HXLINE(  31)		this->makeGraphic(12,12,-1,null(),null());
HXLINE(  33)		this->setSize(( (Float)(12) ),( (Float)(12) ));
HXLINE(  35)		this->_bullets = bullets;
HXLINE(  36)		this->giveInitialBullets();
HXLINE(  38)		this->_sndPistolShot = ::flixel::FlxG_obj::sound->load(HX_("assets/sounds/pistol_shot.wav",81,ba,72,b4),null(),null(),null(),null(),null(),null(),null());
HXLINE(  40)		this->_velocity->set_x(( (Float)(0) ));
HXLINE(  41)		this->_velocity->set_y(( (Float)(0) ));
            	}

Dynamic Survivor_obj::__CreateEmpty() { return new Survivor_obj; }

void *Survivor_obj::_hx_vtable = 0;

Dynamic Survivor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Survivor_obj > _hx_result = new Survivor_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Survivor_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e105115) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x0b6ffd77) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x2e105115;
		}
	} else {
		return inClassId==(int)0x39b08743 || inClassId==(int)0x58632e56;
	}
}

void Survivor_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_2e55f1775ff1d8df_44_update)
HXLINE(  45)		this->super::update(elapsed);
HXLINE(  46)		this->checkInputs();
            	}


void Survivor_obj::giveInitialBullets(){
            	HX_GC_STACKFRAME(&_hx_pos_2e55f1775ff1d8df_50_giveInitialBullets)
HXDLIN(  50)		int _g = 0;
HXDLIN(  50)		while((_g < 100)){
HXDLIN(  50)			_g = (_g + 1);
HXDLIN(  50)			int i = (_g - 1);
HXLINE(  51)			 ::Bullet s =  ::Bullet_obj::__alloc( HX_CTX );
HXLINE(  52)			s->kill();
HXLINE(  53)			this->_bullets->add(s).StaticCast<  ::Bullet >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Survivor_obj,giveInitialBullets,(void))

void Survivor_obj::checkInputs(){
            	HX_STACKFRAME(&_hx_pos_2e55f1775ff1d8df_57_checkInputs)
HXLINE(  59)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(  60)			this->shoot();
            		}
HXLINE(  62)		 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN(  62)		bool _hx_tmp;
HXDLIN(  62)		if ((_this->current != 1)) {
HXLINE(  62)			_hx_tmp = (_this->current == 2);
            		}
            		else {
HXLINE(  62)			_hx_tmp = true;
            		}
HXDLIN(  62)		if (_hx_tmp) {
HXLINE(  63)			if ((::PlayState_obj::currentInventorySelectedItem == 1)) {
HXLINE(  63)				this->shoot();
            			}
            		}
HXLINE(  65)		bool _hx_tmp1;
HXDLIN(  65)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  65)		if (_this1->keyManager->checkStatus(65,_this1->status)) {
HXLINE(  65)			_hx_tmp1 = (this->x > 0);
            		}
            		else {
HXLINE(  65)			_hx_tmp1 = false;
            		}
HXDLIN(  65)		if (_hx_tmp1) {
HXLINE(  66)			 ::Survivor _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  66)			_g->set_x((_g->x - ::Survivor_obj::PLAYER_SPEED));
            		}
HXLINE(  68)		bool _hx_tmp2;
HXDLIN(  68)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  68)		if (_this2->keyManager->checkStatus(68,_this2->status)) {
HXLINE(  68)			Float _hx_tmp3 = this->x;
HXDLIN(  68)			int _hx_tmp4 = ::flixel::FlxG_obj::width;
HXDLIN(  68)			_hx_tmp2 = (_hx_tmp3 < (( (Float)(_hx_tmp4) ) - this->get_width()));
            		}
            		else {
HXLINE(  68)			_hx_tmp2 = false;
            		}
HXDLIN(  68)		if (_hx_tmp2) {
HXLINE(  69)			 ::Survivor _g1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  69)			_g1->set_x((_g1->x + ::Survivor_obj::PLAYER_SPEED));
            		}
HXLINE(  71)		bool _hx_tmp5;
HXDLIN(  71)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  71)		if (_this3->keyManager->checkStatus(87,_this3->status)) {
HXLINE(  71)			_hx_tmp5 = (this->y > 0);
            		}
            		else {
HXLINE(  71)			_hx_tmp5 = false;
            		}
HXDLIN(  71)		if (_hx_tmp5) {
HXLINE(  72)			 ::Survivor _g2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  72)			_g2->set_y((_g2->y - ::Survivor_obj::PLAYER_SPEED));
            		}
HXLINE(  74)		bool _hx_tmp6;
HXDLIN(  74)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  74)		if (_this4->keyManager->checkStatus(83,_this4->status)) {
HXLINE(  74)			Float _hx_tmp7 = this->y;
HXDLIN(  74)			int _hx_tmp8 = ::flixel::FlxG_obj::height;
HXDLIN(  74)			_hx_tmp6 = (_hx_tmp7 < (( (Float)(_hx_tmp8) ) - this->get_height()));
            		}
            		else {
HXLINE(  74)			_hx_tmp6 = false;
            		}
HXDLIN(  74)		if (_hx_tmp6) {
HXLINE(  75)			 ::Survivor _g3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  75)			_g3->set_y((_g3->y + ::Survivor_obj::PLAYER_SPEED));
            		}
HXLINE(  79)		this->updateInventorySelectedItem();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Survivor_obj,checkInputs,(void))

void Survivor_obj::shoot(){
            	HX_STACKFRAME(&_hx_pos_2e55f1775ff1d8df_82_shoot)
HXLINE(  83)		if (this->_shootTimer->active) {
HXLINE(  83)			return;
            		}
HXLINE(  85)		if ((::PlayState_obj::inventoryItemsList->indexOf(::PlayState_obj::currentInventorySelectedItem,null()) >= 0)) {
HXLINE(  86)			bool _hx_tmp;
HXDLIN(  86)			if ((::PlayState_obj::currentInventorySelectedItem != 0)) {
HXLINE(  86)				_hx_tmp = (::PlayState_obj::currentInventorySelectedItem == 1);
            			}
            			else {
HXLINE(  86)				_hx_tmp = true;
            			}
HXDLIN(  86)			if (_hx_tmp) {
HXLINE(  88)				if (hx::IsLessEq( this->_bulletsMap->get(::PlayState_obj::currentInventorySelectedItem),0 )) {
HXLINE(  88)					return;
            				}
HXLINE(  89)				{
HXLINE(  89)					::Dynamic this1 = this->_bulletsMap;
HXDLIN(  89)					int key = ::PlayState_obj::currentInventorySelectedItem;
HXDLIN(  89)					( ( ::haxe::ds::IntMap)(this1) )->set(key,(this->_bulletsMap->get_int(::PlayState_obj::currentInventorySelectedItem) - 1));
            				}
HXLINE(  91)				 ::flixel::util::FlxTimer _hx_tmp1 = this->_shootTimer;
HXDLIN(  91)				_hx_tmp1->start(::Survivor_obj::FIRE_RATE_MAP->get(::PlayState_obj::currentInventorySelectedItem),null(),null());
HXLINE(  93)				this->_velocity->set_x((( (Float)(::flixel::FlxG_obj::mouse->x) ) - this->x));
HXLINE(  94)				this->_velocity->set_y((( (Float)(::flixel::FlxG_obj::mouse->y) ) - this->y));
HXLINE(  95)				::flixel::math::_FlxVector::FlxVector_Impl__obj::normalize(this->_velocity);
HXLINE(  96)				this->_velocity->scale(( (Float)(::Survivor_obj::BULLET_SPEED) ));
HXLINE(  98)				 ::Bullet bullet = this->_bullets->getFirstAvailable(null(),null()).StaticCast<  ::Bullet >();
HXLINE(  99)				Float _hx_tmp2 = this->x;
HXDLIN(  99)				Float _hx_tmp3 = (_hx_tmp2 + (this->get_width() / ( (Float)(2) )));
HXDLIN(  99)				Float _hx_tmp4 = this->y;
HXDLIN(  99)				bullet->reset(_hx_tmp3,(_hx_tmp4 - (this->get_height() / ( (Float)(2) ))));
HXLINE( 101)				bullet->velocity->set_x(this->_velocity->x);
HXLINE( 102)				bullet->velocity->set_y(this->_velocity->y);
HXLINE( 104)				this->_sndPistolShot->play(true,null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Survivor_obj,shoot,(void))

void Survivor_obj::updateInventorySelectedItem(){
            	HX_STACKFRAME(&_hx_pos_2e55f1775ff1d8df_109_updateInventorySelectedItem)
HXLINE( 110)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 110)		if (_this->keyManager->checkStatus(49,_this->status)) {
HXLINE( 111)			::PlayState_obj::currentInventorySelectedItem = 0;
HXLINE( 112)			::PlayState_obj::_hud->updateInventory();
            		}
HXLINE( 114)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 114)		if (_this1->keyManager->checkStatus(50,_this1->status)) {
HXLINE( 115)			::PlayState_obj::currentInventorySelectedItem = 1;
HXLINE( 116)			::PlayState_obj::_hud->updateInventory();
            		}
HXLINE( 118)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 118)		if (_this2->keyManager->checkStatus(51,_this2->status)) {
HXLINE( 119)			::PlayState_obj::currentInventorySelectedItem = 2;
HXLINE( 120)			::PlayState_obj::_hud->updateInventory();
            		}
HXLINE( 122)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 122)		if (_this3->keyManager->checkStatus(52,_this3->status)) {
HXLINE( 123)			::PlayState_obj::currentInventorySelectedItem = 3;
HXLINE( 124)			::PlayState_obj::_hud->updateInventory();
            		}
HXLINE( 126)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 126)		if (_this4->keyManager->checkStatus(53,_this4->status)) {
HXLINE( 127)			::PlayState_obj::currentInventorySelectedItem = 4;
HXLINE( 128)			::PlayState_obj::_hud->updateInventory();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Survivor_obj,updateInventorySelectedItem,(void))

Float Survivor_obj::PLAYER_SPEED;

int Survivor_obj::BULLET_SPEED;

 ::haxe::ds::IntMap Survivor_obj::FIRE_RATE_MAP;


hx::ObjectPtr< Survivor_obj > Survivor_obj::__new(int x,int y, ::flixel::group::FlxTypedGroup bullets) {
	hx::ObjectPtr< Survivor_obj > __this = new Survivor_obj();
	__this->__construct(x,y,bullets);
	return __this;
}

hx::ObjectPtr< Survivor_obj > Survivor_obj::__alloc(hx::Ctx *_hx_ctx,int x,int y, ::flixel::group::FlxTypedGroup bullets) {
	Survivor_obj *__this = (Survivor_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Survivor_obj), true, "Survivor"));
	*(void **)__this = Survivor_obj::_hx_vtable;
	__this->__construct(x,y,bullets);
	return __this;
}

Survivor_obj::Survivor_obj()
{
}

void Survivor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Survivor);
	HX_MARK_MEMBER_NAME(_bullets,"_bullets");
	HX_MARK_MEMBER_NAME(_velocity,"_velocity");
	HX_MARK_MEMBER_NAME(_shootTimer,"_shootTimer");
	HX_MARK_MEMBER_NAME(_bulletsMap,"_bulletsMap");
	HX_MARK_MEMBER_NAME(money,"money");
	HX_MARK_MEMBER_NAME(_sndPistolShot,"_sndPistolShot");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Survivor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_bullets,"_bullets");
	HX_VISIT_MEMBER_NAME(_velocity,"_velocity");
	HX_VISIT_MEMBER_NAME(_shootTimer,"_shootTimer");
	HX_VISIT_MEMBER_NAME(_bulletsMap,"_bulletsMap");
	HX_VISIT_MEMBER_NAME(money,"money");
	HX_VISIT_MEMBER_NAME(_sndPistolShot,"_sndPistolShot");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Survivor_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"money") ) { return hx::Val( money ); }
		if (HX_FIELD_EQ(inName,"shoot") ) { return hx::Val( shoot_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_bullets") ) { return hx::Val( _bullets ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_velocity") ) { return hx::Val( _velocity ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_shootTimer") ) { return hx::Val( _shootTimer ); }
		if (HX_FIELD_EQ(inName,"_bulletsMap") ) { return hx::Val( _bulletsMap ); }
		if (HX_FIELD_EQ(inName,"checkInputs") ) { return hx::Val( checkInputs_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_sndPistolShot") ) { return hx::Val( _sndPistolShot ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"giveInitialBullets") ) { return hx::Val( giveInitialBullets_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"updateInventorySelectedItem") ) { return hx::Val( updateInventorySelectedItem_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Survivor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"PLAYER_SPEED") ) { outValue = ( PLAYER_SPEED ); return true; }
		if (HX_FIELD_EQ(inName,"BULLET_SPEED") ) { outValue = ( BULLET_SPEED ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"FIRE_RATE_MAP") ) { outValue = ( FIRE_RATE_MAP ); return true; }
	}
	return false;
}

hx::Val Survivor_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"money") ) { money=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_bullets") ) { _bullets=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_velocity") ) { _velocity=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_shootTimer") ) { _shootTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bulletsMap") ) { _bulletsMap=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_sndPistolShot") ) { _sndPistolShot=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Survivor_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"PLAYER_SPEED") ) { PLAYER_SPEED=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"BULLET_SPEED") ) { BULLET_SPEED=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"FIRE_RATE_MAP") ) { FIRE_RATE_MAP=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
	}
	return false;
}

void Survivor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_bullets",72,c1,a7,63));
	outFields->push(HX_("_velocity",7c,f9,93,66));
	outFields->push(HX_("_shootTimer",85,52,87,bf));
	outFields->push(HX_("_bulletsMap",4a,f4,7b,fc));
	outFields->push(HX_("money",40,ba,5f,0c));
	outFields->push(HX_("_sndPistolShot",1b,a0,a9,18));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Survivor_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Survivor_obj,_bullets),HX_("_bullets",72,c1,a7,63)},
	{hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(Survivor_obj,_velocity),HX_("_velocity",7c,f9,93,66)},
	{hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(Survivor_obj,_shootTimer),HX_("_shootTimer",85,52,87,bf)},
	{hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(Survivor_obj,_bulletsMap),HX_("_bulletsMap",4a,f4,7b,fc)},
	{hx::fsFloat,(int)offsetof(Survivor_obj,money),HX_("money",40,ba,5f,0c)},
	{hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(Survivor_obj,_sndPistolShot),HX_("_sndPistolShot",1b,a0,a9,18)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Survivor_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &Survivor_obj::PLAYER_SPEED,HX_("PLAYER_SPEED",c9,ec,67,ae)},
	{hx::fsInt,(void *) &Survivor_obj::BULLET_SPEED,HX_("BULLET_SPEED",6a,72,dd,7d)},
	{hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &Survivor_obj::FIRE_RATE_MAP,HX_("FIRE_RATE_MAP",46,2b,e1,a5)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Survivor_obj_sMemberFields[] = {
	HX_("_bullets",72,c1,a7,63),
	HX_("_velocity",7c,f9,93,66),
	HX_("_shootTimer",85,52,87,bf),
	HX_("_bulletsMap",4a,f4,7b,fc),
	HX_("money",40,ba,5f,0c),
	HX_("_sndPistolShot",1b,a0,a9,18),
	HX_("update",09,86,05,87),
	HX_("giveInitialBullets",7e,25,ab,70),
	HX_("checkInputs",11,98,ff,7d),
	HX_("shoot",df,81,27,7c),
	HX_("updateInventorySelectedItem",01,a9,64,14),
	::String(null()) };

static void Survivor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Survivor_obj::PLAYER_SPEED,"PLAYER_SPEED");
	HX_MARK_MEMBER_NAME(Survivor_obj::BULLET_SPEED,"BULLET_SPEED");
	HX_MARK_MEMBER_NAME(Survivor_obj::FIRE_RATE_MAP,"FIRE_RATE_MAP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Survivor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Survivor_obj::PLAYER_SPEED,"PLAYER_SPEED");
	HX_VISIT_MEMBER_NAME(Survivor_obj::BULLET_SPEED,"BULLET_SPEED");
	HX_VISIT_MEMBER_NAME(Survivor_obj::FIRE_RATE_MAP,"FIRE_RATE_MAP");
};

#endif

hx::Class Survivor_obj::__mClass;

static ::String Survivor_obj_sStaticFields[] = {
	HX_("PLAYER_SPEED",c9,ec,67,ae),
	HX_("BULLET_SPEED",6a,72,dd,7d),
	HX_("FIRE_RATE_MAP",46,2b,e1,a5),
	::String(null())
};

void Survivor_obj::__register()
{
	Survivor_obj _hx_dummy;
	Survivor_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Survivor",56,2e,63,58);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Survivor_obj::__GetStatic;
	__mClass->mSetStaticField = &Survivor_obj::__SetStatic;
	__mClass->mMarkFunc = Survivor_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Survivor_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Survivor_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Survivor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Survivor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Survivor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Survivor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Survivor_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2e55f1775ff1d8df_13_boot)
HXDLIN(  13)		PLAYER_SPEED = ((Float)1.5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2e55f1775ff1d8df_14_boot)
HXDLIN(  14)		BULLET_SPEED = 2048;
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::haxe::ds::IntMap _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_2e55f1775ff1d8df_15_boot)
HXDLIN(  15)			 ::haxe::ds::IntMap _g =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXDLIN(  15)			_g->set(0,((Float)0.2));
HXDLIN(  15)			_g->set(1,((Float)0.0900900900900901));
HXDLIN(  15)			return _g;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_2e55f1775ff1d8df_15_boot)
HXDLIN(  15)		FIRE_RATE_MAP = ( ( ::haxe::ds::IntMap)( ::Dynamic(new _hx_Closure_0())()) );
            	}
}

