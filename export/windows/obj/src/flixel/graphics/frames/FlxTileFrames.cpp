// Generated by Haxe 4.0.0-rc.2+77068e10c
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrameCollectionType
#include <flixel/graphics/frames/FlxFrameCollectionType.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxTileFrames
#include <flixel/graphics/frames/FlxTileFrames.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxBitmapDataUtil
#include <flixel/util/FlxBitmapDataUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_43be537ea661b39f_17_new,"flixel.graphics.frames.FlxTileFrames","new",0xee264501,"flixel.graphics.frames.FlxTileFrames.new","flixel/graphics/frames/FlxTileFrames.hx",17,0x562d6bb0)
HX_LOCAL_STACK_FRAME(_hx_pos_43be537ea661b39f_51_getByTilePosition,"flixel.graphics.frames.FlxTileFrames","getByTilePosition",0xcc1d2a05,"flixel.graphics.frames.FlxTileFrames.getByTilePosition","flixel/graphics/frames/FlxTileFrames.hx",51,0x562d6bb0)
HX_LOCAL_STACK_FRAME(_hx_pos_43be537ea661b39f_493_equals,"flixel.graphics.frames.FlxTileFrames","equals",0xd88c543e,"flixel.graphics.frames.FlxTileFrames.equals","flixel/graphics/frames/FlxTileFrames.hx",493,0x562d6bb0)
HX_LOCAL_STACK_FRAME(_hx_pos_43be537ea661b39f_519_addBorder,"flixel.graphics.frames.FlxTileFrames","addBorder",0x145fa54e,"flixel.graphics.frames.FlxTileFrames.addBorder","flixel/graphics/frames/FlxTileFrames.hx",519,0x562d6bb0)
HX_LOCAL_STACK_FRAME(_hx_pos_43be537ea661b39f_544_destroy,"flixel.graphics.frames.FlxTileFrames","destroy",0x9226061b,"flixel.graphics.frames.FlxTileFrames.destroy","flixel/graphics/frames/FlxTileFrames.hx",544,0x562d6bb0)
HX_LOCAL_STACK_FRAME(_hx_pos_43be537ea661b39f_69_fromBitmapAddSpacesAndBorders,"flixel.graphics.frames.FlxTileFrames","fromBitmapAddSpacesAndBorders",0x637393e6,"flixel.graphics.frames.FlxTileFrames.fromBitmapAddSpacesAndBorders","flixel/graphics/frames/FlxTileFrames.hx",69,0x562d6bb0)
HX_LOCAL_STACK_FRAME(_hx_pos_43be537ea661b39f_113_fromFrameAddSpacesAndBorders,"flixel.graphics.frames.FlxTileFrames","fromFrameAddSpacesAndBorders",0x8cf4341a,"flixel.graphics.frames.FlxTileFrames.fromFrameAddSpacesAndBorders","flixel/graphics/frames/FlxTileFrames.hx",113,0x562d6bb0)
HX_LOCAL_STACK_FRAME(_hx_pos_43be537ea661b39f_130_fromFrame,"flixel.graphics.frames.FlxTileFrames","fromFrame",0xb32d85c4,"flixel.graphics.frames.FlxTileFrames.fromFrame","flixel/graphics/frames/FlxTileFrames.hx",130,0x562d6bb0)
HX_LOCAL_STACK_FRAME(_hx_pos_43be537ea661b39f_183_fromFrames,"flixel.graphics.frames.FlxTileFrames","fromFrames",0x14a7862f,"flixel.graphics.frames.FlxTileFrames.fromFrames","flixel/graphics/frames/FlxTileFrames.hx",183,0x562d6bb0)
HX_LOCAL_STACK_FRAME(_hx_pos_43be537ea661b39f_226_fromAtlasByPrefix,"flixel.graphics.frames.FlxTileFrames","fromAtlasByPrefix",0x9481e7cb,"flixel.graphics.frames.FlxTileFrames.fromAtlasByPrefix","flixel/graphics/frames/FlxTileFrames.hx",226,0x562d6bb0)
HX_LOCAL_STACK_FRAME(_hx_pos_43be537ea661b39f_261_fromGraphic,"flixel.graphics.frames.FlxTileFrames","fromGraphic",0x29813bff,"flixel.graphics.frames.FlxTileFrames.fromGraphic","flixel/graphics/frames/FlxTileFrames.hx",261,0x562d6bb0)
HX_LOCAL_STACK_FRAME(_hx_pos_43be537ea661b39f_328_fromRectangle,"flixel.graphics.frames.FlxTileFrames","fromRectangle",0x8a32f946,"flixel.graphics.frames.FlxTileFrames.fromRectangle","flixel/graphics/frames/FlxTileFrames.hx",328,0x562d6bb0)
HX_LOCAL_STACK_FRAME(_hx_pos_43be537ea661b39f_357_combineTileSets,"flixel.graphics.frames.FlxTileFrames","combineTileSets",0x70f3189f,"flixel.graphics.frames.FlxTileFrames.combineTileSets","flixel/graphics/frames/FlxTileFrames.hx",357,0x562d6bb0)
HX_LOCAL_STACK_FRAME(_hx_pos_43be537ea661b39f_387_combineTileFrames,"flixel.graphics.frames.FlxTileFrames","combineTileFrames",0x23605534,"flixel.graphics.frames.FlxTileFrames.combineTileFrames","flixel/graphics/frames/FlxTileFrames.hx",387,0x562d6bb0)
HX_LOCAL_STACK_FRAME(_hx_pos_43be537ea661b39f_477_findFrame,"flixel.graphics.frames.FlxTileFrames","findFrame",0xed9bcc95,"flixel.graphics.frames.FlxTileFrames.findFrame","flixel/graphics/frames/FlxTileFrames.hx",477,0x562d6bb0)
namespace flixel{
namespace graphics{
namespace frames{

void FlxTileFrames_obj::__construct( ::flixel::graphics::FlxGraphic parent, ::flixel::math::FlxPoint border){
            	HX_STACKFRAME(&_hx_pos_43be537ea661b39f_17_new)
HXLINE(  39)		this->numCols = 0;
HXLINE(  37)		this->numRows = 0;
HXLINE(  43)		super::__construct(parent,::flixel::graphics::frames::FlxFrameCollectionType_obj::TILES_dyn(),border);
            	}

Dynamic FlxTileFrames_obj::__CreateEmpty() { return new FlxTileFrames_obj; }

void *FlxTileFrames_obj::_hx_vtable = 0;

Dynamic FlxTileFrames_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTileFrames_obj > _hx_result = new FlxTileFrames_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FlxTileFrames_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0163a3e9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0163a3e9;
	} else {
		return inClassId==(int)0x4422a9f9;
	}
}

 ::flixel::graphics::frames::FlxFrame FlxTileFrames_obj::getByTilePosition(int column,int row){
            	HX_STACKFRAME(&_hx_pos_43be537ea661b39f_51_getByTilePosition)
HXDLIN(  51)		return this->frames->__get(((row * this->numCols) + column)).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTileFrames_obj,getByTilePosition,return )

bool FlxTileFrames_obj::equals( ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxRect region, ::flixel::graphics::frames::FlxFrame atlasFrame, ::flixel::math::FlxPoint tileSpacing, ::flixel::math::FlxPoint border){
            	HX_STACKFRAME(&_hx_pos_43be537ea661b39f_493_equals)
HXLINE( 494)		bool _hx_tmp;
HXDLIN( 494)		if (hx::IsNull( this->region )) {
HXLINE( 494)			_hx_tmp = hx::IsNull( this->atlasFrame );
            		}
            		else {
HXLINE( 494)			_hx_tmp = false;
            		}
HXDLIN( 494)		if (_hx_tmp) {
HXLINE( 496)			return false;
            		}
HXLINE( 499)		if (hx::IsNotNull( atlasFrame )) {
HXLINE( 501)			region = atlasFrame->frame;
            		}
HXLINE( 504)		if (hx::IsNull( region )) {
HXLINE( 505)			Float Width = ( (Float)(this->parent->width) );
HXDLIN( 505)			Float Height = ( (Float)(this->parent->height) );
HXDLIN( 505)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 505)			_this->x = ( (Float)(0) );
HXDLIN( 505)			_this->y = ( (Float)(0) );
HXDLIN( 505)			_this->width = Width;
HXDLIN( 505)			_this->height = Height;
HXDLIN( 505)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 505)			rect->_inPool = false;
HXDLIN( 505)			 ::flixel::math::FlxRect rect1 = rect;
HXDLIN( 505)			rect1->_weak = true;
HXDLIN( 505)			region = rect1;
            		}
HXLINE( 507)		if (hx::IsNull( tileSpacing )) {
HXLINE( 508)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 508)			point->_inPool = false;
HXDLIN( 508)			 ::flixel::math::FlxPoint point1 = point;
HXDLIN( 508)			point1->_weak = true;
HXDLIN( 508)			tileSpacing = point1;
            		}
HXLINE( 510)		if (hx::IsNull( border )) {
HXLINE( 511)			 ::flixel::math::FlxPoint point2 = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 511)			point2->_inPool = false;
HXDLIN( 511)			 ::flixel::math::FlxPoint point3 = point2;
HXDLIN( 511)			point3->_weak = true;
HXDLIN( 511)			border = point3;
            		}
HXLINE( 513)		bool _hx_tmp1;
HXDLIN( 513)		bool _hx_tmp2;
HXDLIN( 513)		bool _hx_tmp3;
HXDLIN( 513)		if (hx::IsEq( this->atlasFrame,atlasFrame )) {
HXLINE( 513)			 ::flixel::math::FlxRect _this1 = this->region;
HXDLIN( 513)			bool result;
HXDLIN( 513)			bool result1;
HXDLIN( 513)			bool result2;
HXDLIN( 513)			if ((::Math_obj::abs((_this1->x - region->x)) <= ((Float)0.0000001))) {
HXLINE( 513)				result2 = (::Math_obj::abs((_this1->y - region->y)) <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 513)				result2 = false;
            			}
HXDLIN( 513)			if (result2) {
HXLINE( 513)				result1 = (::Math_obj::abs((_this1->width - region->width)) <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 513)				result1 = false;
            			}
HXDLIN( 513)			if (result1) {
HXLINE( 513)				result = (::Math_obj::abs((_this1->height - region->height)) <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 513)				result = false;
            			}
HXDLIN( 513)			if (region->_weak) {
HXLINE( 513)				if (!(region->_inPool)) {
HXLINE( 513)					region->_inPool = true;
HXDLIN( 513)					region->_weak = false;
HXDLIN( 513)					::flixel::math::FlxRect_obj::_pool->putUnsafe(region);
            				}
            			}
HXDLIN( 513)			_hx_tmp3 = result;
            		}
            		else {
HXLINE( 513)			_hx_tmp3 = false;
            		}
HXDLIN( 513)		if (_hx_tmp3) {
HXLINE( 514)			 ::flixel::math::FlxPoint _this2 = this->tileSize;
HXDLIN( 514)			bool result3;
HXDLIN( 514)			if ((::Math_obj::abs((_this2->x - tileSize->x)) <= ((Float)0.0000001))) {
HXLINE( 514)				result3 = (::Math_obj::abs((_this2->y - tileSize->y)) <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 514)				result3 = false;
            			}
HXDLIN( 514)			if (tileSize->_weak) {
HXLINE( 514)				tileSize->put();
            			}
HXLINE( 513)			_hx_tmp2 = result3;
            		}
            		else {
HXLINE( 513)			_hx_tmp2 = false;
            		}
HXDLIN( 513)		if (_hx_tmp2) {
HXLINE( 514)			 ::flixel::math::FlxPoint _this3 = this->tileSpacing;
HXDLIN( 514)			bool result4;
HXDLIN( 514)			if ((::Math_obj::abs((_this3->x - tileSpacing->x)) <= ((Float)0.0000001))) {
HXLINE( 514)				result4 = (::Math_obj::abs((_this3->y - tileSpacing->y)) <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 514)				result4 = false;
            			}
HXDLIN( 514)			if (tileSpacing->_weak) {
HXLINE( 514)				tileSpacing->put();
            			}
HXLINE( 513)			_hx_tmp1 = result4;
            		}
            		else {
HXLINE( 513)			_hx_tmp1 = false;
            		}
HXDLIN( 513)		if (_hx_tmp1) {
HXLINE( 515)			 ::flixel::math::FlxPoint _this4 = this->border;
HXDLIN( 515)			bool result5;
HXDLIN( 515)			if ((::Math_obj::abs((_this4->x - border->x)) <= ((Float)0.0000001))) {
HXLINE( 515)				result5 = (::Math_obj::abs((_this4->y - border->y)) <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 515)				result5 = false;
            			}
HXDLIN( 515)			if (border->_weak) {
HXLINE( 515)				border->put();
            			}
HXDLIN( 515)			return result5;
            		}
            		else {
HXLINE( 513)			return false;
            		}
HXDLIN( 513)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxTileFrames_obj,equals,return )

 ::flixel::graphics::frames::FlxFramesCollection FlxTileFrames_obj::addBorder( ::flixel::math::FlxPoint border){
            	HX_GC_STACKFRAME(&_hx_pos_43be537ea661b39f_519_addBorder)
HXLINE( 520)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 520)		point->_inPool = false;
HXDLIN( 520)		 ::flixel::math::FlxPoint resultBorder = point->addPoint(this->border)->addPoint(border);
HXLINE( 521)		 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 521)		point1->_inPool = false;
HXDLIN( 521)		 ::flixel::math::FlxPoint _this = point1;
HXDLIN( 521)		 ::flixel::math::FlxPoint point2 = this->tileSize;
HXDLIN( 521)		_this->set_x(point2->x);
HXDLIN( 521)		_this->set_y(point2->y);
HXDLIN( 521)		if (point2->_weak) {
HXLINE( 521)			point2->put();
            		}
HXDLIN( 521)		 ::flixel::math::FlxPoint _this1 = _this;
HXDLIN( 521)		Float Y = (( (Float)(2) ) * border->y);
HXDLIN( 521)		{
HXLINE( 521)			 ::flixel::math::FlxPoint _g = _this1;
HXDLIN( 521)			_g->set_x((_g->x - (( (Float)(2) ) * border->x)));
            		}
HXDLIN( 521)		{
HXLINE( 521)			 ::flixel::math::FlxPoint _g1 = _this1;
HXDLIN( 521)			_g1->set_y((_g1->y - Y));
            		}
HXDLIN( 521)		 ::flixel::math::FlxPoint resultSize = _this1;
HXLINE( 522)		 ::flixel::graphics::frames::FlxTileFrames tileFrames = ::flixel::graphics::frames::FlxTileFrames_obj::findFrame(this->parent,resultSize,this->region,this->atlasFrame,this->tileSpacing,resultBorder);
HXLINE( 523)		if (hx::IsNotNull( tileFrames )) {
HXLINE( 525)			resultSize = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(resultSize)) );
HXLINE( 526)			return tileFrames;
            		}
HXLINE( 529)		tileFrames =  ::flixel::graphics::frames::FlxTileFrames_obj::__alloc( HX_CTX ,this->parent,resultBorder);
HXLINE( 530)		 ::flixel::math::FlxRect _this2 = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 530)		_this2->x = ( (Float)(0) );
HXDLIN( 530)		_this2->y = ( (Float)(0) );
HXDLIN( 530)		_this2->width = ( (Float)(0) );
HXDLIN( 530)		_this2->height = ( (Float)(0) );
HXDLIN( 530)		 ::flixel::math::FlxRect rect = _this2;
HXDLIN( 530)		rect->_inPool = false;
HXDLIN( 530)		 ::flixel::math::FlxRect _this3 = rect;
HXDLIN( 530)		 ::flixel::math::FlxRect Rect = this->region;
HXDLIN( 530)		_this3->x = Rect->x;
HXDLIN( 530)		_this3->y = Rect->y;
HXDLIN( 530)		_this3->width = Rect->width;
HXDLIN( 530)		_this3->height = Rect->height;
HXDLIN( 530)		if (Rect->_weak) {
HXLINE( 530)			if (!(Rect->_inPool)) {
HXLINE( 530)				Rect->_inPool = true;
HXDLIN( 530)				Rect->_weak = false;
HXDLIN( 530)				::flixel::math::FlxRect_obj::_pool->putUnsafe(Rect);
            			}
            		}
HXDLIN( 530)		tileFrames->region = _this3;
HXLINE( 531)		tileFrames->atlasFrame = this->atlasFrame;
HXLINE( 532)		tileFrames->tileSize = resultSize;
HXLINE( 533)		 ::flixel::math::FlxPoint point3 = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 533)		point3->_inPool = false;
HXDLIN( 533)		 ::flixel::math::FlxPoint _this4 = point3;
HXDLIN( 533)		 ::flixel::math::FlxPoint point4 = this->tileSpacing;
HXDLIN( 533)		_this4->set_x(point4->x);
HXDLIN( 533)		_this4->set_y(point4->y);
HXDLIN( 533)		if (point4->_weak) {
HXLINE( 533)			point4->put();
            		}
HXDLIN( 533)		tileFrames->tileSpacing = _this4;
HXLINE( 535)		{
HXLINE( 535)			int _g2 = 0;
HXDLIN( 535)			::Array< ::Dynamic> _g11 = this->frames;
HXDLIN( 535)			while((_g2 < _g11->length)){
HXLINE( 535)				 ::flixel::graphics::frames::FlxFrame frame = _g11->__get(_g2).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 535)				_g2 = (_g2 + 1);
HXLINE( 537)				tileFrames->pushFrame(frame->setBorderTo(border,null()));
            			}
            		}
HXLINE( 540)		return tileFrames;
            	}


void FlxTileFrames_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_43be537ea661b39f_544_destroy)
HXLINE( 545)		this->super::destroy();
HXLINE( 546)		this->atlasFrame = null();
HXLINE( 547)		this->region = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->region)) );
HXLINE( 548)		this->tileSize = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->tileSize)) );
HXLINE( 549)		this->tileSpacing = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->tileSpacing)) );
            	}


 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::fromBitmapAddSpacesAndBorders( ::Dynamic source, ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxPoint tileSpacing, ::flixel::math::FlxPoint tileBorder, ::flixel::math::FlxRect region){
            	HX_STACKFRAME(&_hx_pos_43be537ea661b39f_69_fromBitmapAddSpacesAndBorders)
HXLINE(  70)		 ::flixel::graphics::FlxGraphic graphic = ::flixel::FlxG_obj::bitmap->add(source,false,null());
HXLINE(  71)		if (hx::IsNull( graphic )) {
HXLINE(  72)			return null();
            		}
HXLINE(  74)		::String key = ::flixel::FlxG_obj::bitmap->getKeyWithSpacesAndBorders(graphic->key,tileSize,tileSpacing,tileBorder,region);
HXLINE(  75)		 ::flixel::graphics::FlxGraphic result = ( ( ::flixel::graphics::FlxGraphic)(::flixel::FlxG_obj::bitmap->_cache->get(key)) );
HXLINE(  76)		if (hx::IsNull( result )) {
HXLINE(  78)			 ::openfl::display::BitmapData bitmap = ::flixel::util::FlxBitmapDataUtil_obj::addSpacesAndBorders(graphic->bitmap,tileSize,tileSpacing,tileBorder,region);
HXLINE(  79)			result = ::flixel::FlxG_obj::bitmap->add(bitmap,false,key);
            		}
HXLINE(  82)		int borderX = 0;
HXLINE(  83)		int borderY = 0;
HXLINE(  85)		if (hx::IsNotNull( tileBorder )) {
HXLINE(  87)			borderX = ::Std_obj::_hx_int(tileBorder->x);
HXLINE(  88)			borderY = ::Std_obj::_hx_int(tileBorder->y);
            		}
HXLINE(  92)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  92)		point->_inPool = false;
HXDLIN(  92)		 ::flixel::math::FlxPoint _this = point->addPoint(tileSize);
HXDLIN(  92)		{
HXLINE(  92)			 ::flixel::math::FlxPoint _g = _this;
HXDLIN(  92)			_g->set_x((_g->x + (2 * borderX)));
            		}
HXDLIN(  92)		{
HXLINE(  92)			 ::flixel::math::FlxPoint _g1 = _this;
HXDLIN(  92)			_g1->set_y((_g1->y + (2 * borderY)));
            		}
HXLINE(  91)		 ::flixel::graphics::frames::FlxTileFrames tileFrames = ::flixel::graphics::frames::FlxTileFrames_obj::fromGraphic(result,_this,null(),tileSpacing);
HXLINE(  94)		if (hx::IsNull( tileBorder )) {
HXLINE(  95)			return tileFrames;
            		}
HXLINE(  97)		return Dynamic( tileFrames->addBorder(tileBorder)).StaticCast<  ::flixel::graphics::frames::FlxTileFrames >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxTileFrames_obj,fromBitmapAddSpacesAndBorders,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::fromFrameAddSpacesAndBorders( ::flixel::graphics::frames::FlxFrame frame, ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxPoint tileSpacing, ::flixel::math::FlxPoint tileBorder){
            	HX_STACKFRAME(&_hx_pos_43be537ea661b39f_113_fromFrameAddSpacesAndBorders)
HXLINE( 114)		 ::openfl::display::BitmapData bitmap = frame->paint(null(),null(),null(),null());
HXLINE( 115)		return ::flixel::graphics::frames::FlxTileFrames_obj::fromBitmapAddSpacesAndBorders(bitmap,tileSize,tileSpacing,tileBorder,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxTileFrames_obj,fromFrameAddSpacesAndBorders,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::fromFrame( ::flixel::graphics::frames::FlxFrame frame, ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxPoint tileSpacing){
            	HX_GC_STACKFRAME(&_hx_pos_43be537ea661b39f_130_fromFrame)
HXLINE( 131)		 ::flixel::graphics::FlxGraphic graphic = frame->parent;
HXLINE( 133)		 ::flixel::graphics::frames::FlxTileFrames tileFrames = ::flixel::graphics::frames::FlxTileFrames_obj::findFrame(graphic,tileSize,null(),frame,tileSpacing,null());
HXLINE( 134)		if (hx::IsNotNull( tileFrames )) {
HXLINE( 135)			return tileFrames;
            		}
HXLINE( 138)		if (hx::IsNotNull( tileSpacing )) {
HXLINE( 138)			tileSpacing = tileSpacing;
            		}
            		else {
HXLINE( 138)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(0,0);
HXDLIN( 138)			point->_inPool = false;
HXDLIN( 138)			tileSpacing = point;
            		}
HXLINE( 140)		tileFrames =  ::flixel::graphics::frames::FlxTileFrames_obj::__alloc( HX_CTX ,graphic,null());
HXLINE( 141)		tileFrames->atlasFrame = frame;
HXLINE( 142)		tileFrames->region = frame->frame;
HXLINE( 143)		tileFrames->tileSize = tileSize;
HXLINE( 144)		tileFrames->tileSpacing = tileSpacing;
HXLINE( 146)		{
HXLINE( 146)			tileSpacing->set_x(( (Float)(::Math_obj::floor(tileSpacing->x)) ));
HXDLIN( 146)			tileSpacing->set_y(( (Float)(::Math_obj::floor(tileSpacing->y)) ));
            		}
HXLINE( 147)		{
HXLINE( 147)			tileSize->set_x(( (Float)(::Math_obj::floor(tileSize->x)) ));
HXDLIN( 147)			tileSize->set_y(( (Float)(::Math_obj::floor(tileSize->y)) ));
            		}
HXLINE( 149)		Float spacedWidth = (tileSize->x + tileSpacing->x);
HXLINE( 150)		Float spacedHeight = (tileSize->y + tileSpacing->y);
HXLINE( 152)		int numRows;
HXDLIN( 152)		if ((tileSize->y == 0)) {
HXLINE( 152)			numRows = 1;
            		}
            		else {
HXLINE( 152)			numRows = ::Std_obj::_hx_int(((frame->sourceSize->y + tileSpacing->y) / spacedHeight));
            		}
HXLINE( 153)		int numCols;
HXDLIN( 153)		if ((tileSize->x == 0)) {
HXLINE( 153)			numCols = 1;
            		}
            		else {
HXLINE( 153)			numCols = ::Std_obj::_hx_int(((frame->sourceSize->x + tileSpacing->x) / spacedWidth));
            		}
HXLINE( 155)		Float Width = tileSize->x;
HXDLIN( 155)		Float Height = tileSize->y;
HXDLIN( 155)		 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 155)		_this->x = ( (Float)(0) );
HXDLIN( 155)		_this->y = ( (Float)(0) );
HXDLIN( 155)		_this->width = Width;
HXDLIN( 155)		_this->height = Height;
HXDLIN( 155)		 ::flixel::math::FlxRect rect = _this;
HXDLIN( 155)		rect->_inPool = false;
HXDLIN( 155)		 ::flixel::math::FlxRect helperRect = rect;
HXLINE( 157)		{
HXLINE( 157)			int _g = 0;
HXDLIN( 157)			int _g1 = numRows;
HXDLIN( 157)			while((_g < _g1)){
HXLINE( 157)				_g = (_g + 1);
HXDLIN( 157)				int j = (_g - 1);
HXLINE( 159)				{
HXLINE( 159)					int _g2 = 0;
HXDLIN( 159)					int _g11 = numCols;
HXDLIN( 159)					while((_g2 < _g11)){
HXLINE( 159)						_g2 = (_g2 + 1);
HXDLIN( 159)						int i = (_g2 - 1);
HXLINE( 161)						helperRect->x = (spacedWidth * ( (Float)(i) ));
HXLINE( 162)						helperRect->y = (spacedHeight * ( (Float)(j) ));
HXLINE( 163)						tileFrames->pushFrame(frame->subFrameTo(helperRect,null()));
            					}
            				}
            			}
            		}
HXLINE( 167)		helperRect = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(helperRect)) );
HXLINE( 169)		tileFrames->numCols = numCols;
HXLINE( 170)		tileFrames->numRows = numRows;
HXLINE( 171)		return tileFrames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxTileFrames_obj,fromFrame,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::fromFrames(::Array< ::Dynamic> Frames){
            	HX_GC_STACKFRAME(&_hx_pos_43be537ea661b39f_183_fromFrames)
HXLINE( 184)		 ::flixel::graphics::frames::FlxFrame firstFrame = Frames->__get(0).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXLINE( 185)		 ::flixel::graphics::FlxGraphic graphic = firstFrame->parent;
HXLINE( 187)		{
HXLINE( 187)			int _g = 0;
HXDLIN( 187)			while((_g < Frames->length)){
HXLINE( 187)				 ::flixel::graphics::frames::FlxFrame frame = Frames->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 187)				_g = (_g + 1);
HXLINE( 189)				bool _hx_tmp;
HXDLIN( 189)				if (hx::IsEq( frame->parent,firstFrame->parent )) {
HXLINE( 189)					 ::flixel::math::FlxPoint _this = frame->sourceSize;
HXDLIN( 189)					 ::flixel::math::FlxPoint point = firstFrame->sourceSize;
HXDLIN( 189)					bool result;
HXDLIN( 189)					if ((::Math_obj::abs((_this->x - point->x)) <= ((Float)0.0000001))) {
HXLINE( 189)						result = (::Math_obj::abs((_this->y - point->y)) <= ((Float)0.0000001));
            					}
            					else {
HXLINE( 189)						result = false;
            					}
HXDLIN( 189)					if (point->_weak) {
HXLINE( 189)						point->put();
            					}
HXDLIN( 189)					_hx_tmp = !(result);
            				}
            				else {
HXLINE( 189)					_hx_tmp = true;
            				}
HXDLIN( 189)				if (_hx_tmp) {
HXLINE( 192)					return null();
            				}
            			}
            		}
HXLINE( 196)		 ::flixel::graphics::frames::FlxTileFrames tileFrames =  ::flixel::graphics::frames::FlxTileFrames_obj::__alloc( HX_CTX ,graphic,null());
HXLINE( 198)		tileFrames->region = null();
HXLINE( 199)		tileFrames->atlasFrame = null();
HXLINE( 200)		 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 200)		point1->_inPool = false;
HXDLIN( 200)		 ::flixel::math::FlxPoint _this1 = point1;
HXDLIN( 200)		 ::flixel::math::FlxPoint point2 = firstFrame->sourceSize;
HXDLIN( 200)		_this1->set_x(point2->x);
HXDLIN( 200)		_this1->set_y(point2->y);
HXDLIN( 200)		if (point2->_weak) {
HXLINE( 200)			point2->put();
            		}
HXDLIN( 200)		tileFrames->tileSize = _this1;
HXLINE( 201)		 ::flixel::math::FlxPoint point3 = ::flixel::math::FlxPoint_obj::_pool->get()->set(0,0);
HXDLIN( 201)		point3->_inPool = false;
HXDLIN( 201)		tileFrames->tileSpacing = point3;
HXLINE( 202)		tileFrames->numCols = Frames->length;
HXLINE( 203)		tileFrames->numRows = 1;
HXLINE( 205)		{
HXLINE( 205)			int _g1 = 0;
HXDLIN( 205)			while((_g1 < Frames->length)){
HXLINE( 205)				 ::flixel::graphics::frames::FlxFrame frame1 = Frames->__get(_g1).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 205)				_g1 = (_g1 + 1);
HXLINE( 207)				tileFrames->frames->push(frame1);
HXLINE( 209)				if (hx::IsNotNull( frame1->name )) {
HXLINE( 210)					tileFrames->framesHash->set(frame1->name,frame1);
            				}
            			}
            		}
HXLINE( 213)		return tileFrames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxTileFrames_obj,fromFrames,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::fromAtlasByPrefix( ::flixel::graphics::frames::FlxAtlasFrames Frames,::String Prefix){
            	HX_STACKFRAME(&_hx_pos_43be537ea661b39f_226_fromAtlasByPrefix)
HXLINE( 227)		::Array< ::Dynamic> framesToAdd = ::Array_obj< ::Dynamic>::__new();
HXLINE( 229)		{
HXLINE( 229)			int _g = 0;
HXDLIN( 229)			::Array< ::Dynamic> _g1 = Frames->frames;
HXDLIN( 229)			while((_g < _g1->length)){
HXLINE( 229)				 ::flixel::graphics::frames::FlxFrame frame = _g1->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 229)				_g = (_g + 1);
HXLINE( 231)				if (::StringTools_obj::startsWith(frame->name,Prefix)) {
HXLINE( 232)					framesToAdd->push(frame);
            				}
            			}
            		}
HXLINE( 235)		if ((framesToAdd->length > 0)) {
HXLINE( 237)			::String name = framesToAdd->__get(0).StaticCast<  ::flixel::graphics::frames::FlxFrame >()->name;
HXLINE( 238)			int postIndex = name.indexOf(HX_(".",2e,00,00,00),Prefix.length);
HXLINE( 239)			int postFix;
HXDLIN( 239)			if ((postIndex == -1)) {
HXLINE( 239)				postFix = name.length;
            			}
            			else {
HXLINE( 239)				postFix = postIndex;
            			}
HXDLIN( 239)			::String postFix1 = name.substring(postFix,name.length);
HXLINE( 241)			::flixel::graphics::frames::FlxFrame_obj::sort(framesToAdd,Prefix.length,postFix1.length);
HXLINE( 242)			return ::flixel::graphics::frames::FlxTileFrames_obj::fromFrames(framesToAdd);
            		}
HXLINE( 245)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxTileFrames_obj,fromAtlasByPrefix,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::fromGraphic( ::flixel::graphics::FlxGraphic graphic, ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxRect region, ::flixel::math::FlxPoint tileSpacing){
            	HX_GC_STACKFRAME(&_hx_pos_43be537ea661b39f_261_fromGraphic)
HXLINE( 263)		 ::flixel::graphics::frames::FlxTileFrames tileFrames = ::flixel::graphics::frames::FlxTileFrames_obj::findFrame(graphic,tileSize,region,null(),tileSpacing,null());
HXLINE( 264)		if (hx::IsNotNull( tileFrames )) {
HXLINE( 265)			return tileFrames;
            		}
HXLINE( 268)		if (hx::IsNull( region )) {
HXLINE( 270)			Float Width = ( (Float)(graphic->width) );
HXDLIN( 270)			Float Height = ( (Float)(graphic->height) );
HXDLIN( 270)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 270)			_this->x = ( (Float)(0) );
HXDLIN( 270)			_this->y = ( (Float)(0) );
HXDLIN( 270)			_this->width = Width;
HXDLIN( 270)			_this->height = Height;
HXDLIN( 270)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 270)			rect->_inPool = false;
HXDLIN( 270)			region = rect;
            		}
            		else {
HXLINE( 274)			if ((region->width == 0)) {
HXLINE( 275)				region->width = (( (Float)(graphic->width) ) - region->x);
            			}
HXLINE( 277)			if ((region->height == 0)) {
HXLINE( 278)				region->height = (( (Float)(graphic->height) ) - region->y);
            			}
            		}
HXLINE( 281)		if (hx::IsNotNull( tileSpacing )) {
HXLINE( 281)			tileSpacing = tileSpacing;
            		}
            		else {
HXLINE( 281)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(0,0);
HXDLIN( 281)			point->_inPool = false;
HXDLIN( 281)			tileSpacing = point;
            		}
HXLINE( 283)		tileFrames =  ::flixel::graphics::frames::FlxTileFrames_obj::__alloc( HX_CTX ,graphic,null());
HXLINE( 284)		tileFrames->region = region;
HXLINE( 285)		tileFrames->atlasFrame = null();
HXLINE( 286)		tileFrames->tileSize = tileSize;
HXLINE( 287)		tileFrames->tileSpacing = tileSpacing;
HXLINE( 289)		{
HXLINE( 289)			region->x = ( (Float)(::Math_obj::floor(region->x)) );
HXDLIN( 289)			region->y = ( (Float)(::Math_obj::floor(region->y)) );
HXDLIN( 289)			region->width = ( (Float)(::Math_obj::floor(region->width)) );
HXDLIN( 289)			region->height = ( (Float)(::Math_obj::floor(region->height)) );
            		}
HXLINE( 290)		{
HXLINE( 290)			tileSpacing->set_x(( (Float)(::Math_obj::floor(tileSpacing->x)) ));
HXDLIN( 290)			tileSpacing->set_y(( (Float)(::Math_obj::floor(tileSpacing->y)) ));
            		}
HXLINE( 291)		{
HXLINE( 291)			tileSize->set_x(( (Float)(::Math_obj::floor(tileSize->x)) ));
HXDLIN( 291)			tileSize->set_y(( (Float)(::Math_obj::floor(tileSize->y)) ));
            		}
HXLINE( 293)		Float spacedWidth = (tileSize->x + tileSpacing->x);
HXLINE( 294)		Float spacedHeight = (tileSize->y + tileSpacing->y);
HXLINE( 296)		int numRows;
HXDLIN( 296)		if ((tileSize->y == 0)) {
HXLINE( 296)			numRows = 1;
            		}
            		else {
HXLINE( 296)			numRows = ::Std_obj::_hx_int(((region->height + tileSpacing->y) / spacedHeight));
            		}
HXLINE( 297)		int numCols;
HXDLIN( 297)		if ((tileSize->x == 0)) {
HXLINE( 297)			numCols = 1;
            		}
            		else {
HXLINE( 297)			numCols = ::Std_obj::_hx_int(((region->width + tileSpacing->x) / spacedWidth));
            		}
HXLINE( 299)		 ::flixel::math::FlxRect tileRect;
HXLINE( 301)		{
HXLINE( 301)			int _g = 0;
HXDLIN( 301)			int _g1 = numRows;
HXDLIN( 301)			while((_g < _g1)){
HXLINE( 301)				_g = (_g + 1);
HXDLIN( 301)				int j = (_g - 1);
HXLINE( 303)				{
HXLINE( 303)					int _g2 = 0;
HXDLIN( 303)					int _g11 = numCols;
HXDLIN( 303)					while((_g2 < _g11)){
HXLINE( 303)						_g2 = (_g2 + 1);
HXDLIN( 303)						int i = (_g2 - 1);
HXLINE( 305)						Float X = (region->x + (( (Float)(i) ) * spacedWidth));
HXDLIN( 305)						Float Y = (region->y + (( (Float)(j) ) * spacedHeight));
HXDLIN( 305)						Float Width1 = tileSize->x;
HXDLIN( 305)						Float Height1 = tileSize->y;
HXDLIN( 305)						 ::flixel::math::FlxRect _this1 = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 305)						_this1->x = X;
HXDLIN( 305)						_this1->y = Y;
HXDLIN( 305)						_this1->width = Width1;
HXDLIN( 305)						_this1->height = Height1;
HXDLIN( 305)						 ::flixel::math::FlxRect rect1 = _this1;
HXDLIN( 305)						rect1->_inPool = false;
HXDLIN( 305)						tileRect = rect1;
HXLINE( 306)						tileFrames->addSpriteSheetFrame(tileRect);
            					}
            				}
            			}
            		}
HXLINE( 310)		tileFrames->numCols = numCols;
HXLINE( 311)		tileFrames->numRows = numRows;
HXLINE( 312)		return tileFrames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxTileFrames_obj,fromGraphic,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::fromRectangle( ::Dynamic source, ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxRect region, ::flixel::math::FlxPoint tileSpacing){
            	HX_STACKFRAME(&_hx_pos_43be537ea661b39f_328_fromRectangle)
HXLINE( 329)		 ::flixel::graphics::FlxGraphic graphic = ::flixel::FlxG_obj::bitmap->add(source,false,null());
HXLINE( 330)		if (hx::IsNull( graphic )) {
HXLINE( 331)			return null();
            		}
HXLINE( 332)		return ::flixel::graphics::frames::FlxTileFrames_obj::fromGraphic(graphic,tileSize,region,tileSpacing);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxTileFrames_obj,fromRectangle,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::combineTileSets(::Array< ::Dynamic> bitmaps, ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxPoint spacing, ::flixel::math::FlxPoint border){
            	HX_STACKFRAME(&_hx_pos_43be537ea661b39f_357_combineTileSets)
HXLINE( 358)		::Array< ::Dynamic> framesCollections = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 360)		{
HXLINE( 360)			int _g = 0;
HXDLIN( 360)			while((_g < bitmaps->length)){
HXLINE( 360)				 ::openfl::display::BitmapData bitmap = bitmaps->__get(_g).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN( 360)				_g = (_g + 1);
HXLINE( 361)				framesCollections->push(::flixel::graphics::frames::FlxTileFrames_obj::fromRectangle(bitmap,tileSize,null(),null()));
            			}
            		}
HXLINE( 363)		return ::flixel::graphics::frames::FlxTileFrames_obj::combineTileFrames(framesCollections,spacing,border);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxTileFrames_obj,combineTileSets,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::combineTileFrames(::Array< ::Dynamic> tileframes, ::flixel::math::FlxPoint spacing, ::flixel::math::FlxPoint border){
            	HX_GC_STACKFRAME(&_hx_pos_43be537ea661b39f_387_combineTileFrames)
HXLINE( 389)		int totalArea = 0;
HXLINE( 390)		int rows = 0;
HXLINE( 391)		int cols = 0;
HXLINE( 393)		int tileWidth = ::Std_obj::_hx_int(tileframes->__get(0).StaticCast<  ::flixel::graphics::frames::FlxTileFrames >()->frames->__get(0).StaticCast<  ::flixel::graphics::frames::FlxFrame >()->sourceSize->x);
HXLINE( 394)		int tileHeight = ::Std_obj::_hx_int(tileframes->__get(0).StaticCast<  ::flixel::graphics::frames::FlxTileFrames >()->frames->__get(0).StaticCast<  ::flixel::graphics::frames::FlxFrame >()->sourceSize->y);
HXLINE( 396)		int spaceX = 0;
HXLINE( 397)		int spaceY = 0;
HXLINE( 399)		if (hx::IsNotNull( spacing )) {
HXLINE( 401)			spaceX = ::Std_obj::_hx_int(spacing->x);
HXLINE( 402)			spaceY = ::Std_obj::_hx_int(spacing->y);
            		}
HXLINE( 405)		int borderX = 0;
HXLINE( 406)		int borderY = 0;
HXLINE( 408)		if (hx::IsNotNull( border )) {
HXLINE( 410)			borderX = ::Std_obj::_hx_int(border->x);
HXLINE( 411)			borderY = ::Std_obj::_hx_int(border->y);
            		}
HXLINE( 414)		{
HXLINE( 414)			int _g = 0;
HXDLIN( 414)			while((_g < tileframes->length)){
HXLINE( 414)				 ::flixel::graphics::frames::FlxTileFrames collection = tileframes->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxTileFrames >();
HXDLIN( 414)				_g = (_g + 1);
HXLINE( 416)				cols = collection->numCols;
HXLINE( 417)				rows = collection->numRows;
HXLINE( 418)				totalArea = (totalArea + ::Std_obj::_hx_int(( (Float)((((cols * (tileWidth + (2 * borderX))) * rows) * (tileHeight + (2 * borderY)))) )));
            			}
            		}
HXLINE( 421)		Float side = ::Math_obj::sqrt(( (Float)(totalArea) ));
HXLINE( 422)		cols = ::Std_obj::_hx_int((side / ( (Float)((tileWidth + (2 * borderX))) )));
HXLINE( 423)		rows = ::Math_obj::ceil((( (Float)(totalArea) ) / ( (Float)(((cols * (tileWidth + (2 * borderX))) * (tileHeight + (2 * borderY)))) )));
HXLINE( 424)		int width = (::Std_obj::_hx_int(( (Float)((cols * (tileWidth + (2 * borderX)))) )) + ((cols - 1) * spaceX));
HXLINE( 425)		int height = (::Std_obj::_hx_int(( (Float)((rows * (tileHeight + (2 * borderY)))) )) + ((rows - 1) * spaceY));
HXLINE( 428)		 ::openfl::display::BitmapData combined =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width,height,true,0);
HXLINE( 429)		 ::flixel::graphics::FlxGraphic graphic = ::flixel::FlxG_obj::bitmap->add(combined,null(),null());
HXLINE( 430)		 ::flixel::graphics::frames::FlxTileFrames result =  ::flixel::graphics::frames::FlxTileFrames_obj::__alloc( HX_CTX ,graphic,null());
HXLINE( 431)		 ::openfl::geom::Point destPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,borderX,borderY);
HXLINE( 433)		 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 433)		_this->x = ( (Float)(0) );
HXDLIN( 433)		_this->y = ( (Float)(0) );
HXDLIN( 433)		_this->width = ( (Float)(width) );
HXDLIN( 433)		_this->height = ( (Float)(height) );
HXDLIN( 433)		 ::flixel::math::FlxRect rect = _this;
HXDLIN( 433)		rect->_inPool = false;
HXDLIN( 433)		result->region = rect;
HXLINE( 434)		result->atlasFrame = null();
HXLINE( 435)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(tileWidth,tileHeight);
HXDLIN( 435)		point->_inPool = false;
HXDLIN( 435)		result->tileSize = point;
HXLINE( 436)		 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set(spaceX,spaceY);
HXDLIN( 436)		point1->_inPool = false;
HXDLIN( 436)		result->tileSpacing = point1;
HXLINE( 437)		result->numCols = cols;
HXLINE( 438)		result->numRows = rows;
HXLINE( 440)		{
HXLINE( 440)			int _g1 = 0;
HXDLIN( 440)			while((_g1 < tileframes->length)){
HXLINE( 440)				 ::flixel::graphics::frames::FlxTileFrames collection1 = tileframes->__get(_g1).StaticCast<  ::flixel::graphics::frames::FlxTileFrames >();
HXDLIN( 440)				_g1 = (_g1 + 1);
HXLINE( 442)				{
HXLINE( 442)					int _g11 = 0;
HXDLIN( 442)					::Array< ::Dynamic> _g2 = collection1->frames;
HXDLIN( 442)					while((_g11 < _g2->length)){
HXLINE( 442)						 ::flixel::graphics::frames::FlxFrame frame = _g2->__get(_g11).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 442)						_g11 = (_g11 + 1);
HXLINE( 444)						frame->paint(combined,destPoint,true,null());
HXLINE( 446)						Float X = destPoint->x;
HXDLIN( 446)						Float Y = destPoint->y;
HXDLIN( 446)						 ::flixel::math::FlxRect _this1 = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 446)						_this1->x = X;
HXDLIN( 446)						_this1->y = Y;
HXDLIN( 446)						_this1->width = ( (Float)(tileWidth) );
HXDLIN( 446)						_this1->height = ( (Float)(tileHeight) );
HXDLIN( 446)						 ::flixel::math::FlxRect rect1 = _this1;
HXDLIN( 446)						rect1->_inPool = false;
HXLINE( 447)						 ::flixel::math::FlxPoint point2 = ::flixel::math::FlxPoint_obj::_pool->get()->set(tileWidth,tileHeight);
HXDLIN( 447)						point2->_inPool = false;
HXDLIN( 447)						 ::flixel::math::FlxPoint point3 = ::flixel::math::FlxPoint_obj::_pool->get()->set(0,0);
HXDLIN( 447)						point3->_inPool = false;
HXLINE( 446)						result->addAtlasFrame(rect1,point2,point3,null(),null(),null(),null());
HXLINE( 448)						 ::openfl::geom::Point destPoint1 = destPoint;
HXDLIN( 448)						destPoint1->x = (destPoint1->x + ((tileWidth + (2 * borderX)) + spaceX));
HXLINE( 450)						if ((destPoint->x >= combined->width)) {
HXLINE( 452)							destPoint->x = ( (Float)(borderX) );
HXLINE( 453)							 ::openfl::geom::Point destPoint2 = destPoint;
HXDLIN( 453)							destPoint2->y = (destPoint2->y + ((tileHeight + (2 * borderY)) + spaceY));
            						}
            					}
            				}
            			}
            		}
HXLINE( 458)		::flixel::util::FlxBitmapDataUtil_obj::copyBorderPixels(combined,tileWidth,tileHeight,spaceX,spaceY,borderX,borderY,cols,rows);
HXLINE( 460)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxTileFrames_obj,combineTileFrames,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::findFrame( ::flixel::graphics::FlxGraphic graphic, ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxRect region, ::flixel::graphics::frames::FlxFrame atlasFrame, ::flixel::math::FlxPoint tileSpacing, ::flixel::math::FlxPoint border){
            	HX_STACKFRAME(&_hx_pos_43be537ea661b39f_477_findFrame)
HXLINE( 478)		 ::flixel::graphics::frames::FlxFrameCollectionType type = ::flixel::graphics::frames::FlxFrameCollectionType_obj::TILES_dyn();
HXDLIN( 478)		::cpp::VirtualArray collections = ( (::cpp::VirtualArray)(graphic->frameCollections->get(type)) );
HXDLIN( 478)		if (hx::IsNull( collections )) {
HXLINE( 478)			collections = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 478)			graphic->frameCollections->set(type,collections);
            		}
HXDLIN( 478)		::Array< ::Dynamic> tileFrames = collections;
HXLINE( 480)		{
HXLINE( 480)			int _g = 0;
HXDLIN( 480)			while((_g < tileFrames->length)){
HXLINE( 480)				 ::flixel::graphics::frames::FlxTileFrames sheet = tileFrames->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxTileFrames >();
HXDLIN( 480)				_g = (_g + 1);
HXLINE( 482)				if (sheet->equals(tileSize,region,null(),tileSpacing,border)) {
HXLINE( 483)					return sheet;
            				}
            			}
            		}
HXLINE( 486)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(FlxTileFrames_obj,findFrame,return )


hx::ObjectPtr< FlxTileFrames_obj > FlxTileFrames_obj::__new( ::flixel::graphics::FlxGraphic parent, ::flixel::math::FlxPoint border) {
	hx::ObjectPtr< FlxTileFrames_obj > __this = new FlxTileFrames_obj();
	__this->__construct(parent,border);
	return __this;
}

hx::ObjectPtr< FlxTileFrames_obj > FlxTileFrames_obj::__alloc(hx::Ctx *_hx_ctx, ::flixel::graphics::FlxGraphic parent, ::flixel::math::FlxPoint border) {
	FlxTileFrames_obj *__this = (FlxTileFrames_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxTileFrames_obj), true, "flixel.graphics.frames.FlxTileFrames"));
	*(void **)__this = FlxTileFrames_obj::_hx_vtable;
	__this->__construct(parent,border);
	return __this;
}

FlxTileFrames_obj::FlxTileFrames_obj()
{
}

void FlxTileFrames_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTileFrames);
	HX_MARK_MEMBER_NAME(atlasFrame,"atlasFrame");
	HX_MARK_MEMBER_NAME(region,"region");
	HX_MARK_MEMBER_NAME(tileSize,"tileSize");
	HX_MARK_MEMBER_NAME(tileSpacing,"tileSpacing");
	HX_MARK_MEMBER_NAME(numRows,"numRows");
	HX_MARK_MEMBER_NAME(numCols,"numCols");
	 ::flixel::graphics::frames::FlxFramesCollection_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTileFrames_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(atlasFrame,"atlasFrame");
	HX_VISIT_MEMBER_NAME(region,"region");
	HX_VISIT_MEMBER_NAME(tileSize,"tileSize");
	HX_VISIT_MEMBER_NAME(tileSpacing,"tileSpacing");
	HX_VISIT_MEMBER_NAME(numRows,"numRows");
	HX_VISIT_MEMBER_NAME(numCols,"numCols");
	 ::flixel::graphics::frames::FlxFramesCollection_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxTileFrames_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"region") ) { return hx::Val( region ); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"numRows") ) { return hx::Val( numRows ); }
		if (HX_FIELD_EQ(inName,"numCols") ) { return hx::Val( numCols ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tileSize") ) { return hx::Val( tileSize ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addBorder") ) { return hx::Val( addBorder_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"atlasFrame") ) { return hx::Val( atlasFrame ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"tileSpacing") ) { return hx::Val( tileSpacing ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getByTilePosition") ) { return hx::Val( getByTilePosition_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxTileFrames_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fromFrame") ) { outValue = fromFrame_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"findFrame") ) { outValue = findFrame_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromFrames") ) { outValue = fromFrames_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromGraphic") ) { outValue = fromGraphic_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromRectangle") ) { outValue = fromRectangle_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"combineTileSets") ) { outValue = combineTileSets_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"fromAtlasByPrefix") ) { outValue = fromAtlasByPrefix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"combineTileFrames") ) { outValue = combineTileFrames_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"fromFrameAddSpacesAndBorders") ) { outValue = fromFrameAddSpacesAndBorders_dyn(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"fromBitmapAddSpacesAndBorders") ) { outValue = fromBitmapAddSpacesAndBorders_dyn(); return true; }
	}
	return false;
}

hx::Val FlxTileFrames_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"region") ) { region=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"numRows") ) { numRows=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numCols") ) { numCols=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tileSize") ) { tileSize=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"atlasFrame") ) { atlasFrame=inValue.Cast<  ::flixel::graphics::frames::FlxFrame >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"tileSpacing") ) { tileSpacing=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTileFrames_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("atlasFrame",e2,8a,40,e9));
	outFields->push(HX_("region",f4,c0,8c,00));
	outFields->push(HX_("tileSize",0f,c7,59,86));
	outFields->push(HX_("tileSpacing",f5,71,1f,31));
	outFields->push(HX_("numRows",7f,9a,2f,9f));
	outFields->push(HX_("numCols",99,5d,45,95));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTileFrames_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::flixel::graphics::frames::FlxFrame */ ,(int)offsetof(FlxTileFrames_obj,atlasFrame),HX_("atlasFrame",e2,8a,40,e9)},
	{hx::fsObject /*  ::flixel::math::FlxRect */ ,(int)offsetof(FlxTileFrames_obj,region),HX_("region",f4,c0,8c,00)},
	{hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(FlxTileFrames_obj,tileSize),HX_("tileSize",0f,c7,59,86)},
	{hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(FlxTileFrames_obj,tileSpacing),HX_("tileSpacing",f5,71,1f,31)},
	{hx::fsInt,(int)offsetof(FlxTileFrames_obj,numRows),HX_("numRows",7f,9a,2f,9f)},
	{hx::fsInt,(int)offsetof(FlxTileFrames_obj,numCols),HX_("numCols",99,5d,45,95)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTileFrames_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTileFrames_obj_sMemberFields[] = {
	HX_("atlasFrame",e2,8a,40,e9),
	HX_("region",f4,c0,8c,00),
	HX_("tileSize",0f,c7,59,86),
	HX_("tileSpacing",f5,71,1f,31),
	HX_("numRows",7f,9a,2f,9f),
	HX_("numCols",99,5d,45,95),
	HX_("getByTilePosition",a4,3d,28,5c),
	HX_("equals",3f,ee,f2,bf),
	HX_("addBorder",ed,81,3e,1c),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

hx::Class FlxTileFrames_obj::__mClass;

static ::String FlxTileFrames_obj_sStaticFields[] = {
	HX_("fromBitmapAddSpacesAndBorders",05,1a,dd,f3),
	HX_("fromFrameAddSpacesAndBorders",db,16,d1,bd),
	HX_("fromFrame",63,62,0c,bb),
	HX_("fromFrames",b0,b4,c9,ef),
	HX_("fromAtlasByPrefix",6a,fb,8c,24),
	HX_("fromGraphic",5e,be,47,0c),
	HX_("fromRectangle",65,11,66,8d),
	HX_("combineTileSets",7e,b6,33,f9),
	HX_("combineTileFrames",d3,68,6b,b3),
	HX_("findFrame",34,a9,7a,f5),
	::String(null())
};

void FlxTileFrames_obj::__register()
{
	FlxTileFrames_obj _hx_dummy;
	FlxTileFrames_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("flixel.graphics.frames.FlxTileFrames",8f,b0,85,cc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxTileFrames_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxTileFrames_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTileFrames_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTileFrames_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTileFrames_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTileFrames_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace graphics
} // end namespace frames
