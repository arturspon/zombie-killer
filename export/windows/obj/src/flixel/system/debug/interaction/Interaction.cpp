// Generated by Haxe 4.0.0-rc.2+77068e10c
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_debug_FlxDebugger
#include <flixel/system/debug/FlxDebugger.h>
#endif
#ifndef INCLUDED_flixel_system_debug_GraphicInteractive
#include <flixel/system/debug/GraphicInteractive.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_Interaction
#include <flixel/system/debug/interaction/Interaction.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Eraser
#include <flixel/system/debug/interaction/tools/Eraser.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Mover
#include <flixel/system/debug/interaction/tools/Mover.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Pointer
#include <flixel/system/debug/interaction/tools/Pointer.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool
#include <flixel/system/debug/interaction/tools/Tool.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Transform
#include <flixel/system/debug/interaction/tools/Transform.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSystemButton
#include <flixel/system/ui/FlxSystemButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_35_new,"flixel.system.debug.interaction.Interaction","new",0xfa21d580,"flixel.system.debug.interaction.Interaction.new","flixel/system/debug/interaction/Interaction.hx",35,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_94_handleDebuggerVisibilityChanged,"flixel.system.debug.interaction.Interaction","handleDebuggerVisibilityChanged",0x3dea5c39,"flixel.system.debug.interaction.Interaction.handleDebuggerVisibilityChanged","flixel/system/debug/interaction/Interaction.hx",94,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_101_updateMouse,"flixel.system.debug.interaction.Interaction","updateMouse",0x7f05a47c,"flixel.system.debug.interaction.Interaction.updateMouse","flixel/system/debug/interaction/Interaction.hx",101,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_137_handleMouseClick,"flixel.system.debug.interaction.Interaction","handleMouseClick",0x6baf608b,"flixel.system.debug.interaction.Interaction.handleMouseClick","flixel/system/debug/interaction/Interaction.hx",137,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_153_belongsToDebugger,"flixel.system.debug.interaction.Interaction","belongsToDebugger",0x14e3d9d0,"flixel.system.debug.interaction.Interaction.belongsToDebugger","flixel/system/debug/interaction/Interaction.hx",153,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_162_handleMouseInDebugger,"flixel.system.debug.interaction.Interaction","handleMouseInDebugger",0xefc0f203,"flixel.system.debug.interaction.Interaction.handleMouseInDebugger","flixel/system/debug/interaction/Interaction.hx",162,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_178_handleKeyEvent,"flixel.system.debug.interaction.Interaction","handleKeyEvent",0xda0964a3,"flixel.system.debug.interaction.Interaction.handleKeyEvent","flixel/system/debug/interaction/Interaction.hx",178,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_188_countToolsWithUIButton,"flixel.system.debug.interaction.Interaction","countToolsWithUIButton",0x77bd6f38,"flixel.system.debug.interaction.Interaction.countToolsWithUIButton","flixel/system/debug/interaction/Interaction.hx",188,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_209_addTool,"flixel.system.debug.interaction.Interaction","addTool",0xefc5b339,"flixel.system.debug.interaction.Interaction.addTool","flixel/system/debug/interaction/Interaction.hx",209,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_234_destroy,"flixel.system.debug.interaction.Interaction","destroy",0x8b0d421a,"flixel.system.debug.interaction.Interaction.destroy","flixel/system/debug/interaction/Interaction.hx",234,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_266_isActive,"flixel.system.debug.interaction.Interaction","isActive",0xbe5b4430,"flixel.system.debug.interaction.Interaction.isActive","flixel/system/debug/interaction/Interaction.hx",266,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_270_update,"flixel.system.debug.interaction.Interaction","update",0x852f74e9,"flixel.system.debug.interaction.Interaction.update","flixel/system/debug/interaction/Interaction.hx",270,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_288_postDraw,"flixel.system.debug.interaction.Interaction","postDraw",0x505af364,"flixel.system.debug.interaction.Interaction.postDraw","flixel/system/debug/interaction/Interaction.hx",288,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_300_getDebugGraphics,"flixel.system.debug.interaction.Interaction","getDebugGraphics",0xd1fe02a8,"flixel.system.debug.interaction.Interaction.getDebugGraphics","flixel/system/debug/interaction/Interaction.hx",300,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_315_drawItemsSelection,"flixel.system.debug.interaction.Interaction","drawItemsSelection",0xcdd9aa30,"flixel.system.debug.interaction.Interaction.drawItemsSelection","flixel/system/debug/interaction/Interaction.hx",315,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_346_getTool,"flixel.system.debug.interaction.Interaction","getTool",0x860b202e,"flixel.system.debug.interaction.Interaction.getTool","flixel/system/debug/interaction/Interaction.hx",346,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_354_toggleVisible,"flixel.system.debug.interaction.Interaction","toggleVisible",0x4f15685e,"flixel.system.debug.interaction.Interaction.toggleVisible","flixel/system/debug/interaction/Interaction.hx",354,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_366_registerCustomCursor,"flixel.system.debug.interaction.Interaction","registerCustomCursor",0xf323974a,"flixel.system.debug.interaction.Interaction.registerCustomCursor","flixel/system/debug/interaction/Interaction.hx",366,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_387_updateCustomCursors,"flixel.system.debug.interaction.Interaction","updateCustomCursors",0x218c1283,"flixel.system.debug.interaction.Interaction.updateCustomCursors","flixel/system/debug/interaction/Interaction.hx",387,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_427_saveSystemCursorInfo,"flixel.system.debug.interaction.Interaction","saveSystemCursorInfo",0x622efa70,"flixel.system.debug.interaction.Interaction.saveSystemCursorInfo","flixel/system/debug/interaction/Interaction.hx",427,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_435_restoreSystemCursor,"flixel.system.debug.interaction.Interaction","restoreSystemCursor",0x6747acb3,"flixel.system.debug.interaction.Interaction.restoreSystemCursor","flixel/system/debug/interaction/Interaction.hx",435,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_444_setActiveTool,"flixel.system.debug.interaction.Interaction","setActiveTool",0x92d80fa0,"flixel.system.debug.interaction.Interaction.setActiveTool","flixel/system/debug/interaction/Interaction.hx",444,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_482_setSystemCursorVisibility,"flixel.system.debug.interaction.Interaction","setSystemCursorVisibility",0x3bad5fb9,"flixel.system.debug.interaction.Interaction.setSystemCursorVisibility","flixel/system/debug/interaction/Interaction.hx",482,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_490_setToolsCursorVisibility,"flixel.system.debug.interaction.Interaction","setToolsCursorVisibility",0x9dd4e861,"flixel.system.debug.interaction.Interaction.setToolsCursorVisibility","flixel/system/debug/interaction/Interaction.hx",490,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_508_clearSelection,"flixel.system.debug.interaction.Interaction","clearSelection",0x1e241bdf,"flixel.system.debug.interaction.Interaction.clearSelection","flixel/system/debug/interaction/Interaction.hx",508,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_513_keyPressed,"flixel.system.debug.interaction.Interaction","keyPressed",0xc6e951a3,"flixel.system.debug.interaction.Interaction.keyPressed","flixel/system/debug/interaction/Interaction.hx",513,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_517_keyJustPressed,"flixel.system.debug.interaction.Interaction","keyJustPressed",0x9fbba157,"flixel.system.debug.interaction.Interaction.keyJustPressed","flixel/system/debug/interaction/Interaction.hx",517,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_530_isInUse,"flixel.system.debug.interaction.Interaction","isInUse",0xc115fe38,"flixel.system.debug.interaction.Interaction.isInUse","flixel/system/debug/interaction/Interaction.hx",530,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_534_findItemsWithinState,"flixel.system.debug.interaction.Interaction","findItemsWithinState",0x412153bf,"flixel.system.debug.interaction.Interaction.findItemsWithinState","flixel/system/debug/interaction/Interaction.hx",534,0x4548a912)
HX_LOCAL_STACK_FRAME(_hx_pos_b2dd90bb9bc9fb13_552_findItemsWithinArea,"flixel.system.debug.interaction.Interaction","findItemsWithinArea",0xfd927d9f,"flixel.system.debug.interaction.Interaction.findItemsWithinArea","flixel/system/debug/interaction/Interaction.hx",552,0x4548a912)
namespace flixel{
namespace _hx_system{
namespace debug{
namespace interaction{

void Interaction_obj::__construct( ::openfl::display::Sprite container){
            	HX_GC_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_35_new)
HXLINE(  61)		this->_flixelPointer =  ::flixel::input::FlxPointer_obj::__alloc( HX_CTX );
HXLINE(  60)		this->_debuggerInteraction = false;
HXLINE(  57)		this->_keysUp =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  56)		this->_keysDown =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  55)		this->_turn = 2;
HXLINE(  54)		this->_tools = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  50)		this->shouldDrawItemsSelection = true;
HXLINE(  43)		this->pointerPressed = false;
HXLINE(  42)		this->pointerJustReleased = false;
HXLINE(  41)		this->pointerJustPressed = false;
HXLINE(  40)		this->flixelPointer =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  38)		this->selectedItems =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  65)		super::__construct(HX_("Tools",fb,01,5c,a7), ::flixel::_hx_system::debug::GraphicInteractive_obj::__alloc( HX_CTX ,0,0,null(),null()),40,25,false,null(),null(),null());
HXLINE(  66)		this->reposition(( (Float)(2) ),( (Float)(100) ));
HXLINE(  67)		this->_container = container;
HXLINE(  69)		this->_customCursor =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  70)		this->_customCursor->mouseEnabled = false;
HXLINE(  71)		this->_container->addChild(this->_customCursor);
HXLINE(  74)		this->addTool( ::flixel::_hx_system::debug::interaction::tools::Pointer_obj::__alloc( HX_CTX ));
HXLINE(  75)		this->addTool( ::flixel::_hx_system::debug::interaction::tools::Mover_obj::__alloc( HX_CTX ));
HXLINE(  76)		this->addTool( ::flixel::_hx_system::debug::interaction::tools::Eraser_obj::__alloc( HX_CTX ));
HXLINE(  77)		this->addTool( ::flixel::_hx_system::debug::interaction::tools::Transform_obj::__alloc( HX_CTX ));
HXLINE(  79)		::flixel::FlxG_obj::signals->postDraw->add(this->postDraw_dyn());
HXLINE(  80)		::flixel::FlxG_obj::debugger->visibilityChanged->add(this->handleDebuggerVisibilityChanged_dyn());
HXLINE(  82)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->updateMouse_dyn(),null(),null(),null());
HXLINE(  83)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->handleMouseClick_dyn(),null(),null(),null());
HXLINE(  84)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->handleMouseClick_dyn(),null(),null(),null());
HXLINE(  85)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->handleKeyEvent_dyn(),null(),null(),null());
HXLINE(  86)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->handleKeyEvent_dyn(),null(),null(),null());
HXLINE(  88)		this->_container->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->handleMouseInDebugger_dyn(),null(),null(),null());
HXLINE(  89)		this->_container->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->handleMouseInDebugger_dyn(),null(),null(),null());
            	}

Dynamic Interaction_obj::__CreateEmpty() { return new Interaction_obj; }

void *Interaction_obj::_hx_vtable = 0;

Dynamic Interaction_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Interaction_obj > _hx_result = new Interaction_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Interaction_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x0f610e14) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x0f610e14;
			}
		} else {
			return inClassId==(int)0x17120186 || inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x619ca9b8;
		}
	}
}

void Interaction_obj::handleDebuggerVisibilityChanged(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_94_handleDebuggerVisibilityChanged)
HXDLIN(  94)		if (::flixel::FlxG_obj::debugger->visible) {
HXLINE(  95)			this->saveSystemCursorInfo();
            		}
            		else {
HXLINE(  97)			this->restoreSystemCursor();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,handleDebuggerVisibilityChanged,(void))

void Interaction_obj::updateMouse( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_101_updateMouse)
HXLINE( 107)		Float offsetX = ((Float)0.0);
HXLINE( 108)		Float offsetY = ((Float)0.0);
HXLINE( 112)		if (hx::IsNotNull( this->activeTool )) {
HXLINE( 114)			 ::openfl::display::BitmapData cursorIcon = this->activeTool->cursor;
HXLINE( 115)			if (hx::IsNotNull( cursorIcon )) {
HXLINE( 117)				offsetX = ((( (Float)(cursorIcon->width) ) / ::flixel::FlxG_obj::scaleMode->scale->x) / ( (Float)(2) ));
HXLINE( 118)				offsetY = ((( (Float)(cursorIcon->height) ) / ::flixel::FlxG_obj::scaleMode->scale->y) / ( (Float)(2) ));
            			}
            		}
HXLINE( 122)		this->_customCursor->set_x((event->stageX + offsetX));
HXLINE( 123)		this->_customCursor->set_y((event->stageY + offsetY));
HXLINE( 127)		{
HXLINE( 127)			 ::flixel::input::FlxPointer _this = this->_flixelPointer;
HXDLIN( 127)			Float newY = event->stageY;
HXDLIN( 127)			_this->_globalScreenX = ::Std_obj::_hx_int((event->stageX / ::flixel::FlxG_obj::scaleMode->scale->x));
HXDLIN( 127)			_this->_globalScreenY = ::Std_obj::_hx_int((newY / ::flixel::FlxG_obj::scaleMode->scale->y));
HXDLIN( 127)			_this->updatePositions();
            		}
HXLINE( 131)		this->flixelPointer->set_x((this->_flixelPointer->x + offsetX));
HXLINE( 132)		this->flixelPointer->set_y((this->_flixelPointer->y + offsetY));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,updateMouse,(void))

void Interaction_obj::handleMouseClick( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_137_handleMouseClick)
HXLINE( 140)		bool _hx_tmp;
HXDLIN( 140)		if ((event->type == HX_("mouseDown",27,b1,c2,ee))) {
HXLINE( 140)			_hx_tmp = this->belongsToDebugger(( ( ::openfl::display::DisplayObject)(event->target) ));
            		}
            		else {
HXLINE( 140)			_hx_tmp = false;
            		}
HXDLIN( 140)		if (_hx_tmp) {
HXLINE( 141)			return;
            		}
HXLINE( 143)		this->pointerJustPressed = (event->type == HX_("mouseDown",27,b1,c2,ee));
HXLINE( 144)		this->pointerJustReleased = (event->type == HX_("mouseUp",e0,f3,72,c0));
HXLINE( 146)		if (this->pointerJustPressed) {
HXLINE( 147)			this->pointerPressed = true;
            		}
            		else {
HXLINE( 148)			if (this->pointerJustReleased) {
HXLINE( 149)				this->pointerPressed = false;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,handleMouseClick,(void))

bool Interaction_obj::belongsToDebugger( ::openfl::display::DisplayObject object){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_153_belongsToDebugger)
HXLINE( 154)		if (hx::IsNull( object )) {
HXLINE( 155)			return false;
            		}
            		else {
HXLINE( 156)			if (::Std_obj::is(object,hx::ClassOf< ::flixel::_hx_system::debug::FlxDebugger >())) {
HXLINE( 157)				return true;
            			}
            		}
HXLINE( 158)		return this->belongsToDebugger(object->parent);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,belongsToDebugger,return )

void Interaction_obj::handleMouseInDebugger( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_162_handleMouseInDebugger)
HXLINE( 165)		if (!(this->isActive())) {
HXLINE( 166)			return;
            		}
HXLINE( 168)		if ((event->type == HX_("mouseOver",19,4a,0d,f6))) {
HXLINE( 169)			this->_debuggerInteraction = true;
            		}
            		else {
HXLINE( 170)			if ((event->type == HX_("mouseOut",69,e7,1d,a4))) {
HXLINE( 171)				this->_debuggerInteraction = false;
            			}
            		}
HXLINE( 173)		event->stopPropagation();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,handleMouseInDebugger,(void))

void Interaction_obj::handleKeyEvent( ::openfl::events::KeyboardEvent event){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_178_handleKeyEvent)
HXDLIN( 178)		if ((event->type == HX_("keyDown",a1,69,47,9c))) {
HXLINE( 179)			this->_keysDown->set(event->keyCode,true);
            		}
            		else {
HXLINE( 180)			if ((event->type == HX_("keyUp",da,b9,fe,de))) {
HXLINE( 182)				this->_keysDown->set(event->keyCode,false);
HXLINE( 183)				this->_keysUp->set(event->keyCode,this->_turn);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,handleKeyEvent,(void))

int Interaction_obj::countToolsWithUIButton(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_188_countToolsWithUIButton)
HXLINE( 189)		int count = 0;
HXLINE( 190)		{
HXLINE( 190)			int _g = 0;
HXDLIN( 190)			::Array< ::Dynamic> _g1 = this->_tools;
HXDLIN( 190)			while((_g < _g1->length)){
HXLINE( 190)				 ::flixel::_hx_system::debug::interaction::tools::Tool tool = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::interaction::tools::Tool >();
HXDLIN( 190)				_g = (_g + 1);
HXLINE( 191)				if (hx::IsNotNull( tool->button )) {
HXLINE( 192)					count = (count + 1);
            				}
            			}
            		}
HXLINE( 193)		return count;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,countToolsWithUIButton,return )

void Interaction_obj::addTool( ::flixel::_hx_system::debug::interaction::tools::Tool tool){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_209_addTool)
HXLINE( 210)		tool->init(hx::ObjectPtr<OBJ_>(this));
HXLINE( 211)		this->_tools->push(tool);
HXLINE( 214)		 ::flixel::_hx_system::ui::FlxSystemButton button = tool->button;
HXLINE( 215)		if (hx::IsNull( button )) {
HXLINE( 216)			return;
            		}
HXLINE( 218)		int buttonsPerLine = 2;
HXLINE( 219)		int buttons = this->countToolsWithUIButton();
HXLINE( 220)		int lines = ::Std_obj::_hx_int(( (Float)(::Math_obj::ceil((( (Float)(buttons) ) / ( (Float)(buttonsPerLine) )))) ));
HXLINE( 221)		int slot = ::Std_obj::_hx_int((( (Float)(buttons) ) / ( (Float)(lines) )));
HXLINE( 223)		button->set_x(( (Float)((-15 + (slot * 25))) ));
HXLINE( 224)		button->set_y(( (Float)((20 * lines)) ));
HXLINE( 226)		this->addChild(button);
HXLINE( 227)		this->resize(((( (Float)(25) ) * ::Math_obj::min(( (Float)(buttons) ),( (Float)(buttonsPerLine) ))) + 10),( (Float)(((25 * lines) + 10)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,addTool,(void))

void Interaction_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_234_destroy)
HXLINE( 235)		::flixel::FlxG_obj::signals->postDraw->remove(this->postDraw_dyn());
HXLINE( 236)		::flixel::FlxG_obj::debugger->visibilityChanged->remove(this->handleDebuggerVisibilityChanged_dyn());
HXLINE( 238)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->updateMouse_dyn(),null());
HXLINE( 239)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("mouseDown",27,b1,c2,ee),this->handleMouseClick_dyn(),null());
HXLINE( 240)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->handleMouseClick_dyn(),null());
HXLINE( 241)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->handleKeyEvent_dyn(),null());
HXLINE( 242)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->handleKeyEvent_dyn(),null());
HXLINE( 244)		if (hx::IsNotNull( this->_container )) {
HXLINE( 246)			this->_container->removeEventListener(HX_("mouseOver",19,4a,0d,f6),this->handleMouseInDebugger_dyn(),null());
HXLINE( 247)			this->_container->removeEventListener(HX_("mouseOut",69,e7,1d,a4),this->handleMouseInDebugger_dyn(),null());
            		}
HXLINE( 250)		if (hx::IsNotNull( this->_customCursor )) {
HXLINE( 252)			this->_customCursor->parent->removeChild(this->_customCursor);
HXLINE( 253)			this->_customCursor = null();
            		}
HXLINE( 256)		this->_tools = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_tools);
HXLINE( 257)		this->selectedItems = ( ( ::flixel::group::FlxTypedGroup)(::flixel::util::FlxDestroyUtil_obj::destroy(this->selectedItems)) );
HXLINE( 258)		this->flixelPointer = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::destroy(this->flixelPointer)) );
HXLINE( 260)		this->_keysDown = null();
HXLINE( 261)		this->_keysUp = null();
            	}


bool Interaction_obj::isActive(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_266_isActive)
HXDLIN( 266)		if (::flixel::FlxG_obj::debugger->visible) {
HXDLIN( 266)			return this->get_visible();
            		}
            		else {
HXDLIN( 266)			return false;
            		}
HXDLIN( 266)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,isActive,return )

void Interaction_obj::update(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_270_update)
HXLINE( 271)		if (!(this->isActive())) {
HXLINE( 272)			return;
            		}
HXLINE( 274)		this->updateCustomCursors();
HXLINE( 276)		{
HXLINE( 276)			int _g = 0;
HXDLIN( 276)			::Array< ::Dynamic> _g1 = this->_tools;
HXDLIN( 276)			while((_g < _g1->length)){
HXLINE( 276)				 ::flixel::_hx_system::debug::interaction::tools::Tool tool = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::interaction::tools::Tool >();
HXDLIN( 276)				_g = (_g + 1);
HXLINE( 277)				tool->update();
            			}
            		}
HXLINE( 279)		this->pointerJustPressed = false;
HXLINE( 280)		this->pointerJustReleased = false;
HXLINE( 281)		this->_turn++;
            	}


void Interaction_obj::postDraw(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_288_postDraw)
HXLINE( 289)		if (!(this->isActive())) {
HXLINE( 290)			return;
            		}
HXLINE( 292)		{
HXLINE( 292)			int _g = 0;
HXDLIN( 292)			::Array< ::Dynamic> _g1 = this->_tools;
HXDLIN( 292)			while((_g < _g1->length)){
HXLINE( 292)				 ::flixel::_hx_system::debug::interaction::tools::Tool tool = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::interaction::tools::Tool >();
HXDLIN( 292)				_g = (_g + 1);
HXLINE( 293)				tool->draw();
            			}
            		}
HXLINE( 295)		if (this->shouldDrawItemsSelection) {
HXLINE( 296)			this->drawItemsSelection();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,postDraw,(void))

 ::openfl::display::Graphics Interaction_obj::getDebugGraphics(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_300_getDebugGraphics)
HXLINE( 301)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 303)			::flixel::util::FlxSpriteUtil_obj::flashGfx->clear();
HXLINE( 304)			return ::flixel::util::FlxSpriteUtil_obj::flashGfx;
            		}
HXLINE( 308)		return ::flixel::FlxG_obj::camera->debugLayer->get_graphics();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,getDebugGraphics,return )

void Interaction_obj::drawItemsSelection(){
            	HX_GC_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_315_drawItemsSelection)
HXLINE( 316)		 ::openfl::display::Graphics gfx = this->getDebugGraphics();
HXLINE( 317)		if (hx::IsNull( gfx )) {
HXLINE( 318)			return;
            		}
HXLINE( 320)		{
HXLINE( 320)			 ::flixel::group::FlxTypedGroupIterator member =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->selectedItems->members,null());
HXDLIN( 320)			while(member->hasNext()){
HXLINE( 320)				 ::flixel::FlxObject member1 = member->next().StaticCast<  ::flixel::FlxObject >();
HXLINE( 322)				bool _hx_tmp;
HXDLIN( 322)				bool _hx_tmp1;
HXDLIN( 322)				if (hx::IsNotNull( member1 )) {
HXLINE( 322)					_hx_tmp1 = hx::IsNotNull( member1->scrollFactor );
            				}
            				else {
HXLINE( 322)					_hx_tmp1 = false;
            				}
HXDLIN( 322)				if (_hx_tmp1) {
HXLINE( 322)					_hx_tmp = member1->isOnScreen(null());
            				}
            				else {
HXLINE( 322)					_hx_tmp = false;
            				}
HXDLIN( 322)				if (_hx_tmp) {
HXLINE( 325)					gfx->lineStyle(((Float)0.9),16711680,null(),null(),null(),null(),null(),null());
HXLINE( 326)					Float _hx_tmp2 = (member1->x - ::flixel::FlxG_obj::camera->scroll->x);
HXLINE( 327)					Float _hx_tmp3 = (member1->y - ::flixel::FlxG_obj::camera->scroll->y);
HXLINE( 328)					Float _hx_tmp4 = member1->get_width();
HXLINE( 326)					gfx->drawRect(_hx_tmp2,_hx_tmp3,_hx_tmp4,member1->get_height());
            				}
            			}
            		}
HXLINE( 333)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 334)			::flixel::FlxG_obj::camera->buffer->draw(::flixel::util::FlxSpriteUtil_obj::flashGfxSprite,null(),null(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,drawItemsSelection,(void))

 ::flixel::_hx_system::debug::interaction::tools::Tool Interaction_obj::getTool(hx::Class className){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_346_getTool)
HXLINE( 347)		{
HXLINE( 347)			int _g = 0;
HXDLIN( 347)			::Array< ::Dynamic> _g1 = this->_tools;
HXDLIN( 347)			while((_g < _g1->length)){
HXLINE( 347)				 ::flixel::_hx_system::debug::interaction::tools::Tool tool = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::interaction::tools::Tool >();
HXDLIN( 347)				_g = (_g + 1);
HXLINE( 348)				if (::Std_obj::is(tool,className)) {
HXLINE( 349)					return tool;
            				}
            			}
            		}
HXLINE( 350)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,getTool,return )

void Interaction_obj::toggleVisible(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_354_toggleVisible)
HXLINE( 355)		this->super::toggleVisible();
HXLINE( 357)		if (!(this->get_visible())) {
HXLINE( 360)			this->setActiveTool(null());
HXLINE( 361)			this->restoreSystemCursor();
            		}
            	}


void Interaction_obj::registerCustomCursor(::String name, ::openfl::display::BitmapData icon){
            	HX_GC_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_366_registerCustomCursor)
HXLINE( 367)		if (hx::IsNull( icon )) {
HXLINE( 368)			return;
            		}
HXLINE( 373)		 ::openfl::display::Sprite sprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 374)		sprite->set_visible(false);
HXLINE( 375)		sprite->set_name(name);
HXLINE( 376)		sprite->addChild( ::openfl::display::Bitmap_obj::__alloc( HX_CTX ,icon,null(),null()));
HXLINE( 377)		this->_customCursor->addChild(sprite);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interaction_obj,registerCustomCursor,(void))

void Interaction_obj::updateCustomCursors(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_387_updateCustomCursors)
HXDLIN( 387)		bool _hx_tmp;
HXDLIN( 387)		if (hx::IsNotNull( this->activeTool )) {
HXDLIN( 387)			_hx_tmp = !(this->_debuggerInteraction);
            		}
            		else {
HXDLIN( 387)			_hx_tmp = false;
            		}
HXDLIN( 387)		if (_hx_tmp) {
HXLINE( 390)			if (hx::IsNotNull( this->activeTool->cursor )) {
HXLINE( 393)				::String cursorInUse;
HXDLIN( 393)				if ((this->activeTool->cursorInUse == HX_("",00,00,00,00))) {
HXLINE( 393)					cursorInUse = this->activeTool->getName();
            				}
            				else {
HXLINE( 393)					cursorInUse = this->activeTool->cursorInUse;
            				}
HXLINE( 401)				{
HXLINE( 401)					int _g = 0;
HXDLIN( 401)					int _g1 = this->_customCursor->get_numChildren();
HXDLIN( 401)					while((_g < _g1)){
HXLINE( 401)						_g = (_g + 1);
HXDLIN( 401)						int i = (_g - 1);
HXLINE( 403)						 ::openfl::display::DisplayObject sprite = this->_customCursor->getChildAt(i);
HXLINE( 404)						sprite->set_visible((sprite->get_name() == cursorInUse));
            					}
            				}
HXLINE( 406)				if (::flixel::FlxG_obj::mouse->visible) {
HXLINE( 407)					::flixel::FlxG_obj::mouse->set_visible(false);
            				}
            			}
            			else {
HXLINE( 414)				::flixel::FlxG_obj::mouse->set_useSystemCursor(true);
            			}
            		}
            		else {
HXLINE( 421)			::flixel::FlxG_obj::mouse->set_useSystemCursor(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,updateCustomCursors,(void))

void Interaction_obj::saveSystemCursorInfo(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_427_saveSystemCursorInfo)
HXLINE( 429)		this->_wasMouseVisible = ::flixel::FlxG_obj::mouse->visible;
HXLINE( 430)		this->_wasUsingSystemCursor = ::flixel::FlxG_obj::mouse->useSystemCursor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,saveSystemCursorInfo,(void))

void Interaction_obj::restoreSystemCursor(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_435_restoreSystemCursor)
HXLINE( 437)		::flixel::FlxG_obj::mouse->set_useSystemCursor(this->_wasUsingSystemCursor);
HXLINE( 438)		::flixel::FlxG_obj::mouse->set_visible(this->_wasMouseVisible);
HXLINE( 439)		this->_customCursor->set_visible(false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,restoreSystemCursor,(void))

void Interaction_obj::setActiveTool( ::flixel::_hx_system::debug::interaction::tools::Tool value){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_444_setActiveTool)
HXLINE( 445)		if (hx::IsNotNull( this->activeTool )) {
HXLINE( 447)			this->activeTool->deactivate();
HXLINE( 448)			this->activeTool->button->set_toggled(true);
            		}
HXLINE( 453)		if (hx::IsEq( this->activeTool,value )) {
HXLINE( 454)			value = null();
            		}
HXLINE( 456)		this->activeTool = value;
HXLINE( 458)		if (hx::IsNotNull( this->activeTool )) {
HXLINE( 461)			this->setToolsCursorVisibility(true);
HXLINE( 463)			this->activeTool->button->set_toggled(false);
HXLINE( 464)			this->activeTool->activate();
HXLINE( 465)			this->updateCustomCursors();
            		}
            		else {
HXLINE( 471)			this->setSystemCursorVisibility(true);
            		}
HXLINE( 477)		::flixel::FlxG_obj::mouse->enabled = !(this->isInUse());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,setActiveTool,(void))

void Interaction_obj::setSystemCursorVisibility(bool status){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_482_setSystemCursorVisibility)
HXLINE( 484)		::flixel::FlxG_obj::mouse->set_useSystemCursor(status);
HXLINE( 486)		this->_customCursor->set_visible(!(status));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,setSystemCursorVisibility,(void))

void Interaction_obj::setToolsCursorVisibility(bool status){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_490_setToolsCursorVisibility)
HXLINE( 492)		::flixel::FlxG_obj::mouse->set_useSystemCursor(false);
HXLINE( 494)		this->_customCursor->set_visible(status);
HXLINE( 496)		if (status) {
HXLINE( 497)			return;
            		}
HXLINE( 502)		{
HXLINE( 502)			int _g = 0;
HXDLIN( 502)			int _g1 = this->_customCursor->get_numChildren();
HXDLIN( 502)			while((_g < _g1)){
HXLINE( 502)				_g = (_g + 1);
HXDLIN( 502)				int i = (_g - 1);
HXLINE( 503)				this->_customCursor->getChildAt(i)->set_visible(false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,setToolsCursorVisibility,(void))

void Interaction_obj::clearSelection(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_508_clearSelection)
HXDLIN( 508)		this->selectedItems->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,clearSelection,(void))

bool Interaction_obj::keyPressed(int key){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_513_keyPressed)
HXDLIN( 513)		return this->_keysDown->get_bool(key);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,keyPressed,return )

bool Interaction_obj::keyJustPressed(int key){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_517_keyJustPressed)
HXLINE( 518)		int value;
HXDLIN( 518)		if (hx::IsNull( this->_keysUp->get(key) )) {
HXLINE( 518)			value = 0;
            		}
            		else {
HXLINE( 518)			value = this->_keysUp->get_int(key);
            		}
HXLINE( 519)		return ((this->_turn - value) == 1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,keyJustPressed,return )

bool Interaction_obj::isInUse(){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_530_isInUse)
HXDLIN( 530)		bool _hx_tmp;
HXDLIN( 530)		if (::flixel::FlxG_obj::debugger->visible) {
HXDLIN( 530)			_hx_tmp = this->get_visible();
            		}
            		else {
HXDLIN( 530)			_hx_tmp = false;
            		}
HXDLIN( 530)		if (_hx_tmp) {
HXDLIN( 530)			return hx::IsNotNull( this->activeTool );
            		}
            		else {
HXDLIN( 530)			return false;
            		}
HXDLIN( 530)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,isInUse,return )

void Interaction_obj::findItemsWithinState(::Array< ::Dynamic> items, ::flixel::FlxState state, ::flixel::math::FlxRect area){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_534_findItemsWithinState)
HXLINE( 535)		this->findItemsWithinArea(items,state->members,area);
HXLINE( 536)		if (hx::IsNotNull( state->subState )) {
HXLINE( 537)			this->findItemsWithinState(items,state->subState,area);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interaction_obj,findItemsWithinState,(void))

void Interaction_obj::findItemsWithinArea(::Array< ::Dynamic> items,::Array< ::Dynamic> members, ::flixel::math::FlxRect area){
            	HX_STACKFRAME(&_hx_pos_b2dd90bb9bc9fb13_552_findItemsWithinArea)
HXLINE( 554)		int i = members->length;
HXLINE( 555)		while(true){
HXLINE( 555)			i = (i - 1);
HXDLIN( 555)			if (!(((i + 1) > 0))) {
HXLINE( 555)				goto _hx_goto_36;
            			}
HXLINE( 557)			 ::flixel::FlxBasic member = members->__get(i).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 559)			bool _hx_tmp;
HXDLIN( 559)			bool _hx_tmp1;
HXDLIN( 559)			if (hx::IsNotNull( member )) {
HXLINE( 559)				_hx_tmp1 = !(member->visible);
            			}
            			else {
HXLINE( 559)				_hx_tmp1 = true;
            			}
HXDLIN( 559)			if (!(_hx_tmp1)) {
HXLINE( 559)				_hx_tmp = !(member->exists);
            			}
            			else {
HXLINE( 559)				_hx_tmp = true;
            			}
HXDLIN( 559)			if (_hx_tmp) {
HXLINE( 560)				continue;
            			}
HXLINE( 562)			 ::flixel::group::FlxTypedGroup group = ::flixel::group::FlxTypedGroup_obj::resolveGroup(member);
HXLINE( 563)			if (hx::IsNotNull( group )) {
HXLINE( 564)				this->findItemsWithinArea(items,group->members,area);
            			}
            			else {
HXLINE( 565)				bool _hx_tmp2;
HXDLIN( 565)				if (::Std_obj::is(member,hx::ClassOf< ::flixel::FlxSprite >())) {
HXLINE( 566)					 ::flixel::math::FlxRect Rect = hx::TCast<  ::flixel::FlxObject >::cast(member)->getHitbox(null());
HXDLIN( 566)					bool result;
HXDLIN( 566)					bool result1;
HXDLIN( 566)					bool result2;
HXDLIN( 566)					if (((Rect->x + Rect->width) > area->x)) {
HXLINE( 566)						result2 = (Rect->x < (area->x + area->width));
            					}
            					else {
HXLINE( 566)						result2 = false;
            					}
HXDLIN( 566)					if (result2) {
HXLINE( 566)						result1 = ((Rect->y + Rect->height) > area->y);
            					}
            					else {
HXLINE( 566)						result1 = false;
            					}
HXDLIN( 566)					if (result1) {
HXLINE( 566)						result = (Rect->y < (area->y + area->height));
            					}
            					else {
HXLINE( 566)						result = false;
            					}
HXDLIN( 566)					if (Rect->_weak) {
HXLINE( 566)						if (!(Rect->_inPool)) {
HXLINE( 566)							Rect->_inPool = true;
HXDLIN( 566)							Rect->_weak = false;
HXDLIN( 566)							::flixel::math::FlxRect_obj::_pool->putUnsafe(Rect);
            						}
            					}
HXLINE( 565)					_hx_tmp2 = result;
            				}
            				else {
HXLINE( 565)					_hx_tmp2 = false;
            				}
HXDLIN( 565)				if (_hx_tmp2) {
HXLINE( 567)					items->push(member);
            				}
            			}
            		}
            		_hx_goto_36:;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interaction_obj,findItemsWithinArea,(void))


hx::ObjectPtr< Interaction_obj > Interaction_obj::__new( ::openfl::display::Sprite container) {
	hx::ObjectPtr< Interaction_obj > __this = new Interaction_obj();
	__this->__construct(container);
	return __this;
}

hx::ObjectPtr< Interaction_obj > Interaction_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::Sprite container) {
	Interaction_obj *__this = (Interaction_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Interaction_obj), true, "flixel.system.debug.interaction.Interaction"));
	*(void **)__this = Interaction_obj::_hx_vtable;
	__this->__construct(container);
	return __this;
}

Interaction_obj::Interaction_obj()
{
}

void Interaction_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Interaction);
	HX_MARK_MEMBER_NAME(activeTool,"activeTool");
	HX_MARK_MEMBER_NAME(selectedItems,"selectedItems");
	HX_MARK_MEMBER_NAME(flixelPointer,"flixelPointer");
	HX_MARK_MEMBER_NAME(pointerJustPressed,"pointerJustPressed");
	HX_MARK_MEMBER_NAME(pointerJustReleased,"pointerJustReleased");
	HX_MARK_MEMBER_NAME(pointerPressed,"pointerPressed");
	HX_MARK_MEMBER_NAME(shouldDrawItemsSelection,"shouldDrawItemsSelection");
	HX_MARK_MEMBER_NAME(_container,"_container");
	HX_MARK_MEMBER_NAME(_customCursor,"_customCursor");
	HX_MARK_MEMBER_NAME(_tools,"_tools");
	HX_MARK_MEMBER_NAME(_turn,"_turn");
	HX_MARK_MEMBER_NAME(_keysDown,"_keysDown");
	HX_MARK_MEMBER_NAME(_keysUp,"_keysUp");
	HX_MARK_MEMBER_NAME(_wasMouseVisible,"_wasMouseVisible");
	HX_MARK_MEMBER_NAME(_wasUsingSystemCursor,"_wasUsingSystemCursor");
	HX_MARK_MEMBER_NAME(_debuggerInteraction,"_debuggerInteraction");
	HX_MARK_MEMBER_NAME(_flixelPointer,"_flixelPointer");
	 ::flixel::_hx_system::debug::Window_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Interaction_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(activeTool,"activeTool");
	HX_VISIT_MEMBER_NAME(selectedItems,"selectedItems");
	HX_VISIT_MEMBER_NAME(flixelPointer,"flixelPointer");
	HX_VISIT_MEMBER_NAME(pointerJustPressed,"pointerJustPressed");
	HX_VISIT_MEMBER_NAME(pointerJustReleased,"pointerJustReleased");
	HX_VISIT_MEMBER_NAME(pointerPressed,"pointerPressed");
	HX_VISIT_MEMBER_NAME(shouldDrawItemsSelection,"shouldDrawItemsSelection");
	HX_VISIT_MEMBER_NAME(_container,"_container");
	HX_VISIT_MEMBER_NAME(_customCursor,"_customCursor");
	HX_VISIT_MEMBER_NAME(_tools,"_tools");
	HX_VISIT_MEMBER_NAME(_turn,"_turn");
	HX_VISIT_MEMBER_NAME(_keysDown,"_keysDown");
	HX_VISIT_MEMBER_NAME(_keysUp,"_keysUp");
	HX_VISIT_MEMBER_NAME(_wasMouseVisible,"_wasMouseVisible");
	HX_VISIT_MEMBER_NAME(_wasUsingSystemCursor,"_wasUsingSystemCursor");
	HX_VISIT_MEMBER_NAME(_debuggerInteraction,"_debuggerInteraction");
	HX_VISIT_MEMBER_NAME(_flixelPointer,"_flixelPointer");
	 ::flixel::_hx_system::debug::Window_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Interaction_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_turn") ) { return hx::Val( _turn ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_tools") ) { return hx::Val( _tools ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_keysUp") ) { return hx::Val( _keysUp ); }
		if (HX_FIELD_EQ(inName,"addTool") ) { return hx::Val( addTool_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTool") ) { return hx::Val( getTool_dyn() ); }
		if (HX_FIELD_EQ(inName,"isInUse") ) { return hx::Val( isInUse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isActive") ) { return hx::Val( isActive_dyn() ); }
		if (HX_FIELD_EQ(inName,"postDraw") ) { return hx::Val( postDraw_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_keysDown") ) { return hx::Val( _keysDown ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"activeTool") ) { return hx::Val( activeTool ); }
		if (HX_FIELD_EQ(inName,"_container") ) { return hx::Val( _container ); }
		if (HX_FIELD_EQ(inName,"keyPressed") ) { return hx::Val( keyPressed_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"updateMouse") ) { return hx::Val( updateMouse_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectedItems") ) { return hx::Val( selectedItems ); }
		if (HX_FIELD_EQ(inName,"flixelPointer") ) { return hx::Val( flixelPointer ); }
		if (HX_FIELD_EQ(inName,"_customCursor") ) { return hx::Val( _customCursor ); }
		if (HX_FIELD_EQ(inName,"toggleVisible") ) { return hx::Val( toggleVisible_dyn() ); }
		if (HX_FIELD_EQ(inName,"setActiveTool") ) { return hx::Val( setActiveTool_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"pointerPressed") ) { return hx::Val( pointerPressed ); }
		if (HX_FIELD_EQ(inName,"_flixelPointer") ) { return hx::Val( _flixelPointer ); }
		if (HX_FIELD_EQ(inName,"handleKeyEvent") ) { return hx::Val( handleKeyEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearSelection") ) { return hx::Val( clearSelection_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyJustPressed") ) { return hx::Val( keyJustPressed_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_wasMouseVisible") ) { return hx::Val( _wasMouseVisible ); }
		if (HX_FIELD_EQ(inName,"handleMouseClick") ) { return hx::Val( handleMouseClick_dyn() ); }
		if (HX_FIELD_EQ(inName,"getDebugGraphics") ) { return hx::Val( getDebugGraphics_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"belongsToDebugger") ) { return hx::Val( belongsToDebugger_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pointerJustPressed") ) { return hx::Val( pointerJustPressed ); }
		if (HX_FIELD_EQ(inName,"drawItemsSelection") ) { return hx::Val( drawItemsSelection_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"pointerJustReleased") ) { return hx::Val( pointerJustReleased ); }
		if (HX_FIELD_EQ(inName,"updateCustomCursors") ) { return hx::Val( updateCustomCursors_dyn() ); }
		if (HX_FIELD_EQ(inName,"restoreSystemCursor") ) { return hx::Val( restoreSystemCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"findItemsWithinArea") ) { return hx::Val( findItemsWithinArea_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_debuggerInteraction") ) { return hx::Val( _debuggerInteraction ); }
		if (HX_FIELD_EQ(inName,"registerCustomCursor") ) { return hx::Val( registerCustomCursor_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveSystemCursorInfo") ) { return hx::Val( saveSystemCursorInfo_dyn() ); }
		if (HX_FIELD_EQ(inName,"findItemsWithinState") ) { return hx::Val( findItemsWithinState_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_wasUsingSystemCursor") ) { return hx::Val( _wasUsingSystemCursor ); }
		if (HX_FIELD_EQ(inName,"handleMouseInDebugger") ) { return hx::Val( handleMouseInDebugger_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"countToolsWithUIButton") ) { return hx::Val( countToolsWithUIButton_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"shouldDrawItemsSelection") ) { return hx::Val( shouldDrawItemsSelection ); }
		if (HX_FIELD_EQ(inName,"setToolsCursorVisibility") ) { return hx::Val( setToolsCursorVisibility_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"setSystemCursorVisibility") ) { return hx::Val( setSystemCursorVisibility_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"handleDebuggerVisibilityChanged") ) { return hx::Val( handleDebuggerVisibilityChanged_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Interaction_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_turn") ) { _turn=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_tools") ) { _tools=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_keysUp") ) { _keysUp=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_keysDown") ) { _keysDown=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"activeTool") ) { activeTool=inValue.Cast<  ::flixel::_hx_system::debug::interaction::tools::Tool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_container") ) { _container=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectedItems") ) { selectedItems=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flixelPointer") ) { flixelPointer=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_customCursor") ) { _customCursor=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"pointerPressed") ) { pointerPressed=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flixelPointer") ) { _flixelPointer=inValue.Cast<  ::flixel::input::FlxPointer >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_wasMouseVisible") ) { _wasMouseVisible=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pointerJustPressed") ) { pointerJustPressed=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"pointerJustReleased") ) { pointerJustReleased=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_debuggerInteraction") ) { _debuggerInteraction=inValue.Cast< bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_wasUsingSystemCursor") ) { _wasUsingSystemCursor=inValue.Cast< bool >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"shouldDrawItemsSelection") ) { shouldDrawItemsSelection=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Interaction_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("activeTool",3e,24,2c,f6));
	outFields->push(HX_("selectedItems",a5,87,4e,b8));
	outFields->push(HX_("flixelPointer",c1,e9,8f,fe));
	outFields->push(HX_("pointerJustPressed",19,d4,e3,63));
	outFields->push(HX_("pointerJustReleased",66,cf,4b,0a));
	outFields->push(HX_("pointerPressed",65,7b,0c,9c));
	outFields->push(HX_("shouldDrawItemsSelection",63,c0,6a,5d));
	outFields->push(HX_("_container",02,f1,15,1b));
	outFields->push(HX_("_customCursor",46,78,f4,20));
	outFields->push(HX_("_tools",5c,d9,15,10));
	outFields->push(HX_("_turn",5c,07,17,00));
	outFields->push(HX_("_keysDown",d5,07,2e,5d));
	outFields->push(HX_("_keysUp",0e,a3,71,ae));
	outFields->push(HX_("_wasMouseVisible",17,92,d7,91));
	outFields->push(HX_("_wasUsingSystemCursor",ff,d8,04,e6));
	outFields->push(HX_("_debuggerInteraction",32,64,f1,95));
	outFields->push(HX_("_flixelPointer",02,da,e1,3c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Interaction_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::flixel::_hx_system::debug::interaction::tools::Tool */ ,(int)offsetof(Interaction_obj,activeTool),HX_("activeTool",3e,24,2c,f6)},
	{hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Interaction_obj,selectedItems),HX_("selectedItems",a5,87,4e,b8)},
	{hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(Interaction_obj,flixelPointer),HX_("flixelPointer",c1,e9,8f,fe)},
	{hx::fsBool,(int)offsetof(Interaction_obj,pointerJustPressed),HX_("pointerJustPressed",19,d4,e3,63)},
	{hx::fsBool,(int)offsetof(Interaction_obj,pointerJustReleased),HX_("pointerJustReleased",66,cf,4b,0a)},
	{hx::fsBool,(int)offsetof(Interaction_obj,pointerPressed),HX_("pointerPressed",65,7b,0c,9c)},
	{hx::fsBool,(int)offsetof(Interaction_obj,shouldDrawItemsSelection),HX_("shouldDrawItemsSelection",63,c0,6a,5d)},
	{hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(Interaction_obj,_container),HX_("_container",02,f1,15,1b)},
	{hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(Interaction_obj,_customCursor),HX_("_customCursor",46,78,f4,20)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(Interaction_obj,_tools),HX_("_tools",5c,d9,15,10)},
	{hx::fsInt,(int)offsetof(Interaction_obj,_turn),HX_("_turn",5c,07,17,00)},
	{hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(Interaction_obj,_keysDown),HX_("_keysDown",d5,07,2e,5d)},
	{hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(Interaction_obj,_keysUp),HX_("_keysUp",0e,a3,71,ae)},
	{hx::fsBool,(int)offsetof(Interaction_obj,_wasMouseVisible),HX_("_wasMouseVisible",17,92,d7,91)},
	{hx::fsBool,(int)offsetof(Interaction_obj,_wasUsingSystemCursor),HX_("_wasUsingSystemCursor",ff,d8,04,e6)},
	{hx::fsBool,(int)offsetof(Interaction_obj,_debuggerInteraction),HX_("_debuggerInteraction",32,64,f1,95)},
	{hx::fsObject /*  ::flixel::input::FlxPointer */ ,(int)offsetof(Interaction_obj,_flixelPointer),HX_("_flixelPointer",02,da,e1,3c)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Interaction_obj_sStaticStorageInfo = 0;
#endif

static ::String Interaction_obj_sMemberFields[] = {
	HX_("activeTool",3e,24,2c,f6),
	HX_("selectedItems",a5,87,4e,b8),
	HX_("flixelPointer",c1,e9,8f,fe),
	HX_("pointerJustPressed",19,d4,e3,63),
	HX_("pointerJustReleased",66,cf,4b,0a),
	HX_("pointerPressed",65,7b,0c,9c),
	HX_("shouldDrawItemsSelection",63,c0,6a,5d),
	HX_("_container",02,f1,15,1b),
	HX_("_customCursor",46,78,f4,20),
	HX_("_tools",5c,d9,15,10),
	HX_("_turn",5c,07,17,00),
	HX_("_keysDown",d5,07,2e,5d),
	HX_("_keysUp",0e,a3,71,ae),
	HX_("_wasMouseVisible",17,92,d7,91),
	HX_("_wasUsingSystemCursor",ff,d8,04,e6),
	HX_("_debuggerInteraction",32,64,f1,95),
	HX_("_flixelPointer",02,da,e1,3c),
	HX_("handleDebuggerVisibilityChanged",19,e7,a4,01),
	HX_("updateMouse",5c,7f,fd,f1),
	HX_("handleMouseClick",ab,19,f2,35),
	HX_("belongsToDebugger",b0,1c,03,45),
	HX_("handleMouseInDebugger",e3,24,6b,87),
	HX_("handleKeyEvent",c3,95,05,08),
	HX_("countToolsWithUIButton",58,c0,ff,94),
	HX_("addTool",19,9e,3e,89),
	HX_("destroy",fa,2c,86,24),
	HX_("isActive",50,dd,af,6e),
	HX_("update",09,86,05,87),
	HX_("postDraw",84,8c,af,00),
	HX_("getDebugGraphics",c8,bb,40,9c),
	HX_("drawItemsSelection",50,eb,14,b9),
	HX_("getTool",0e,0b,84,1f),
	HX_("toggleVisible",3e,bb,e1,53),
	HX_("registerCustomCursor",6a,60,89,94),
	HX_("updateCustomCursors",63,cd,29,0a),
	HX_("saveSystemCursorInfo",90,c3,94,03),
	HX_("restoreSystemCursor",93,67,e5,4f),
	HX_("setActiveTool",80,62,a4,97),
	HX_("setSystemCursorVisibility",99,82,1a,f3),
	HX_("setToolsCursorVisibility",81,c1,25,4d),
	HX_("clearSelection",ff,4c,20,4c),
	HX_("keyPressed",c3,72,6e,a8),
	HX_("keyJustPressed",77,d2,b7,cd),
	HX_("isInUse",18,e9,8e,5a),
	HX_("findItemsWithinState",df,1c,87,e2),
	HX_("findItemsWithinArea",7f,38,30,e6),
	::String(null()) };

hx::Class Interaction_obj::__mClass;

void Interaction_obj::__register()
{
	Interaction_obj _hx_dummy;
	Interaction_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("flixel.system.debug.interaction.Interaction",8e,55,b1,5c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Interaction_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Interaction_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Interaction_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Interaction_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace interaction
