// Generated by Haxe 4.0.0-rc.2+77068e10c
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_DebuggerUtil
#include <flixel/system/debug/DebuggerUtil.h>
#endif
#ifndef INCLUDED_flixel_system_debug_GraphicArrowLeft
#include <flixel/system/debug/GraphicArrowLeft.h>
#endif
#ifndef INCLUDED_flixel_system_debug_GraphicArrowRight
#include <flixel/system/debug/GraphicArrowRight.h>
#endif
#ifndef INCLUDED_flixel_system_debug_GraphicBitmapLog
#include <flixel/system/debug/GraphicBitmapLog.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_BitmapLog
#include <flixel/system/debug/log/BitmapLog.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSystemButton
#include <flixel/system/ui/FlxSystemButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_27_new,"flixel.system.debug.log.BitmapLog","new",0x0bf20835,"flixel.system.debug.log.BitmapLog.new","flixel/system/debug/log/BitmapLog.hx",27,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_99_createHeaderUI,"flixel.system.debug.log.BitmapLog","createHeaderUI",0xe86f6e88,"flixel.system.debug.log.BitmapLog.createHeaderUI","flixel/system/debug/log/BitmapLog.hx",99,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_86_createHeaderUI,"flixel.system.debug.log.BitmapLog","createHeaderUI",0xe86f6e88,"flixel.system.debug.log.BitmapLog.createHeaderUI","flixel/system/debug/log/BitmapLog.hx",86,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_117_createFooterUI,"flixel.system.debug.log.BitmapLog","createFooterUI",0xe5498316,"flixel.system.debug.log.BitmapLog.createFooterUI","flixel/system/debug/log/BitmapLog.hx",117,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_130_destroy,"flixel.system.debug.log.BitmapLog","destroy",0x0565734f,"flixel.system.debug.log.BitmapLog.destroy","flixel/system/debug/log/BitmapLog.hx",130,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_152_update,"flixel.system.debug.log.BitmapLog","update",0xf9ae2154,"flixel.system.debug.log.BitmapLog.update","flixel/system/debug/log/BitmapLog.hx",152,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_162_updateSize,"flixel.system.debug.log.BitmapLog","updateSize",0x36a82835,"flixel.system.debug.log.BitmapLog.updateSize","flixel/system/debug/log/BitmapLog.hx",162,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_169_resize,"flixel.system.debug.log.BitmapLog","resize",0x7b23f53f,"flixel.system.debug.log.BitmapLog.resize","flixel/system/debug/log/BitmapLog.hx",169,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_192_resizeTexts,"flixel.system.debug.log.BitmapLog","resizeTexts",0x86a66167,"flixel.system.debug.log.BitmapLog.resizeTexts","flixel/system/debug/log/BitmapLog.hx",192,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_211_next,"flixel.system.debug.log.BitmapLog","next",0x67d5277e,"flixel.system.debug.log.BitmapLog.next","flixel/system/debug/log/BitmapLog.hx",211,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_220_previous,"flixel.system.debug.log.BitmapLog","previous",0x062f0042,"flixel.system.debug.log.BitmapLog.previous","flixel/system/debug/log/BitmapLog.hx",220,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_226_resetSettings,"flixel.system.debug.log.BitmapLog","resetSettings",0xbb149de7,"flixel.system.debug.log.BitmapLog.resetSettings","flixel/system/debug/log/BitmapLog.hx",226,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_235_add,"flixel.system.debug.log.BitmapLog","add",0x0be829f6,"flixel.system.debug.log.BitmapLog.add","flixel/system/debug/log/BitmapLog.hx",235,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_249_clearAt,"flixel.system.debug.log.BitmapLog","clearAt",0x8c242e35,"flixel.system.debug.log.BitmapLog.clearAt","flixel/system/debug/log/BitmapLog.hx",249,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_267_clear,"flixel.system.debug.log.BitmapLog","clear",0x21d708a2,"flixel.system.debug.log.BitmapLog.clear","flixel/system/debug/log/BitmapLog.hx",267,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_282_refreshCanvas,"flixel.system.debug.log.BitmapLog","refreshCanvas",0xb5b52d28,"flixel.system.debug.log.BitmapLog.refreshCanvas","flixel/system/debug/log/BitmapLog.hx",282,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_328_refreshTexts,"flixel.system.debug.log.BitmapLog","refreshTexts",0xaf73ecd6,"flixel.system.debug.log.BitmapLog.refreshTexts","flixel/system/debug/log/BitmapLog.hx",328,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_340_drawBoundingBox,"flixel.system.debug.log.BitmapLog","drawBoundingBox",0xaffc5ab8,"flixel.system.debug.log.BitmapLog.drawBoundingBox","flixel/system/debug/log/BitmapLog.hx",340,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_349_onMouseWheel,"flixel.system.debug.log.BitmapLog","onMouseWheel",0x4e236fc0,"flixel.system.debug.log.BitmapLog.onMouseWheel","flixel/system/debug/log/BitmapLog.hx",349,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_355_onMiddleDown,"flixel.system.debug.log.BitmapLog","onMiddleDown",0xe4b70de1,"flixel.system.debug.log.BitmapLog.onMiddleDown","flixel/system/debug/log/BitmapLog.hx",355,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_362_onMiddleUp,"flixel.system.debug.log.BitmapLog","onMiddleUp",0x4f90ce1a,"flixel.system.debug.log.BitmapLog.onMiddleUp","flixel/system/debug/log/BitmapLog.hx",362,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_366_set_zoom,"flixel.system.debug.log.BitmapLog","set_zoom",0x618efc1b,"flixel.system.debug.log.BitmapLog.set_zoom","flixel/system/debug/log/BitmapLog.hx",366,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_376_get__canvas,"flixel.system.debug.log.BitmapLog","get__canvas",0xe6bd5b63,"flixel.system.debug.log.BitmapLog.get__canvas","flixel/system/debug/log/BitmapLog.hx",376,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_381_get__curEntry,"flixel.system.debug.log.BitmapLog","get__curEntry",0xc066721d,"flixel.system.debug.log.BitmapLog.get__curEntry","flixel/system/debug/log/BitmapLog.hx",381,0x69d60e7d)
HX_LOCAL_STACK_FRAME(_hx_pos_81c1dd4d2eac0533_386_get__curBitmap,"flixel.system.debug.log.BitmapLog","get__curBitmap",0x85268be4,"flixel.system.debug.log.BitmapLog.get__curBitmap","flixel/system/debug/log/BitmapLog.hx",386,0x69d60e7d)
namespace flixel{
namespace _hx_system{
namespace debug{
namespace log{

void BitmapLog_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_27_new)
HXLINE(  47)		this->_middleMouseDown = false;
HXLINE(  40)		this->_matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  39)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  39)		point->_inPool = false;
HXDLIN(  39)		this->_curMouseOffset = point;
HXLINE(  38)		 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  38)		point1->_inPool = false;
HXDLIN(  38)		this->_lastMousePos = point1;
HXLINE(  37)		 ::flixel::math::FlxPoint point2 = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  37)		point2->_inPool = false;
HXDLIN(  37)		this->_point = point2;
HXLINE(  34)		this->_curIndex = 0;
HXLINE(  33)		this->_entries = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  29)		this->zoom = ((Float)1);
HXLINE(  53)		super::__construct(HX_("BitmapLog",b5,3b,ae,68), ::flixel::_hx_system::debug::GraphicBitmapLog_obj::__alloc( HX_CTX ,0,0,null(),null()),null(),null(),null(),null(),null(),null());
HXLINE(  55)		this->minSize->x = ( (Float)(165) );
HXLINE(  56)		this->minSize->y = ( (Float)(31) );
HXLINE(  58)		int _hx_tmp = ::Std_obj::_hx_int(this->get_width());
HXDLIN(  58)		this->_canvasBitmap =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,_hx_tmp,::Std_obj::_hx_int((this->get_height() - ( (Float)(15) ))),true,0),null(),null());
HXLINE(  59)		this->_canvasBitmap->set_x(( (Float)(0) ));
HXLINE(  60)		this->_canvasBitmap->set_y(( (Float)(15) ));
HXLINE(  61)		this->addChild(this->_canvasBitmap);
HXLINE(  63)		this->createHeaderUI();
HXLINE(  64)		this->createFooterUI();
HXLINE(  66)		this->setVisible(false);
HXLINE(  69)		this->addEventListener(HX_("mouseWheel",36,28,87,e7),this->onMouseWheel_dyn(),null(),null(),null());
HXLINE(  71)		this->addEventListener(HX_("middleMouseDown",12,2b,fe,01),this->onMiddleDown_dyn(),null(),null(),null());
HXLINE(  72)		this->addEventListener(HX_("middleMouseUp",0b,8d,f5,3a),this->onMiddleUp_dyn(),null(),null(),null());
HXLINE(  76)		::flixel::FlxG_obj::signals->preStateSwitch->add(this->clear_dyn());
HXLINE(  79)		this->removeChild(this->_handle);
HXLINE(  80)		this->addChild(this->_handle);
HXLINE(  82)		this->removeChild(this->_shadow);
            	}

Dynamic BitmapLog_obj::__CreateEmpty() { return new BitmapLog_obj; }

void *BitmapLog_obj::_hx_vtable = 0;

Dynamic BitmapLog_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapLog_obj > _hx_result = new BitmapLog_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BitmapLog_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x2b67f1b5 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x619ca9b8;
		}
	}
}

void BitmapLog_obj::createHeaderUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::flixel::_hx_system::debug::log::BitmapLog,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_99_createHeaderUI)
HXLINE( 100)			{
HXLINE( 100)				_gthis->set_zoom(( (Float)(1) ));
HXDLIN( 100)				_gthis->_curMouseOffset->set(null(),null());
            			}
HXLINE( 101)			_gthis->refreshCanvas(null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_86_createHeaderUI)
HXLINE(  85)		 ::flixel::_hx_system::debug::log::BitmapLog _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  87)		this->_ui =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE(  88)		this->_ui->set_y(( (Float)(2) ));
HXLINE(  90)		this->_buttonLeft =  ::flixel::_hx_system::ui::FlxSystemButton_obj::__alloc( HX_CTX , ::flixel::_hx_system::debug::GraphicArrowLeft_obj::__alloc( HX_CTX ,0,0,null(),null()),this->previous_dyn(),null());
HXLINE(  92)		this->_dimensionsText = ::flixel::_hx_system::debug::DebuggerUtil_obj::createTextField(null(),null(),null(),null());
HXLINE(  94)		this->_counterText = ::flixel::_hx_system::debug::DebuggerUtil_obj::createTextField(0,-3,null(),null());
HXLINE(  95)		this->_counterText->set_text(HX_("0/0",51,95,24,00));
HXLINE(  98)		this->_buttonText =  ::flixel::_hx_system::ui::FlxSystemButton_obj::__alloc( HX_CTX ,null(), ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 103)		this->_buttonText->addChild(this->_counterText);
HXLINE( 105)		this->_buttonRight =  ::flixel::_hx_system::ui::FlxSystemButton_obj::__alloc( HX_CTX , ::flixel::_hx_system::debug::GraphicArrowRight_obj::__alloc( HX_CTX ,0,0,null(),null()),this->next_dyn(),null());
HXLINE( 106)		this->_buttonRight->set_x(( (Float)(60) ));
HXLINE( 108)		this->_ui->addChild(this->_buttonLeft);
HXLINE( 109)		this->_ui->addChild(this->_buttonText);
HXLINE( 110)		this->_ui->addChild(this->_buttonRight);
HXLINE( 112)		this->addChild(this->_ui);
HXLINE( 113)		this->addChild(this->_dimensionsText);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapLog_obj,createHeaderUI,(void))

void BitmapLog_obj::createFooterUI(){
            	HX_GC_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_117_createFooterUI)
HXLINE( 118)		this->_footer =  ::openfl::display::Bitmap_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,1,15,true,(int)-1157627904),null(),null());
HXLINE( 119)		this->_footer->set_alpha(((Float)0.8));
HXLINE( 120)		this->addChild(this->_footer);
HXLINE( 122)		this->_footerText = ::flixel::_hx_system::debug::DebuggerUtil_obj::createTextField(null(),null(),null(),null());
HXLINE( 123)		this->addChild(this->_footerText);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapLog_obj,createFooterUI,(void))

void BitmapLog_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_130_destroy)
HXLINE( 131)		this->super::destroy();
HXLINE( 133)		this->clear();
HXLINE( 135)		this->removeChild(this->_canvasBitmap);
HXLINE( 136)		::flixel::util::FlxDestroyUtil_obj::dispose(this->_canvasBitmap->get_bitmapData());
HXLINE( 137)		this->_canvasBitmap->set_bitmapData(null());
HXLINE( 138)		this->_canvasBitmap = null();
HXLINE( 139)		this->_entries = null();
HXLINE( 141)		this->removeEventListener(HX_("mouseWheel",36,28,87,e7),this->onMouseWheel_dyn(),null());
HXLINE( 143)		this->removeEventListener(HX_("middleMouseDown",12,2b,fe,01),this->onMiddleDown_dyn(),null());
HXLINE( 144)		this->removeEventListener(HX_("middleMouseUp",0b,8d,f5,3a),this->onMiddleUp_dyn(),null());
HXLINE( 147)		::flixel::FlxG_obj::signals->preStateSwitch->remove(this->clear_dyn());
            	}


void BitmapLog_obj::update(){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_152_update)
HXDLIN( 152)		if (this->_middleMouseDown) {
HXLINE( 154)			Float X = this->get_mouseX();
HXDLIN( 154)			Float Y = this->get_mouseY();
HXDLIN( 154)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 154)			point->_inPool = false;
HXDLIN( 154)			 ::flixel::math::FlxPoint delta = point;
HXLINE( 155)			 ::flixel::math::FlxPoint _hx_tmp = this->_curMouseOffset;
HXDLIN( 155)			_hx_tmp->addPoint(delta->subtractPoint(this->_lastMousePos));
HXLINE( 156)			this->refreshCanvas(null());
HXLINE( 157)			 ::flixel::math::FlxPoint _hx_tmp1 = this->_lastMousePos;
HXDLIN( 157)			Float _hx_tmp2 = this->get_mouseX();
HXDLIN( 157)			_hx_tmp1->set(_hx_tmp2,this->get_mouseY());
            		}
            	}


void BitmapLog_obj::updateSize(){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_162_updateSize)
HXLINE( 163)		this->super::updateSize();
HXLINE( 165)		 ::openfl::display::Bitmap _hx_tmp = this->_background;
HXDLIN( 165)		int _hx_tmp1 = this->_height;
HXDLIN( 165)		_hx_tmp->set_scaleY((( (Float)(_hx_tmp1) ) - (this->_header->get_height() * ( (Float)(2) ))));
            	}


void BitmapLog_obj::resize(Float Width,Float Height){
            	HX_GC_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_169_resize)
HXLINE( 170)		this->super::resize(Width,Height);
HXLINE( 172)		 ::openfl::display::Bitmap _hx_tmp = this->_canvasBitmap;
HXDLIN( 172)		_hx_tmp->set_bitmapData(::flixel::util::FlxDestroyUtil_obj::dispose(this->_canvasBitmap->get_bitmapData()));
HXLINE( 174)		int newWidth = this->_width;
HXDLIN( 174)		int newWidth1 = ::Std_obj::_hx_int((( (Float)(newWidth) ) - this->_canvasBitmap->get_x()));
HXLINE( 175)		int newHeight = this->_height;
HXDLIN( 175)		Float newHeight1 = (( (Float)(newHeight) ) - this->_canvasBitmap->get_y());
HXDLIN( 175)		int newHeight2 = ::Std_obj::_hx_int((newHeight1 - this->_footer->get_height()));
HXLINE( 177)		bool _hx_tmp1;
HXDLIN( 177)		if ((newWidth1 > 0)) {
HXLINE( 177)			_hx_tmp1 = (newHeight2 > 0);
            		}
            		else {
HXLINE( 177)			_hx_tmp1 = false;
            		}
HXDLIN( 177)		if (_hx_tmp1) {
HXLINE( 179)			 ::openfl::display::Bitmap _hx_tmp2 = this->_canvasBitmap;
HXDLIN( 179)			_hx_tmp2->set_bitmapData( ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,newWidth1,newHeight2,true,0));
HXLINE( 180)			this->refreshCanvas(this->_curIndex);
            		}
HXLINE( 183)		 ::openfl::display::Sprite _hx_tmp3 = this->_ui;
HXDLIN( 183)		Float _hx_tmp4 = this->_header->get_width();
HXDLIN( 183)		_hx_tmp3->set_x(((_hx_tmp4 - this->_ui->get_width()) - ( (Float)(5) )));
HXLINE( 185)		this->_footer->set_width(( (Float)(this->_width) ));
HXLINE( 186)		 ::openfl::display::Bitmap _hx_tmp5 = this->_footer;
HXDLIN( 186)		int _hx_tmp6 = this->_height;
HXDLIN( 186)		_hx_tmp5->set_y((( (Float)(_hx_tmp6) ) - this->_footer->get_height()));
HXLINE( 188)		this->resizeTexts();
            	}


void BitmapLog_obj::resizeTexts(){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_192_resizeTexts)
HXLINE( 193)		 ::openfl::text::TextField _hx_tmp = this->_dimensionsText;
HXDLIN( 193)		Float _hx_tmp1 = (this->_header->get_width() / ( (Float)(2) ));
HXDLIN( 193)		_hx_tmp->set_x((_hx_tmp1 - (this->_dimensionsText->get_textWidth() / ( (Float)(2) ))));
HXLINE( 194)		this->_dimensionsText->set_visible((this->_width > 200));
HXLINE( 196)		 ::openfl::text::TextField _hx_tmp2 = this->_footerText;
HXDLIN( 196)		int _hx_tmp3 = this->_height;
HXDLIN( 196)		_hx_tmp2->set_y((( (Float)(_hx_tmp3) ) - this->_footer->get_height()));
HXLINE( 197)		 ::openfl::text::TextField _hx_tmp4 = this->_footerText;
HXDLIN( 197)		Float _hx_tmp5 = (( (Float)(this->_width) ) / ( (Float)(2) ));
HXDLIN( 197)		_hx_tmp4->set_x((_hx_tmp5 - (this->_footerText->get_textWidth() / ( (Float)(2) ))));
HXLINE( 198)		 ::openfl::text::TextField _hx_tmp6 = this->_footerText;
HXDLIN( 198)		_hx_tmp6->set_width(this->_footer->get_width());
HXLINE( 199)		if ((this->_footerText->get_x() < 0)) {
HXLINE( 201)			this->_footerText->set_x(( (Float)(0) ));
            		}
HXLINE( 204)		 ::flixel::_hx_system::ui::FlxSystemButton _hx_tmp7 = this->_buttonText;
HXDLIN( 204)		_hx_tmp7->set_x((( (Float)(33) ) - (this->_counterText->get_textWidth() / ( (Float)(2) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapLog_obj,resizeTexts,(void))

void BitmapLog_obj::next(){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_211_next)
HXLINE( 212)		{
HXLINE( 212)			this->set_zoom(( (Float)(1) ));
HXDLIN( 212)			this->_curMouseOffset->set(null(),null());
            		}
HXLINE( 213)		this->refreshCanvas((this->_curIndex + 1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapLog_obj,next,(void))

void BitmapLog_obj::previous(){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_220_previous)
HXLINE( 221)		{
HXLINE( 221)			this->set_zoom(( (Float)(1) ));
HXDLIN( 221)			this->_curMouseOffset->set(null(),null());
            		}
HXLINE( 222)		this->refreshCanvas((this->_curIndex - 1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapLog_obj,previous,(void))

void BitmapLog_obj::resetSettings(){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_226_resetSettings)
HXLINE( 227)		this->set_zoom(( (Float)(1) ));
HXLINE( 228)		this->_curMouseOffset->set(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapLog_obj,resetSettings,(void))

bool BitmapLog_obj::add( ::openfl::display::BitmapData bmp,::String __o_name){
            		::String name = __o_name;
            		if (hx::IsNull(__o_name)) name = HX_("",00,00,00,00);
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_235_add)
HXLINE( 236)		if (hx::IsNull( bmp )) {
HXLINE( 238)			return false;
            		}
HXLINE( 240)		this->setVisible(true);
HXLINE( 241)		::Array< ::Dynamic> _hx_tmp = this->_entries;
HXDLIN( 241)		_hx_tmp->push( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("bitmap",ef,0f,0c,f1),bmp->clone())
            			->setFixed(1,HX_("name",4b,72,ff,48),name)));
HXLINE( 242)		return this->refreshCanvas(null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapLog_obj,add,return )

void BitmapLog_obj::clearAt(hx::Null< int >  __o_Index){
            		int Index = __o_Index.Default(-1);
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_249_clearAt)
HXLINE( 250)		if ((Index == -1)) {
HXLINE( 252)			Index = (this->_entries->length - 1);
            		}
HXLINE( 254)		::flixel::util::FlxDestroyUtil_obj::dispose(( ( ::openfl::display::BitmapData)(this->_entries->__get(Index)->__Field(HX_("bitmap",ef,0f,0c,f1),hx::paccDynamic)) ));
HXLINE( 255)		this->_entries[Index] = null();
HXLINE( 256)		this->_entries->removeRange(Index,1);
HXLINE( 258)		if ((this->_curIndex > (this->_entries->length - 1))) {
HXLINE( 260)			this->_curIndex = (this->_entries->length - 1);
            		}
HXLINE( 263)		this->refreshCanvas(this->_curIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapLog_obj,clearAt,(void))

void BitmapLog_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_267_clear)
HXLINE( 268)		{
HXLINE( 268)			int _g = 0;
HXDLIN( 268)			int _g1 = this->_entries->length;
HXDLIN( 268)			while((_g < _g1)){
HXLINE( 268)				_g = (_g + 1);
HXDLIN( 268)				int i = (_g - 1);
HXLINE( 270)				::flixel::util::FlxDestroyUtil_obj::dispose(( ( ::openfl::display::BitmapData)(this->_entries->__get(i)->__Field(HX_("bitmap",ef,0f,0c,f1),hx::paccDynamic)) ));
HXLINE( 271)				this->_entries[i] = null();
            			}
            		}
HXLINE( 273)		this->_entries = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 274)		if (hx::IsNotNull( this->_canvasBitmap->get_bitmapData() )) {
HXLINE( 275)			 ::openfl::display::BitmapData _hx_tmp = this->_canvasBitmap->get_bitmapData();
HXDLIN( 275)			_hx_tmp->fillRect(this->_canvasBitmap->get_bitmapData()->rect,0);
            		}
HXLINE( 276)		this->_dimensionsText->set_text(HX_("",00,00,00,00));
HXLINE( 277)		this->_counterText->set_text(HX_("0/0",51,95,24,00));
HXLINE( 278)		this->_footerText->set_text(HX_("",00,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapLog_obj,clear,(void))

bool BitmapLog_obj::refreshCanvas( ::Dynamic Index){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_282_refreshCanvas)
HXLINE( 283)		bool _hx_tmp;
HXDLIN( 283)		if (hx::IsNotNull( this->_entries )) {
HXLINE( 283)			_hx_tmp = (this->_entries->length <= 0);
            		}
            		else {
HXLINE( 283)			_hx_tmp = true;
            		}
HXDLIN( 283)		if (_hx_tmp) {
HXLINE( 285)			this->_curIndex = 0;
HXLINE( 286)			return false;
            		}
HXLINE( 289)		if (hx::IsNull( Index )) {
HXLINE( 291)			Index = this->_curIndex;
            		}
HXLINE( 294)		 ::openfl::display::BitmapData _hx_tmp1 = this->_canvasBitmap->get_bitmapData();
HXDLIN( 294)		_hx_tmp1->fillRect(this->_canvasBitmap->get_bitmapData()->rect,0);
HXLINE( 296)		if (hx::IsLess( Index,0 )) {
HXLINE( 298)			Index = (this->_entries->length - 1);
            		}
            		else {
HXLINE( 300)			if (hx::IsGreaterEq( Index,this->_entries->length )) {
HXLINE( 302)				Index = 0;
            			}
            		}
HXLINE( 305)		this->_curIndex = ( (int)(Index) );
HXLINE( 308)		 ::flixel::math::FlxPoint _hx_tmp2 = this->_point;
HXDLIN( 308)		Float _hx_tmp3 = (( (Float)(this->_canvasBitmap->get_bitmapData()->width) ) / ( (Float)(2) ));
HXDLIN( 308)		_hx_tmp2->set_x((_hx_tmp3 - ((( (Float)(( ( ::openfl::display::BitmapData)(this->_entries->__get(this->_curIndex)->__Field(HX_("bitmap",ef,0f,0c,f1),hx::paccDynamic)) )->width) ) * this->zoom) / ( (Float)(2) ))));
HXLINE( 309)		 ::flixel::math::FlxPoint _hx_tmp4 = this->_point;
HXDLIN( 309)		Float _hx_tmp5 = (( (Float)(this->_canvasBitmap->get_bitmapData()->height) ) / ( (Float)(2) ));
HXDLIN( 309)		_hx_tmp4->set_y((_hx_tmp5 - ((( (Float)(( ( ::openfl::display::BitmapData)(this->_entries->__get(this->_curIndex)->__Field(HX_("bitmap",ef,0f,0c,f1),hx::paccDynamic)) )->height) ) * this->zoom) / ( (Float)(2) ))));
HXLINE( 311)		this->_point->addPoint(this->_curMouseOffset);
HXLINE( 313)		this->_matrix->identity();
HXLINE( 314)		this->_matrix->scale(this->zoom,this->zoom);
HXLINE( 315)		this->_matrix->translate(this->_point->x,this->_point->y);
HXLINE( 317)		 ::openfl::display::BitmapData _hx_tmp6 = this->_canvasBitmap->get_bitmapData();
HXDLIN( 317)		 ::openfl::display::BitmapData _hx_tmp7 = ( ( ::openfl::display::BitmapData)(this->_entries->__get(this->_curIndex)->__Field(HX_("bitmap",ef,0f,0c,f1),hx::paccDynamic)) );
HXDLIN( 317)		 ::openfl::geom::Matrix _hx_tmp8 = this->_matrix;
HXDLIN( 317)		_hx_tmp6->draw(_hx_tmp7,_hx_tmp8,null(),null(),this->_canvasBitmap->get_bitmapData()->rect,false);
HXLINE( 319)		this->drawBoundingBox(( ( ::openfl::display::BitmapData)(this->_entries->__get(this->_curIndex)->__Field(HX_("bitmap",ef,0f,0c,f1),hx::paccDynamic)) ));
HXLINE( 320)		 ::openfl::display::BitmapData _hx_tmp9 = this->_canvasBitmap->get_bitmapData();
HXDLIN( 320)		 ::openfl::display::Sprite _hx_tmp10 = ::flixel::util::FlxSpriteUtil_obj::flashGfxSprite;
HXDLIN( 320)		 ::openfl::geom::Matrix _hx_tmp11 = this->_matrix;
HXDLIN( 320)		_hx_tmp9->draw(_hx_tmp10,_hx_tmp11,null(),null(),this->_canvasBitmap->get_bitmapData()->rect,false);
HXLINE( 322)		this->refreshTexts();
HXLINE( 324)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapLog_obj,refreshCanvas,return )

void BitmapLog_obj::refreshTexts(){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_328_refreshTexts)
HXLINE( 329)		this->_dimensionsText->set_text(((( ( ::openfl::display::BitmapData)(this->_entries->__get(this->_curIndex)->__Field(HX_("bitmap",ef,0f,0c,f1),hx::paccDynamic)) )->width + HX_("x",78,00,00,00)) + ( ( ::openfl::display::BitmapData)(this->_entries->__get(this->_curIndex)->__Field(HX_("bitmap",ef,0f,0c,f1),hx::paccDynamic)) )->height));
HXLINE( 330)		this->_counterText->set_text((((HX_("",00,00,00,00) + (this->_curIndex + 1)) + HX_("/",2f,00,00,00)) + this->_entries->length));
HXLINE( 332)		::String entryName = ( (::String)(this->_entries->__get(this->_curIndex)->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)) );
HXLINE( 333)		::String name;
HXDLIN( 333)		if ((entryName == HX_("",00,00,00,00))) {
HXLINE( 333)			name = HX_("",00,00,00,00);
            		}
            		else {
HXLINE( 333)			name = ((HX_("\"",22,00,00,00) + entryName) + HX_("\" | ",62,f5,91,16));
            		}
HXLINE( 334)		 ::openfl::text::TextField _hx_tmp = this->_footerText;
HXDLIN( 334)		 ::openfl::display::BitmapData bitmapData = ( ( ::openfl::display::BitmapData)(this->_entries->__get(this->_curIndex)->__Field(HX_("bitmap",ef,0f,0c,f1),hx::paccDynamic)) );
HXDLIN( 334)		_hx_tmp->set_text((name + ::flixel::util::FlxStringUtil_obj::formatBytes(( (Float)(((bitmapData->width * bitmapData->height) * 4)) ),null())));
HXLINE( 336)		this->resizeTexts();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapLog_obj,refreshTexts,(void))

void BitmapLog_obj::drawBoundingBox( ::openfl::display::BitmapData bitmap){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_340_drawBoundingBox)
HXLINE( 341)		 ::openfl::display::Graphics gfx = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXLINE( 342)		gfx->clear();
HXLINE( 343)		gfx->lineStyle(1,-65536,((Float)0.75),false,1,null(),null(),null());
HXLINE( 344)		Float offset = (( (Float)(1) ) / this->zoom);
HXLINE( 345)		gfx->drawRect(-(offset),-(offset),(bitmap->width + offset),(bitmap->height + offset));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapLog_obj,drawBoundingBox,(void))

void BitmapLog_obj::onMouseWheel( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_349_onMouseWheel)
HXLINE( 350)		{
HXLINE( 350)			 ::flixel::_hx_system::debug::log::BitmapLog _g = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 350)			int _hx_tmp;
HXDLIN( 350)			if ((e->delta < 0)) {
HXLINE( 350)				_hx_tmp = -1;
            			}
            			else {
HXLINE( 350)				_hx_tmp = 1;
            			}
HXDLIN( 350)			_g->set_zoom((_g->zoom + ((( (Float)(_hx_tmp) ) * ((Float)0.25)) * this->zoom)));
            		}
HXLINE( 351)		this->refreshCanvas(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapLog_obj,onMouseWheel,(void))

void BitmapLog_obj::onMiddleDown( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_355_onMiddleDown)
HXLINE( 356)		this->_middleMouseDown = true;
HXLINE( 357)		 ::flixel::math::FlxPoint _hx_tmp = this->_lastMousePos;
HXDLIN( 357)		Float _hx_tmp1 = this->get_mouseX();
HXDLIN( 357)		_hx_tmp->set(_hx_tmp1,this->get_mouseY());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapLog_obj,onMiddleDown,(void))

void BitmapLog_obj::onMiddleUp( ::openfl::events::MouseEvent e){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_362_onMiddleUp)
HXDLIN( 362)		this->_middleMouseDown = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapLog_obj,onMiddleUp,(void))

Float BitmapLog_obj::set_zoom(Float Value){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_366_set_zoom)
HXLINE( 367)		if ((Value < 0)) {
HXLINE( 369)			Value = ( (Float)(0) );
            		}
HXLINE( 371)		return (this->zoom = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapLog_obj,set_zoom,return )

 ::openfl::display::BitmapData BitmapLog_obj::get__canvas(){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_376_get__canvas)
HXDLIN( 376)		return this->_canvasBitmap->get_bitmapData();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapLog_obj,get__canvas,return )

 ::Dynamic BitmapLog_obj::get__curEntry(){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_381_get__curEntry)
HXDLIN( 381)		return this->_entries->__get(this->_curIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapLog_obj,get__curEntry,return )

 ::openfl::display::BitmapData BitmapLog_obj::get__curBitmap(){
            	HX_STACKFRAME(&_hx_pos_81c1dd4d2eac0533_386_get__curBitmap)
HXDLIN( 386)		return ( ( ::openfl::display::BitmapData)(this->_entries->__get(this->_curIndex)->__Field(HX_("bitmap",ef,0f,0c,f1),hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapLog_obj,get__curBitmap,return )


hx::ObjectPtr< BitmapLog_obj > BitmapLog_obj::__new() {
	hx::ObjectPtr< BitmapLog_obj > __this = new BitmapLog_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< BitmapLog_obj > BitmapLog_obj::__alloc(hx::Ctx *_hx_ctx) {
	BitmapLog_obj *__this = (BitmapLog_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(BitmapLog_obj), true, "flixel.system.debug.log.BitmapLog"));
	*(void **)__this = BitmapLog_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BitmapLog_obj::BitmapLog_obj()
{
}

void BitmapLog_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapLog);
	HX_MARK_MEMBER_NAME(zoom,"zoom");
	HX_MARK_MEMBER_NAME(_canvasBitmap,"_canvasBitmap");
	HX_MARK_MEMBER_NAME(_entries,"_entries");
	HX_MARK_MEMBER_NAME(_curIndex,"_curIndex");
	HX_MARK_MEMBER_NAME(_point,"_point");
	HX_MARK_MEMBER_NAME(_lastMousePos,"_lastMousePos");
	HX_MARK_MEMBER_NAME(_curMouseOffset,"_curMouseOffset");
	HX_MARK_MEMBER_NAME(_matrix,"_matrix");
	HX_MARK_MEMBER_NAME(_buttonLeft,"_buttonLeft");
	HX_MARK_MEMBER_NAME(_buttonText,"_buttonText");
	HX_MARK_MEMBER_NAME(_buttonRight,"_buttonRight");
	HX_MARK_MEMBER_NAME(_counterText,"_counterText");
	HX_MARK_MEMBER_NAME(_dimensionsText,"_dimensionsText");
	HX_MARK_MEMBER_NAME(_ui,"_ui");
	HX_MARK_MEMBER_NAME(_middleMouseDown,"_middleMouseDown");
	HX_MARK_MEMBER_NAME(_footer,"_footer");
	HX_MARK_MEMBER_NAME(_footerText,"_footerText");
	 ::flixel::_hx_system::debug::Window_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BitmapLog_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(zoom,"zoom");
	HX_VISIT_MEMBER_NAME(_canvasBitmap,"_canvasBitmap");
	HX_VISIT_MEMBER_NAME(_entries,"_entries");
	HX_VISIT_MEMBER_NAME(_curIndex,"_curIndex");
	HX_VISIT_MEMBER_NAME(_point,"_point");
	HX_VISIT_MEMBER_NAME(_lastMousePos,"_lastMousePos");
	HX_VISIT_MEMBER_NAME(_curMouseOffset,"_curMouseOffset");
	HX_VISIT_MEMBER_NAME(_matrix,"_matrix");
	HX_VISIT_MEMBER_NAME(_buttonLeft,"_buttonLeft");
	HX_VISIT_MEMBER_NAME(_buttonText,"_buttonText");
	HX_VISIT_MEMBER_NAME(_buttonRight,"_buttonRight");
	HX_VISIT_MEMBER_NAME(_counterText,"_counterText");
	HX_VISIT_MEMBER_NAME(_dimensionsText,"_dimensionsText");
	HX_VISIT_MEMBER_NAME(_ui,"_ui");
	HX_VISIT_MEMBER_NAME(_middleMouseDown,"_middleMouseDown");
	HX_VISIT_MEMBER_NAME(_footer,"_footer");
	HX_VISIT_MEMBER_NAME(_footerText,"_footerText");
	 ::flixel::_hx_system::debug::Window_obj::__Visit(HX_VISIT_ARG);
}

hx::Val BitmapLog_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_ui") ) { return hx::Val( _ui ); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { return hx::Val( zoom ); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_point") ) { return hx::Val( _point ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_canvas") ) { if (inCallProp == hx::paccAlways) return hx::Val( get__canvas() ); }
		if (HX_FIELD_EQ(inName,"_matrix") ) { return hx::Val( _matrix ); }
		if (HX_FIELD_EQ(inName,"_footer") ) { return hx::Val( _footer ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearAt") ) { return hx::Val( clearAt_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_entries") ) { return hx::Val( _entries ); }
		if (HX_FIELD_EQ(inName,"previous") ) { return hx::Val( previous_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_zoom") ) { return hx::Val( set_zoom_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_curIndex") ) { return hx::Val( _curIndex ); }
		if (HX_FIELD_EQ(inName,"_curEntry") ) { if (inCallProp == hx::paccAlways) return hx::Val( get__curEntry() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_curBitmap") ) { if (inCallProp == hx::paccAlways) return hx::Val( get__curBitmap() ); }
		if (HX_FIELD_EQ(inName,"updateSize") ) { return hx::Val( updateSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMiddleUp") ) { return hx::Val( onMiddleUp_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_buttonLeft") ) { return hx::Val( _buttonLeft ); }
		if (HX_FIELD_EQ(inName,"_buttonText") ) { return hx::Val( _buttonText ); }
		if (HX_FIELD_EQ(inName,"_footerText") ) { return hx::Val( _footerText ); }
		if (HX_FIELD_EQ(inName,"resizeTexts") ) { return hx::Val( resizeTexts_dyn() ); }
		if (HX_FIELD_EQ(inName,"get__canvas") ) { return hx::Val( get__canvas_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_buttonRight") ) { return hx::Val( _buttonRight ); }
		if (HX_FIELD_EQ(inName,"_counterText") ) { return hx::Val( _counterText ); }
		if (HX_FIELD_EQ(inName,"refreshTexts") ) { return hx::Val( refreshTexts_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMouseWheel") ) { return hx::Val( onMouseWheel_dyn() ); }
		if (HX_FIELD_EQ(inName,"onMiddleDown") ) { return hx::Val( onMiddleDown_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_canvasBitmap") ) { return hx::Val( _canvasBitmap ); }
		if (HX_FIELD_EQ(inName,"_lastMousePos") ) { return hx::Val( _lastMousePos ); }
		if (HX_FIELD_EQ(inName,"resetSettings") ) { return hx::Val( resetSettings_dyn() ); }
		if (HX_FIELD_EQ(inName,"refreshCanvas") ) { return hx::Val( refreshCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"get__curEntry") ) { return hx::Val( get__curEntry_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"createHeaderUI") ) { return hx::Val( createHeaderUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"createFooterUI") ) { return hx::Val( createFooterUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"get__curBitmap") ) { return hx::Val( get__curBitmap_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_curMouseOffset") ) { return hx::Val( _curMouseOffset ); }
		if (HX_FIELD_EQ(inName,"_dimensionsText") ) { return hx::Val( _dimensionsText ); }
		if (HX_FIELD_EQ(inName,"drawBoundingBox") ) { return hx::Val( drawBoundingBox_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_middleMouseDown") ) { return hx::Val( _middleMouseDown ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BitmapLog_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_ui") ) { _ui=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_zoom(inValue.Cast< Float >()) );zoom=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_point") ) { _point=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_matrix") ) { _matrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_footer") ) { _footer=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_entries") ) { _entries=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_curIndex") ) { _curIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_buttonLeft") ) { _buttonLeft=inValue.Cast<  ::flixel::_hx_system::ui::FlxSystemButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_buttonText") ) { _buttonText=inValue.Cast<  ::flixel::_hx_system::ui::FlxSystemButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_footerText") ) { _footerText=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_buttonRight") ) { _buttonRight=inValue.Cast<  ::flixel::_hx_system::ui::FlxSystemButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_counterText") ) { _counterText=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_canvasBitmap") ) { _canvasBitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lastMousePos") ) { _lastMousePos=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_curMouseOffset") ) { _curMouseOffset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_dimensionsText") ) { _dimensionsText=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_middleMouseDown") ) { _middleMouseDown=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BitmapLog_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("zoom",13,a3,f8,50));
	outFields->push(HX_("_canvas",77,66,b9,26));
	outFields->push(HX_("_canvasBitmap",c6,9d,e4,7e));
	outFields->push(HX_("_entries",d1,86,17,b3));
	outFields->push(HX_("_curIndex",d1,8c,58,4d));
	outFields->push(HX_("_curEntry",31,6a,ca,ff));
	outFields->push(HX_("_curBitmap",50,a5,3b,bd));
	outFields->push(HX_("_point",91,fb,76,c2));
	outFields->push(HX_("_lastMousePos",c4,43,1f,e8));
	outFields->push(HX_("_curMouseOffset",97,16,9a,f4));
	outFields->push(HX_("_matrix",e0,47,3f,2a));
	outFields->push(HX_("_buttonLeft",38,44,30,84));
	outFields->push(HX_("_buttonText",de,08,7a,89));
	outFields->push(HX_("_buttonRight",8b,7a,18,9d));
	outFields->push(HX_("_counterText",ca,83,9f,ad));
	outFields->push(HX_("_dimensionsText",39,aa,64,11));
	outFields->push(HX_("_ui",73,7c,48,00));
	outFields->push(HX_("_middleMouseDown",93,6d,dd,ec));
	outFields->push(HX_("_footer",3a,50,0f,6a));
	outFields->push(HX_("_footerText",07,ee,07,c9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapLog_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(BitmapLog_obj,zoom),HX_("zoom",13,a3,f8,50)},
	{hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(BitmapLog_obj,_canvasBitmap),HX_("_canvasBitmap",c6,9d,e4,7e)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(BitmapLog_obj,_entries),HX_("_entries",d1,86,17,b3)},
	{hx::fsInt,(int)offsetof(BitmapLog_obj,_curIndex),HX_("_curIndex",d1,8c,58,4d)},
	{hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(BitmapLog_obj,_point),HX_("_point",91,fb,76,c2)},
	{hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(BitmapLog_obj,_lastMousePos),HX_("_lastMousePos",c4,43,1f,e8)},
	{hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(BitmapLog_obj,_curMouseOffset),HX_("_curMouseOffset",97,16,9a,f4)},
	{hx::fsObject /*  ::openfl::geom::Matrix */ ,(int)offsetof(BitmapLog_obj,_matrix),HX_("_matrix",e0,47,3f,2a)},
	{hx::fsObject /*  ::flixel::_hx_system::ui::FlxSystemButton */ ,(int)offsetof(BitmapLog_obj,_buttonLeft),HX_("_buttonLeft",38,44,30,84)},
	{hx::fsObject /*  ::flixel::_hx_system::ui::FlxSystemButton */ ,(int)offsetof(BitmapLog_obj,_buttonText),HX_("_buttonText",de,08,7a,89)},
	{hx::fsObject /*  ::flixel::_hx_system::ui::FlxSystemButton */ ,(int)offsetof(BitmapLog_obj,_buttonRight),HX_("_buttonRight",8b,7a,18,9d)},
	{hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(BitmapLog_obj,_counterText),HX_("_counterText",ca,83,9f,ad)},
	{hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(BitmapLog_obj,_dimensionsText),HX_("_dimensionsText",39,aa,64,11)},
	{hx::fsObject /*  ::openfl::display::Sprite */ ,(int)offsetof(BitmapLog_obj,_ui),HX_("_ui",73,7c,48,00)},
	{hx::fsBool,(int)offsetof(BitmapLog_obj,_middleMouseDown),HX_("_middleMouseDown",93,6d,dd,ec)},
	{hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(BitmapLog_obj,_footer),HX_("_footer",3a,50,0f,6a)},
	{hx::fsObject /*  ::openfl::text::TextField */ ,(int)offsetof(BitmapLog_obj,_footerText),HX_("_footerText",07,ee,07,c9)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BitmapLog_obj_sStaticStorageInfo = 0;
#endif

static ::String BitmapLog_obj_sMemberFields[] = {
	HX_("zoom",13,a3,f8,50),
	HX_("_canvasBitmap",c6,9d,e4,7e),
	HX_("_entries",d1,86,17,b3),
	HX_("_curIndex",d1,8c,58,4d),
	HX_("_point",91,fb,76,c2),
	HX_("_lastMousePos",c4,43,1f,e8),
	HX_("_curMouseOffset",97,16,9a,f4),
	HX_("_matrix",e0,47,3f,2a),
	HX_("_buttonLeft",38,44,30,84),
	HX_("_buttonText",de,08,7a,89),
	HX_("_buttonRight",8b,7a,18,9d),
	HX_("_counterText",ca,83,9f,ad),
	HX_("_dimensionsText",39,aa,64,11),
	HX_("_ui",73,7c,48,00),
	HX_("_middleMouseDown",93,6d,dd,ec),
	HX_("_footer",3a,50,0f,6a),
	HX_("_footerText",07,ee,07,c9),
	HX_("createHeaderUI",3d,10,7a,96),
	HX_("createFooterUI",cb,24,54,93),
	HX_("destroy",fa,2c,86,24),
	HX_("update",09,86,05,87),
	HX_("updateSize",6a,8b,08,05),
	HX_("resize",f4,59,7b,08),
	HX_("resizeTexts",92,cc,9c,4c),
	HX_("next",f3,84,02,49),
	HX_("previous",37,bc,b0,23),
	HX_("resetSettings",d2,69,dc,bb),
	HX_("add",21,f2,49,00),
	HX_("clearAt",e0,e7,44,ab),
	HX_("clear",8d,71,5b,48),
	HX_("refreshCanvas",13,f9,7c,b6),
	HX_("refreshTexts",4b,47,1b,21),
	HX_("drawBoundingBox",63,37,3f,4b),
	HX_("onMouseWheel",35,ca,ca,bf),
	HX_("onMiddleDown",56,68,5e,56),
	HX_("onMiddleUp",4f,31,f1,1d),
	HX_("set_zoom",10,b8,10,7f),
	HX_("get__canvas",8e,c6,b3,ac),
	HX_("get__curEntry",08,3e,2e,c1),
	HX_("get__curBitmap",99,2d,31,33),
	::String(null()) };

hx::Class BitmapLog_obj::__mClass;

void BitmapLog_obj::__register()
{
	BitmapLog_obj _hx_dummy;
	BitmapLog_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("flixel.system.debug.log.BitmapLog",c3,c9,7a,56);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapLog_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapLog_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapLog_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapLog_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace log
