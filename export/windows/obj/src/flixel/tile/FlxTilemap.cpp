// Generated by Haxe 4.0.0-rc.2+77068e10c
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxTileFrames
#include <flixel/graphics/frames/FlxTileFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawBaseItem
#include <flixel/graphics/tile/FlxDrawBaseItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawQuadsItem
#include <flixel/graphics/tile/FlxDrawQuadsItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_math_FlxCallbackPoint
#include <flixel/math/FlxCallbackPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTile
#include <flixel/tile/FlxTile.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemapBuffer
#include <flixel/tile/FlxTilemapBuffer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxColorTransformUtil
#include <flixel/util/FlxColorTransformUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal1
#include <flixel/util/_FlxSignal/FlxSignal1.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal2
#include <flixel/util/_FlxSignal/FlxSignal2.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1146cbfc6764fb25_46_new,"flixel.tile.FlxTilemap","new",0xbe02531c,"flixel.tile.FlxTilemap.new","flixel/tile/FlxTilemap.hx",46,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_183_destroy,"flixel.tile.FlxTilemap","destroy",0xa7f2bdb6,"flixel.tile.FlxTilemap.destroy","flixel/tile/FlxTilemap.hx",183,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_230_set_frames,"flixel.tile.FlxTilemap","set_frames",0xb39c4aa7,"flixel.tile.FlxTilemap.set_frames","flixel/tile/FlxTilemap.hx",230,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_247_onGameResized,"flixel.tile.FlxTilemap","onGameResized",0x240fb4fb,"flixel.tile.FlxTilemap.onGameResized","flixel/tile/FlxTilemap.hx",247,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_252_onCameraChanged,"flixel.tile.FlxTilemap","onCameraChanged",0xe013f4ec,"flixel.tile.FlxTilemap.onCameraChanged","flixel/tile/FlxTilemap.hx",252,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_256_cacheGraphics,"flixel.tile.FlxTilemap","cacheGraphics",0x759126e9,"flixel.tile.FlxTilemap.cacheGraphics","flixel/tile/FlxTilemap.hx",256,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_280_initTileObjects,"flixel.tile.FlxTilemap","initTileObjects",0xb20b6ad2,"flixel.tile.FlxTilemap.initTileObjects","flixel/tile/FlxTilemap.hx",280,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_305_updateDebugTileBoundingBoxSolid,"flixel.tile.FlxTilemap","updateDebugTileBoundingBoxSolid",0xf2502658,"flixel.tile.FlxTilemap.updateDebugTileBoundingBoxSolid","flixel/tile/FlxTilemap.hx",305,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_310_updateDebugTileBoundingBoxNotSolid,"flixel.tile.FlxTilemap","updateDebugTileBoundingBoxNotSolid",0x299bee0b,"flixel.tile.FlxTilemap.updateDebugTileBoundingBoxNotSolid","flixel/tile/FlxTilemap.hx",310,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_315_updateDebugTileBoundingBoxPartial,"flixel.tile.FlxTilemap","updateDebugTileBoundingBoxPartial",0xa959eeee,"flixel.tile.FlxTilemap.updateDebugTileBoundingBoxPartial","flixel/tile/FlxTilemap.hx",315,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_319_updateDebugTile,"flixel.tile.FlxTilemap","updateDebugTile",0x0398ec94,"flixel.tile.FlxTilemap.updateDebugTile","flixel/tile/FlxTilemap.hx",319,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_343_computeDimensions,"flixel.tile.FlxTilemap","computeDimensions",0x3602f860,"flixel.tile.FlxTilemap.computeDimensions","flixel/tile/FlxTilemap.hx",343,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_353_updateMap,"flixel.tile.FlxTilemap","updateMap",0x271f1fcf,"flixel.tile.FlxTilemap.updateMap","flixel/tile/FlxTilemap.hx",353,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_366_drawDebugOnCamera,"flixel.tile.FlxTilemap","drawDebugOnCamera",0x0d929baf,"flixel.tile.FlxTilemap.drawDebugOnCamera","flixel/tile/FlxTilemap.hx",366,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_444_isOnScreen,"flixel.tile.FlxTilemap","isOnScreen",0xb4cad0b9,"flixel.tile.FlxTilemap.isOnScreen","flixel/tile/FlxTilemap.hx",444,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_459_draw,"flixel.tile.FlxTilemap","draw",0x7d740dc8,"flixel.tile.FlxTilemap.draw","flixel/tile/FlxTilemap.hx",459,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_512_refreshBuffers,"flixel.tile.FlxTilemap","refreshBuffers",0x89f6f19c,"flixel.tile.FlxTilemap.refreshBuffers","flixel/tile/FlxTilemap.hx",512,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_532_setDirty,"flixel.tile.FlxTilemap","setDirty",0x6396ccd4,"flixel.tile.FlxTilemap.setDirty","flixel/tile/FlxTilemap.hx",532,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_553_overlapsWithCallback,"flixel.tile.FlxTilemap","overlapsWithCallback",0xe7b56cdb,"flixel.tile.FlxTilemap.overlapsWithCallback","flixel/tile/FlxTilemap.hx",553,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_654_getTileIndexByCoords,"flixel.tile.FlxTilemap","getTileIndexByCoords",0xb5ce22c7,"flixel.tile.FlxTilemap.getTileIndexByCoords","flixel/tile/FlxTilemap.hx",654,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_666_getTileCoordsByIndex,"flixel.tile.FlxTilemap","getTileCoordsByIndex",0xe0680d7d,"flixel.tile.FlxTilemap.getTileCoordsByIndex","flixel/tile/FlxTilemap.hx",666,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_684_getTileCoords,"flixel.tile.FlxTilemap","getTileCoords",0x02899bde,"flixel.tile.FlxTilemap.getTileCoords","flixel/tile/FlxTilemap.hx",684,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_721_follow,"flixel.tile.FlxTilemap","follow",0xe6a96c35,"flixel.tile.FlxTilemap.follow","flixel/tile/FlxTilemap.hx",721,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_739_ray,"flixel.tile.FlxTilemap","ray",0xbe0558a6,"flixel.tile.FlxTilemap.ray","flixel/tile/FlxTilemap.hx",739,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_849_tileToSprite,"flixel.tile.FlxTilemap","tileToSprite",0xe7482ef2,"flixel.tile.FlxTilemap.tileToSprite","flixel/tile/FlxTilemap.hx",849,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_876_updateBuffers,"flixel.tile.FlxTilemap","updateBuffers",0xf5face26,"flixel.tile.FlxTilemap.updateBuffers","flixel/tile/FlxTilemap.hx",876,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_889_drawTilemap,"flixel.tile.FlxTilemap","drawTilemap",0x2b20d346,"flixel.tile.FlxTilemap.drawTilemap","flixel/tile/FlxTilemap.hx",889,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1037_makeDebugTile,"flixel.tile.FlxTilemap","makeDebugTile",0xa1ed2d0f,"flixel.tile.FlxTilemap.makeDebugTile","flixel/tile/FlxTilemap.hx",1037,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1048_drawDebugTile,"flixel.tile.FlxTilemap","drawDebugTile",0x086b4839,"flixel.tile.FlxTilemap.drawDebugTile","flixel/tile/FlxTilemap.hx",1048,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1065_onDrawDebugChanged,"flixel.tile.FlxTilemap","onDrawDebugChanged",0x3243d108,"flixel.tile.FlxTilemap.onDrawDebugChanged","flixel/tile/FlxTilemap.hx",1065,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1075_updateTile,"flixel.tile.FlxTilemap","updateTile",0x18c3429b,"flixel.tile.FlxTilemap.updateTile","flixel/tile/FlxTilemap.hx",1075,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1084_createBuffer,"flixel.tile.FlxTilemap","createBuffer",0x170b42e0,"flixel.tile.FlxTilemap.createBuffer","flixel/tile/FlxTilemap.hx",1084,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1092_set_antialiasing,"flixel.tile.FlxTilemap","set_antialiasing",0x6cc568b5,"flixel.tile.FlxTilemap.set_antialiasing","flixel/tile/FlxTilemap.hx",1092,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1103_set_graphic,"flixel.tile.FlxTilemap","set_graphic",0xa0b86087,"flixel.tile.FlxTilemap.set_graphic","flixel/tile/FlxTilemap.hx",1103,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1120_set_pixelPerfectRender,"flixel.tile.FlxTilemap","set_pixelPerfectRender",0x5122f25e,"flixel.tile.FlxTilemap.set_pixelPerfectRender","flixel/tile/FlxTilemap.hx",1120,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1129_set_alpha,"flixel.tile.FlxTilemap","set_alpha",0xecd0277d,"flixel.tile.FlxTilemap.set_alpha","flixel/tile/FlxTilemap.hx",1129,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1136_set_color,"flixel.tile.FlxTilemap","set_color",0x1595f182,"flixel.tile.FlxTilemap.set_color","flixel/tile/FlxTilemap.hx",1136,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1146_updateColorTransform,"flixel.tile.FlxTilemap","updateColorTransform",0x6f14b936,"flixel.tile.FlxTilemap.updateColorTransform","flixel/tile/FlxTilemap.hx",1146,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1159_set_blend,"flixel.tile.FlxTilemap","set_blend",0x802e6870,"flixel.tile.FlxTilemap.set_blend","flixel/tile/FlxTilemap.hx",1159,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1165_setScaleXYCallback,"flixel.tile.FlxTilemap","setScaleXYCallback",0x2287ee32,"flixel.tile.FlxTilemap.setScaleXYCallback","flixel/tile/FlxTilemap.hx",1165,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1171_setScaleXCallback,"flixel.tile.FlxTilemap","setScaleXCallback",0x45b95971,"flixel.tile.FlxTilemap.setScaleXCallback","flixel/tile/FlxTilemap.hx",1171,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1184_setScaleYCallback,"flixel.tile.FlxTilemap","setScaleYCallback",0x18aac272,"flixel.tile.FlxTilemap.setScaleYCallback","flixel/tile/FlxTilemap.hx",1184,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1203_defaultTileToSprite,"flixel.tile.FlxTilemap","defaultTileToSprite",0xb4e0664b,"flixel.tile.FlxTilemap.defaultTileToSprite","flixel/tile/FlxTilemap.hx",1203,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1214_set_allowCollisions,"flixel.tile.FlxTilemap","set_allowCollisions",0x96e24689,"flixel.tile.FlxTilemap.set_allowCollisions","flixel/tile/FlxTilemap.hx",1214,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1224_set_debugBoundingBoxColorSolid,"flixel.tile.FlxTilemap","set_debugBoundingBoxColorSolid",0x6fe5cfdd,"flixel.tile.FlxTilemap.set_debugBoundingBoxColorSolid","flixel/tile/FlxTilemap.hx",1224,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1231_set_debugBoundingBoxColorNotSolid,"flixel.tile.FlxTilemap","set_debugBoundingBoxColorNotSolid",0xa41f45a6,"flixel.tile.FlxTilemap.set_debugBoundingBoxColorNotSolid","flixel/tile/FlxTilemap.hx",1231,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1238_set_debugBoundingBoxColorPartial,"flixel.tile.FlxTilemap","set_debugBoundingBoxColorPartial",0xf6d0c3b3,"flixel.tile.FlxTilemap.set_debugBoundingBoxColorPartial","flixel/tile/FlxTilemap.hx",1238,0x448feb74)
namespace flixel{
namespace tile{

void FlxTilemap_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_46_new)
HXLINE( 149)		this->_checkBufferChanges = false;
HXLINE( 127)		this->_scaledTileHeight = ((Float)0);
HXLINE( 126)		this->_scaledTileWidth = ((Float)0);
HXLINE( 124)		this->_tileHeight = 0;
HXLINE( 120)		this->_tileWidth = 0;
HXLINE( 116)		this->_buffers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 112)		this->_flashRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 108)		this->_flashPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  95)		this->blend = null();
HXLINE(  90)		this->colorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  88)		this->alpha = ((Float)1.0);
HXLINE(  83)		this->color = 16777215;
HXLINE(  71)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  71)		point->_inPool = false;
HXDLIN(  71)		this->offset = point;
HXLINE(  65)		this->antialiasing = false;
HXLINE(  53)		this->useScaleHack = true;
HXLINE( 153)		super::__construct();
HXLINE( 155)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 157)			this->_helperPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 158)			this->_matrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE( 161)		this->scale =  ::flixel::math::FlxCallbackPoint_obj::__alloc( HX_CTX ,this->setScaleXCallback_dyn(),this->setScaleYCallback_dyn(),this->setScaleXYCallback_dyn());
HXLINE( 162)		this->scale->set(1,1);
HXLINE( 164)		::flixel::FlxG_obj::signals->gameResized->add(this->onGameResized_dyn());
HXLINE( 165)		::flixel::FlxG_obj::cameras->cameraAdded->add(this->onCameraChanged_dyn());
HXLINE( 166)		::flixel::FlxG_obj::cameras->cameraRemoved->add(this->onCameraChanged_dyn());
HXLINE( 167)		::flixel::FlxG_obj::cameras->cameraResized->add(this->onCameraChanged_dyn());
HXLINE( 170)		this->set_debugBoundingBoxColorSolid(-16744448);
HXLINE( 171)		this->set_debugBoundingBoxColorPartial(-16181);
HXLINE( 172)		this->set_debugBoundingBoxColorNotSolid(0);
HXLINE( 174)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 175)			::flixel::FlxG_obj::debugger->drawDebugChanged->add(this->onDrawDebugChanged_dyn());
            		}
            	}

Dynamic FlxTilemap_obj::__CreateEmpty() { return new FlxTilemap_obj; }

void *FlxTilemap_obj::_hx_vtable = 0;

Dynamic FlxTilemap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTilemap_obj > _hx_result = new FlxTilemap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxTilemap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2e105115) {
		if (inClassId<=(int)0x25a685e0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x25a685e0;
		} else {
			return inClassId==(int)0x2e105115;
		}
	} else {
		return inClassId==(int)0x725f80f5 || inClassId==(int)0x75a66d6a;
	}
}

void FlxTilemap_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_183_destroy)
HXLINE( 184)		this->_flashPoint = null();
HXLINE( 185)		this->_flashRect = null();
HXLINE( 187)		this->_tileObjects = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_tileObjects);
HXLINE( 188)		this->_buffers = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_buffers);
HXLINE( 190)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 193)			this->_debugRect = null();
HXLINE( 194)			this->_debugTileNotSolid = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_debugTileNotSolid);
HXLINE( 195)			this->_debugTilePartial = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_debugTilePartial);
HXLINE( 196)			this->_debugTileSolid = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_debugTileSolid);
            		}
            		else {
HXLINE( 201)			this->_helperPoint = null();
HXLINE( 202)			this->_matrix = null();
            		}
HXLINE( 205)		this->set_frames(null());
HXLINE( 206)		this->set_graphic(null());
HXLINE( 209)		this->scale = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::destroy(this->scale)) );
HXLINE( 210)		this->offset = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->offset)) );
HXLINE( 212)		this->colorTransform = null();
HXLINE( 214)		::flixel::FlxG_obj::signals->gameResized->remove(this->onGameResized_dyn());
HXLINE( 215)		::flixel::FlxG_obj::cameras->cameraAdded->remove(this->onCameraChanged_dyn());
HXLINE( 216)		::flixel::FlxG_obj::cameras->cameraRemoved->remove(this->onCameraChanged_dyn());
HXLINE( 217)		::flixel::FlxG_obj::cameras->cameraResized->remove(this->onCameraChanged_dyn());
HXLINE( 220)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 221)			::flixel::FlxG_obj::debugger->drawDebugChanged->remove(this->onDrawDebugChanged_dyn());
            		}
HXLINE( 224)		this->shader = null();
HXLINE( 226)		this->super::destroy();
            	}


 ::flixel::graphics::frames::FlxFramesCollection FlxTilemap_obj::set_frames( ::flixel::graphics::frames::FlxFramesCollection value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_230_set_frames)
HXLINE( 231)		this->frames = value;
HXLINE( 233)		if (hx::IsNotNull( value )) {
HXLINE( 235)			this->_tileWidth = ::Std_obj::_hx_int(value->frames->__get(0).StaticCast<  ::flixel::graphics::frames::FlxFrame >()->sourceSize->x);
HXLINE( 236)			this->_tileHeight = ::Std_obj::_hx_int(value->frames->__get(0).StaticCast<  ::flixel::graphics::frames::FlxFrame >()->sourceSize->y);
HXLINE( 237)			this->_flashRect->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(this->_tileWidth) ),( (Float)(this->_tileHeight) ));
HXLINE( 238)			this->set_graphic(value->parent);
HXLINE( 239)			this->postGraphicLoad();
            		}
HXLINE( 242)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_frames,return )

void FlxTilemap_obj::onGameResized(int _,int _1){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_247_onGameResized)
HXDLIN( 247)		this->_checkBufferChanges = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTilemap_obj,onGameResized,(void))

void FlxTilemap_obj::onCameraChanged( ::flixel::FlxCamera _){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_252_onCameraChanged)
HXDLIN( 252)		this->_checkBufferChanges = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,onCameraChanged,(void))

void FlxTilemap_obj::cacheGraphics(int TileWidth,int TileHeight, ::Dynamic TileGraphic){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_256_cacheGraphics)
HXLINE( 257)		if (::Std_obj::is(TileGraphic,hx::ClassOf< ::flixel::graphics::frames::FlxFramesCollection >())) {
HXLINE( 259)			this->set_frames(( ( ::flixel::graphics::frames::FlxFramesCollection)(TileGraphic) ));
HXLINE( 260)			return;
            		}
HXLINE( 263)		 ::flixel::graphics::FlxGraphic graph = ::flixel::FlxG_obj::bitmap->add(TileGraphic,null(),null());
HXLINE( 264)		if (hx::IsNull( graph )) {
HXLINE( 265)			return;
            		}
HXLINE( 268)		this->_tileWidth = TileWidth;
HXLINE( 269)		if ((this->_tileWidth <= 0)) {
HXLINE( 270)			this->_tileWidth = graph->height;
            		}
HXLINE( 272)		this->_tileHeight = TileHeight;
HXLINE( 273)		if ((this->_tileHeight <= 0)) {
HXLINE( 274)			this->_tileHeight = this->_tileWidth;
            		}
HXLINE( 276)		Float X = ( (Float)(this->_tileWidth) );
HXDLIN( 276)		Float Y = ( (Float)(this->_tileHeight) );
HXDLIN( 276)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 276)		point->_inPool = false;
HXDLIN( 276)		this->set_frames(::flixel::graphics::frames::FlxTileFrames_obj::fromGraphic(graph,point,null(),null()));
            	}


void FlxTilemap_obj::initTileObjects(){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_280_initTileObjects)
HXLINE( 281)		if (hx::IsNull( this->frames )) {
HXLINE( 282)			return;
            		}
HXLINE( 284)		this->_tileObjects = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_tileObjects);
HXLINE( 286)		this->_tileObjects = ::Array_obj< ::Dynamic>::__new();
HXLINE( 288)		int length = this->frames->frames->length;
HXLINE( 289)		length = (length + this->_startingIndex);
HXLINE( 291)		{
HXLINE( 291)			int _g = 0;
HXDLIN( 291)			int _g1 = length;
HXDLIN( 291)			while((_g < _g1)){
HXLINE( 291)				_g = (_g + 1);
HXDLIN( 291)				int i = (_g - 1);
HXLINE( 292)				int _hx_tmp;
HXDLIN( 292)				if ((i >= this->_collideIndex)) {
HXLINE( 292)					_hx_tmp = this->allowCollisions;
            				}
            				else {
HXLINE( 292)					_hx_tmp = 0;
            				}
HXDLIN( 292)				this->_tileObjects->set(i, ::flixel::tile::FlxTile_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),i,( (Float)(this->_tileWidth) ),( (Float)(this->_tileHeight) ),(i >= this->_drawIndex),_hx_tmp));
            			}
            		}
HXLINE( 296)		this->updateDebugTileBoundingBoxSolid();
HXLINE( 297)		this->updateDebugTileBoundingBoxNotSolid();
HXLINE( 298)		this->updateDebugTileBoundingBoxPartial();
            	}


void FlxTilemap_obj::updateDebugTileBoundingBoxSolid(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_305_updateDebugTileBoundingBoxSolid)
HXDLIN( 305)		this->_debugTileSolid = this->updateDebugTile(this->_debugTileSolid,this->debugBoundingBoxColorSolid);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,updateDebugTileBoundingBoxSolid,(void))

void FlxTilemap_obj::updateDebugTileBoundingBoxNotSolid(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_310_updateDebugTileBoundingBoxNotSolid)
HXDLIN( 310)		this->_debugTileNotSolid = this->updateDebugTile(this->_debugTileNotSolid,this->debugBoundingBoxColorNotSolid);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,updateDebugTileBoundingBoxNotSolid,(void))

void FlxTilemap_obj::updateDebugTileBoundingBoxPartial(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_315_updateDebugTileBoundingBoxPartial)
HXDLIN( 315)		this->_debugTilePartial = this->updateDebugTile(this->_debugTilePartial,this->debugBoundingBoxColorPartial);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,updateDebugTileBoundingBoxPartial,(void))

 ::openfl::display::BitmapData FlxTilemap_obj::updateDebugTile( ::openfl::display::BitmapData tileBitmap,int color){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_319_updateDebugTile)
HXLINE( 320)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 321)			return null();
            		}
HXLINE( 323)		bool _hx_tmp;
HXDLIN( 323)		if ((this->_tileWidth > 0)) {
HXLINE( 323)			_hx_tmp = (this->_tileHeight <= 0);
            		}
            		else {
HXLINE( 323)			_hx_tmp = true;
            		}
HXDLIN( 323)		if (_hx_tmp) {
HXLINE( 324)			return tileBitmap;
            		}
HXLINE( 326)		bool _hx_tmp1;
HXDLIN( 326)		if (hx::IsNotNull( tileBitmap )) {
HXLINE( 326)			if ((tileBitmap->width == this->_tileWidth)) {
HXLINE( 326)				_hx_tmp1 = (tileBitmap->height != this->_tileHeight);
            			}
            			else {
HXLINE( 326)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE( 326)			_hx_tmp1 = false;
            		}
HXDLIN( 326)		if (_hx_tmp1) {
HXLINE( 327)			tileBitmap = ::flixel::util::FlxDestroyUtil_obj::dispose(tileBitmap);
            		}
HXLINE( 329)		if (hx::IsNull( tileBitmap )) {
HXLINE( 330)			tileBitmap = this->makeDebugTile(color);
            		}
            		else {
HXLINE( 333)			tileBitmap->fillRect(tileBitmap->rect,0);
HXLINE( 334)			this->drawDebugTile(tileBitmap,color);
            		}
HXLINE( 337)		this->setDirty(null());
HXLINE( 338)		return tileBitmap;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTilemap_obj,updateDebugTile,return )

void FlxTilemap_obj::computeDimensions(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_343_computeDimensions)
HXLINE( 344)		this->_scaledTileWidth = (( (Float)(this->_tileWidth) ) * this->scale->x);
HXLINE( 345)		this->_scaledTileHeight = (( (Float)(this->_tileHeight) ) * this->scale->y);
HXLINE( 348)		this->set_width((( (Float)(this->widthInTiles) ) * this->_scaledTileWidth));
HXLINE( 349)		this->set_height((( (Float)(this->heightInTiles) ) * this->_scaledTileHeight));
            	}


void FlxTilemap_obj::updateMap(){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_353_updateMap)
HXLINE( 355)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 356)			this->_debugRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,this->_tileWidth,this->_tileHeight);
            		}
HXLINE( 359)		int numTiles = this->_tileObjects->get_length();
HXLINE( 360)		{
HXLINE( 360)			int _g = 0;
HXDLIN( 360)			int _g1 = numTiles;
HXDLIN( 360)			while((_g < _g1)){
HXLINE( 360)				_g = (_g + 1);
HXDLIN( 360)				int i = (_g - 1);
HXLINE( 361)				this->updateTile(i);
            			}
            		}
            	}


void FlxTilemap_obj::drawDebugOnCamera( ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_366_drawDebugOnCamera)
HXLINE( 367)		if (!(::flixel::FlxG_obj::renderTile)) {
HXLINE( 368)			return;
            		}
HXLINE( 370)		 ::flixel::tile::FlxTilemapBuffer buffer = null();
HXLINE( 371)		int l = ::flixel::FlxG_obj::cameras->list->length;
HXLINE( 373)		{
HXLINE( 373)			int _g = 0;
HXDLIN( 373)			int _g1 = l;
HXDLIN( 373)			while((_g < _g1)){
HXLINE( 373)				_g = (_g + 1);
HXDLIN( 373)				int i = (_g - 1);
HXLINE( 375)				if (hx::IsEq( ::flixel::FlxG_obj::cameras->list->__get(i).StaticCast<  ::flixel::FlxCamera >(),Camera )) {
HXLINE( 377)					buffer = this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXLINE( 378)					goto _hx_goto_15;
            				}
            			}
            			_hx_goto_15:;
            		}
HXLINE( 382)		if (hx::IsNull( buffer )) {
HXLINE( 383)			return;
            		}
HXLINE( 386)		this->_helperPoint->x = (this->x - (Camera->scroll->x * this->scrollFactor->x));
HXLINE( 387)		this->_helperPoint->y = (this->y - (Camera->scroll->y * this->scrollFactor->y));
HXLINE( 389)		Float rectWidth = this->_scaledTileWidth;
HXLINE( 390)		Float rectHeight = this->_scaledTileHeight;
HXLINE( 391)		 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 391)		_this->x = ( (Float)(0) );
HXDLIN( 391)		_this->y = ( (Float)(0) );
HXDLIN( 391)		_this->width = rectWidth;
HXDLIN( 391)		_this->height = rectHeight;
HXDLIN( 391)		 ::flixel::math::FlxRect rect = _this;
HXDLIN( 391)		rect->_inPool = false;
HXDLIN( 391)		 ::flixel::math::FlxRect rect1 = rect;
HXLINE( 395)		this->_point->set_x(((Camera->scroll->x * this->scrollFactor->x) - this->x));
HXLINE( 396)		this->_point->set_y(((Camera->scroll->y * this->scrollFactor->y) - this->y));
HXLINE( 397)		int screenXInTiles = ::Math_obj::floor((this->_point->x / this->_scaledTileWidth));
HXLINE( 398)		int screenYInTiles = ::Math_obj::floor((this->_point->y / this->_scaledTileHeight));
HXLINE( 399)		int screenRows = buffer->rows;
HXLINE( 400)		int screenColumns = buffer->columns;
HXLINE( 403)		 ::Dynamic Max = (this->widthInTiles - screenColumns);
HXDLIN( 403)		Float lowerBound;
HXDLIN( 403)		if ((screenXInTiles < 0)) {
HXLINE( 403)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXLINE( 403)			lowerBound = ( (Float)(screenXInTiles) );
            		}
HXDLIN( 403)		Float screenXInTiles1;
HXDLIN( 403)		bool screenXInTiles2;
HXDLIN( 403)		if (hx::IsNotNull( Max )) {
HXLINE( 403)			screenXInTiles2 = hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE( 403)			screenXInTiles2 = false;
            		}
HXDLIN( 403)		if (screenXInTiles2) {
HXLINE( 403)			screenXInTiles1 = ( (Float)(Max) );
            		}
            		else {
HXLINE( 403)			screenXInTiles1 = lowerBound;
            		}
HXDLIN( 403)		screenXInTiles = ::Std_obj::_hx_int(screenXInTiles1);
HXLINE( 404)		 ::Dynamic Max1 = (this->heightInTiles - screenRows);
HXDLIN( 404)		Float lowerBound1;
HXDLIN( 404)		if ((screenYInTiles < 0)) {
HXLINE( 404)			lowerBound1 = ( (Float)(0) );
            		}
            		else {
HXLINE( 404)			lowerBound1 = ( (Float)(screenYInTiles) );
            		}
HXDLIN( 404)		Float screenYInTiles1;
HXDLIN( 404)		bool screenYInTiles2;
HXDLIN( 404)		if (hx::IsNotNull( Max1 )) {
HXLINE( 404)			screenYInTiles2 = hx::IsGreater( lowerBound1,Max1 );
            		}
            		else {
HXLINE( 404)			screenYInTiles2 = false;
            		}
HXDLIN( 404)		if (screenYInTiles2) {
HXLINE( 404)			screenYInTiles1 = ( (Float)(Max1) );
            		}
            		else {
HXLINE( 404)			screenYInTiles1 = lowerBound1;
            		}
HXDLIN( 404)		screenYInTiles = ::Std_obj::_hx_int(screenYInTiles1);
HXLINE( 406)		int rowIndex = ((screenYInTiles * this->widthInTiles) + screenXInTiles);
HXLINE( 407)		int columnIndex;
HXLINE( 408)		 ::flixel::tile::FlxTile tile;
HXLINE( 410)		{
HXLINE( 410)			int _g2 = 0;
HXDLIN( 410)			int _g3 = screenRows;
HXDLIN( 410)			while((_g2 < _g3)){
HXLINE( 410)				_g2 = (_g2 + 1);
HXDLIN( 410)				int row = (_g2 - 1);
HXLINE( 412)				columnIndex = rowIndex;
HXLINE( 414)				{
HXLINE( 414)					int _g21 = 0;
HXDLIN( 414)					int _g31 = screenColumns;
HXDLIN( 414)					while((_g21 < _g31)){
HXLINE( 414)						_g21 = (_g21 + 1);
HXDLIN( 414)						int column = (_g21 - 1);
HXLINE( 416)						tile = Dynamic( this->_tileObjects->__get(this->_data->__get(columnIndex))).StaticCast<  ::flixel::tile::FlxTile >();
HXLINE( 418)						bool _hx_tmp;
HXDLIN( 418)						if (hx::IsNotNull( tile )) {
HXLINE( 418)							_hx_tmp = tile->visible;
            						}
            						else {
HXLINE( 418)							_hx_tmp = false;
            						}
HXDLIN( 418)						if (_hx_tmp) {
HXLINE( 420)							rect1->x = (this->_helperPoint->x + (( (Float)(hx::Mod(columnIndex,this->widthInTiles)) ) * rectWidth));
HXLINE( 421)							rect1->y = (this->_helperPoint->y + (( (Float)(::Math_obj::floor((( (Float)(columnIndex) ) / ( (Float)(this->widthInTiles) )))) ) * rectHeight));
HXLINE( 422)							 ::openfl::display::Graphics _hx_tmp1 = Camera->debugLayer->get_graphics();
HXDLIN( 422)							this->drawDebugBoundingBox(_hx_tmp1,rect1,tile->allowCollisions,(tile->allowCollisions != 4369));
            						}
HXLINE( 426)						columnIndex = (columnIndex + 1);
            					}
            				}
HXLINE( 429)				rowIndex = (rowIndex + this->widthInTiles);
            			}
            		}
HXLINE( 432)		if (!(rect1->_inPool)) {
HXLINE( 432)			rect1->_inPool = true;
HXDLIN( 432)			rect1->_weak = false;
HXDLIN( 432)			::flixel::math::FlxRect_obj::_pool->putUnsafe(rect1);
            		}
            	}


bool FlxTilemap_obj::isOnScreen( ::flixel::FlxCamera Camera){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_444_isOnScreen)
HXLINE( 445)		if (hx::IsNull( Camera )) {
HXLINE( 446)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 448)		Float minX = ((this->x - this->offset->x) - (Camera->scroll->x * this->scrollFactor->x));
HXLINE( 449)		Float minY = ((this->y - this->offset->y) - (Camera->scroll->y * this->scrollFactor->y));
HXLINE( 451)		this->_point->set(minX,minY);
HXLINE( 452)		 ::flixel::math::FlxPoint point = this->_point;
HXDLIN( 452)		bool _hx_tmp;
HXDLIN( 452)		bool _hx_tmp1;
HXDLIN( 452)		if (((point->x + (this->_scaledTileWidth * ( (Float)(this->widthInTiles) ))) > Camera->viewOffsetX)) {
HXLINE( 452)			_hx_tmp1 = (point->x < Camera->viewOffsetWidth);
            		}
            		else {
HXLINE( 452)			_hx_tmp1 = false;
            		}
HXDLIN( 452)		if (_hx_tmp1) {
HXLINE( 452)			_hx_tmp = ((point->y + (this->_scaledTileHeight * ( (Float)(this->heightInTiles) ))) > Camera->viewOffsetY);
            		}
            		else {
HXLINE( 452)			_hx_tmp = false;
            		}
HXDLIN( 452)		if (_hx_tmp) {
HXLINE( 452)			return (point->y < Camera->viewOffsetHeight);
            		}
            		else {
HXLINE( 452)			return false;
            		}
HXDLIN( 452)		return false;
            	}


void FlxTilemap_obj::draw(){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_459_draw)
HXLINE( 461)		if (hx::IsNull( this->graphic )) {
HXLINE( 462)			return;
            		}
HXLINE( 464)		if (this->_checkBufferChanges) {
HXLINE( 466)			this->refreshBuffers();
HXLINE( 467)			this->_checkBufferChanges = false;
            		}
HXLINE( 470)		 ::flixel::FlxCamera camera;
HXLINE( 471)		 ::flixel::tile::FlxTilemapBuffer buffer;
HXLINE( 472)		int l = this->get_cameras()->length;
HXLINE( 474)		{
HXLINE( 474)			int _g = 0;
HXDLIN( 474)			int _g1 = l;
HXDLIN( 474)			while((_g < _g1)){
HXLINE( 474)				_g = (_g + 1);
HXDLIN( 474)				int i = (_g - 1);
HXLINE( 476)				camera = this->get_cameras()->__get(i).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 478)				bool _hx_tmp;
HXDLIN( 478)				bool _hx_tmp1;
HXDLIN( 478)				if (!(!(camera->visible))) {
HXLINE( 478)					_hx_tmp1 = !(camera->exists);
            				}
            				else {
HXLINE( 478)					_hx_tmp1 = true;
            				}
HXDLIN( 478)				if (!(_hx_tmp1)) {
HXLINE( 478)					_hx_tmp = !(this->isOnScreen(camera));
            				}
            				else {
HXLINE( 478)					_hx_tmp = true;
            				}
HXDLIN( 478)				if (_hx_tmp) {
HXLINE( 479)					continue;
            				}
HXLINE( 481)				if (hx::IsNull( this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >() )) {
HXLINE( 482)					::Array< ::Dynamic> _hx_tmp2 = this->_buffers;
HXDLIN( 482)					 ::flixel::tile::FlxTilemapBuffer buffer1 =  ::flixel::tile::FlxTilemapBuffer_obj::__alloc( HX_CTX ,this->_tileWidth,this->_tileHeight,this->widthInTiles,this->heightInTiles,camera,this->scale->x,this->scale->y);
HXDLIN( 482)					buffer1->pixelPerfectRender = this->pixelPerfectRender;
HXDLIN( 482)					buffer1->antialiasing = this->antialiasing;
HXDLIN( 482)					_hx_tmp2[i] = buffer1;
            				}
HXLINE( 484)				buffer = this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXLINE( 486)				if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 488)					if (buffer->isDirty(hx::ObjectPtr<OBJ_>(this),camera)) {
HXLINE( 489)						this->drawTilemap(buffer,camera);
            					}
HXLINE( 491)					{
HXLINE( 491)						 ::flixel::math::FlxPoint _this = this->getScreenPosition(this->_point,camera)->subtractPoint(this->offset);
HXDLIN( 491)						Float Y = buffer->y;
HXDLIN( 491)						{
HXLINE( 491)							 ::flixel::math::FlxPoint _g2 = _this;
HXDLIN( 491)							_g2->set_x((_g2->x + buffer->x));
            						}
HXDLIN( 491)						{
HXLINE( 491)							 ::flixel::math::FlxPoint _g3 = _this;
HXDLIN( 491)							_g3->set_y((_g3->y + Y));
            						}
HXDLIN( 491)						 ::flixel::math::FlxPoint _this1 = _this;
HXDLIN( 491)						 ::openfl::geom::Point FlashPoint = this->_flashPoint;
HXDLIN( 491)						if (hx::IsNull( FlashPoint )) {
HXLINE( 491)							FlashPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            						}
HXDLIN( 491)						FlashPoint->x = _this1->x;
HXDLIN( 491)						FlashPoint->y = _this1->y;
            					}
HXLINE( 492)					buffer->draw(camera,this->_flashPoint,this->scale->x,this->scale->y);
            				}
            				else {
HXLINE( 496)					this->drawTilemap(buffer,camera);
            				}
HXLINE( 500)				::flixel::FlxBasic_obj::visibleCount++;
            			}
            		}
HXLINE( 505)		if (::flixel::FlxG_obj::debugger->drawDebug) {
HXLINE( 506)			this->drawDebug();
            		}
            	}


void FlxTilemap_obj::refreshBuffers(){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_512_refreshBuffers)
HXDLIN( 512)		int _g = 0;
HXDLIN( 512)		int _g1 = this->get_cameras()->length;
HXDLIN( 512)		while((_g < _g1)){
HXDLIN( 512)			_g = (_g + 1);
HXDLIN( 512)			int i = (_g - 1);
HXLINE( 514)			 ::flixel::FlxCamera camera = this->get_cameras()->__get(i).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 515)			 ::flixel::tile::FlxTilemapBuffer buffer = this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXLINE( 518)			if (hx::IsNull( buffer )) {
HXLINE( 519)				::Array< ::Dynamic> _hx_tmp = this->_buffers;
HXDLIN( 519)				 ::flixel::tile::FlxTilemapBuffer buffer1 =  ::flixel::tile::FlxTilemapBuffer_obj::__alloc( HX_CTX ,this->_tileWidth,this->_tileHeight,this->widthInTiles,this->heightInTiles,camera,this->scale->x,this->scale->y);
HXDLIN( 519)				buffer1->pixelPerfectRender = this->pixelPerfectRender;
HXDLIN( 519)				buffer1->antialiasing = this->antialiasing;
HXDLIN( 519)				_hx_tmp[i] = buffer1;
            			}
            			else {
HXLINE( 521)				buffer->resize(this->_tileWidth,this->_tileHeight,this->widthInTiles,this->heightInTiles,camera,this->scale->x,this->scale->y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,refreshBuffers,(void))

void FlxTilemap_obj::setDirty(hx::Null< bool >  __o_Dirty){
            		bool Dirty = __o_Dirty.Default(true);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_532_setDirty)
HXLINE( 533)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 534)			return;
            		}
HXLINE( 536)		{
HXLINE( 536)			int _g = 0;
HXDLIN( 536)			::Array< ::Dynamic> _g1 = this->_buffers;
HXDLIN( 536)			while((_g < _g1->length)){
HXLINE( 536)				 ::flixel::tile::FlxTilemapBuffer buffer = _g1->__get(_g).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXDLIN( 536)				_g = (_g + 1);
HXLINE( 537)				if (hx::IsNotNull( buffer )) {
HXLINE( 538)					buffer->dirty = Dirty;
            				}
            			}
            		}
            	}


bool FlxTilemap_obj::overlapsWithCallback( ::flixel::FlxObject Object, ::Dynamic Callback,hx::Null< bool >  __o_FlipCallbackParams, ::flixel::math::FlxPoint Position){
            		bool FlipCallbackParams = __o_FlipCallbackParams.Default(false);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_553_overlapsWithCallback)
HXLINE( 554)		bool results = false;
HXLINE( 556)		Float xPos = this->x;
HXLINE( 557)		Float yPos = this->y;
HXLINE( 559)		if (hx::IsNotNull( Position )) {
HXLINE( 561)			xPos = Position->x;
HXLINE( 562)			yPos = Position->y;
            		}
HXLINE( 566)		int selectionX = ::Math_obj::floor(((Object->x - xPos) / this->_scaledTileWidth));
HXLINE( 567)		int selectionY = ::Math_obj::floor(((Object->y - yPos) / this->_scaledTileHeight));
HXLINE( 568)		Float selectionWidth = Object->get_width();
HXDLIN( 568)		int selectionWidth1 = ((selectionX + ::Math_obj::ceil((selectionWidth / this->_scaledTileWidth))) + 1);
HXLINE( 569)		Float selectionHeight = Object->get_height();
HXDLIN( 569)		int selectionHeight1 = ((selectionY + ::Math_obj::ceil((selectionHeight / this->_scaledTileHeight))) + 1);
HXLINE( 572)		 ::Dynamic Max = this->widthInTiles;
HXDLIN( 572)		Float lowerBound;
HXDLIN( 572)		if ((selectionX < 0)) {
HXLINE( 572)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXLINE( 572)			lowerBound = ( (Float)(selectionX) );
            		}
HXDLIN( 572)		Float selectionX1;
HXDLIN( 572)		bool selectionX2;
HXDLIN( 572)		if (hx::IsNotNull( Max )) {
HXLINE( 572)			selectionX2 = hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE( 572)			selectionX2 = false;
            		}
HXDLIN( 572)		if (selectionX2) {
HXLINE( 572)			selectionX1 = ( (Float)(Max) );
            		}
            		else {
HXLINE( 572)			selectionX1 = lowerBound;
            		}
HXDLIN( 572)		selectionX = ::Std_obj::_hx_int(selectionX1);
HXLINE( 573)		 ::Dynamic Max1 = this->heightInTiles;
HXDLIN( 573)		Float lowerBound1;
HXDLIN( 573)		if ((selectionY < 0)) {
HXLINE( 573)			lowerBound1 = ( (Float)(0) );
            		}
            		else {
HXLINE( 573)			lowerBound1 = ( (Float)(selectionY) );
            		}
HXDLIN( 573)		Float selectionY1;
HXDLIN( 573)		bool selectionY2;
HXDLIN( 573)		if (hx::IsNotNull( Max1 )) {
HXLINE( 573)			selectionY2 = hx::IsGreater( lowerBound1,Max1 );
            		}
            		else {
HXLINE( 573)			selectionY2 = false;
            		}
HXDLIN( 573)		if (selectionY2) {
HXLINE( 573)			selectionY1 = ( (Float)(Max1) );
            		}
            		else {
HXLINE( 573)			selectionY1 = lowerBound1;
            		}
HXDLIN( 573)		selectionY = ::Std_obj::_hx_int(selectionY1);
HXLINE( 574)		 ::Dynamic Max2 = this->widthInTiles;
HXDLIN( 574)		Float lowerBound2;
HXDLIN( 574)		if ((selectionWidth1 < 0)) {
HXLINE( 574)			lowerBound2 = ( (Float)(0) );
            		}
            		else {
HXLINE( 574)			lowerBound2 = ( (Float)(selectionWidth1) );
            		}
HXDLIN( 574)		Float selectionWidth2;
HXDLIN( 574)		bool selectionWidth3;
HXDLIN( 574)		if (hx::IsNotNull( Max2 )) {
HXLINE( 574)			selectionWidth3 = hx::IsGreater( lowerBound2,Max2 );
            		}
            		else {
HXLINE( 574)			selectionWidth3 = false;
            		}
HXDLIN( 574)		if (selectionWidth3) {
HXLINE( 574)			selectionWidth2 = ( (Float)(Max2) );
            		}
            		else {
HXLINE( 574)			selectionWidth2 = lowerBound2;
            		}
HXDLIN( 574)		selectionWidth1 = ::Std_obj::_hx_int(selectionWidth2);
HXLINE( 575)		 ::Dynamic Max3 = this->heightInTiles;
HXDLIN( 575)		Float lowerBound3;
HXDLIN( 575)		if ((selectionHeight1 < 0)) {
HXLINE( 575)			lowerBound3 = ( (Float)(0) );
            		}
            		else {
HXLINE( 575)			lowerBound3 = ( (Float)(selectionHeight1) );
            		}
HXDLIN( 575)		Float selectionHeight2;
HXDLIN( 575)		bool selectionHeight3;
HXDLIN( 575)		if (hx::IsNotNull( Max3 )) {
HXLINE( 575)			selectionHeight3 = hx::IsGreater( lowerBound3,Max3 );
            		}
            		else {
HXLINE( 575)			selectionHeight3 = false;
            		}
HXDLIN( 575)		if (selectionHeight3) {
HXLINE( 575)			selectionHeight2 = ( (Float)(Max3) );
            		}
            		else {
HXLINE( 575)			selectionHeight2 = lowerBound3;
            		}
HXDLIN( 575)		selectionHeight1 = ::Std_obj::_hx_int(selectionHeight2);
HXLINE( 578)		int rowStart = (selectionY * this->widthInTiles);
HXLINE( 579)		int column;
HXLINE( 580)		 ::flixel::tile::FlxTile tile;
HXLINE( 581)		bool overlapFound;
HXLINE( 582)		Float deltaX = (xPos - this->last->x);
HXLINE( 583)		Float deltaY = (yPos - this->last->y);
HXLINE( 585)		{
HXLINE( 585)			int _g = selectionY;
HXDLIN( 585)			int _g1 = selectionHeight1;
HXDLIN( 585)			while((_g < _g1)){
HXLINE( 585)				_g = (_g + 1);
HXDLIN( 585)				int row = (_g - 1);
HXLINE( 587)				column = selectionX;
HXLINE( 589)				while((column < selectionWidth1)){
HXLINE( 591)					int index = (rowStart + column);
HXLINE( 592)					bool _hx_tmp;
HXDLIN( 592)					if ((index >= 0)) {
HXLINE( 592)						_hx_tmp = (index > (this->_data->length - 1));
            					}
            					else {
HXLINE( 592)						_hx_tmp = true;
            					}
HXDLIN( 592)					if (_hx_tmp) {
HXLINE( 594)						column = (column + 1);
HXLINE( 595)						continue;
            					}
HXLINE( 598)					int dataIndex = this->_data->__get(index);
HXLINE( 599)					if ((dataIndex < 0)) {
HXLINE( 601)						column = (column + 1);
HXLINE( 602)						continue;
            					}
HXLINE( 605)					tile = Dynamic( this->_tileObjects->__get(dataIndex)).StaticCast<  ::flixel::tile::FlxTile >();
HXLINE( 606)					tile->set_width(this->_scaledTileWidth);
HXLINE( 607)					tile->set_height(this->_scaledTileHeight);
HXLINE( 608)					tile->set_x((xPos + (( (Float)(column) ) * tile->get_width())));
HXLINE( 609)					tile->set_y((yPos + (( (Float)(row) ) * tile->get_height())));
HXLINE( 610)					tile->last->set_x((tile->x - deltaX));
HXLINE( 611)					tile->last->set_y((tile->y - deltaY));
HXLINE( 614)					bool overlapFound1;
HXDLIN( 614)					bool overlapFound2;
HXDLIN( 614)					Float Object1 = Object->x;
HXDLIN( 614)					Float overlapFound3 = (Object1 + Object->get_width());
HXDLIN( 614)					if ((overlapFound3 > tile->x)) {
HXLINE( 614)						Float Object2 = Object->x;
HXDLIN( 614)						Float tile1 = tile->x;
HXDLIN( 614)						overlapFound2 = (Object2 < (tile1 + tile->get_width()));
            					}
            					else {
HXLINE( 614)						overlapFound2 = false;
            					}
HXDLIN( 614)					if (overlapFound2) {
HXLINE( 615)						Float Object3 = Object->y;
HXDLIN( 615)						Float overlapFound4 = (Object3 + Object->get_height());
HXLINE( 614)						overlapFound1 = (overlapFound4 > tile->y);
            					}
            					else {
HXLINE( 614)						overlapFound1 = false;
            					}
HXDLIN( 614)					if (overlapFound1) {
HXLINE( 615)						Float Object4 = Object->y;
HXDLIN( 615)						Float tile2 = tile->y;
HXDLIN( 615)						overlapFound = (Object4 < (tile2 + tile->get_height()));
            					}
            					else {
HXLINE( 614)						overlapFound = false;
            					}
HXLINE( 617)					if ((tile->allowCollisions != 0)) {
HXLINE( 619)						if (hx::IsNotNull( Callback )) {
HXLINE( 621)							if (FlipCallbackParams) {
HXLINE( 623)								overlapFound = ( (bool)(Callback(Object,tile)) );
            							}
            							else {
HXLINE( 627)								overlapFound = ( (bool)(Callback(tile,Object)) );
            							}
            						}
            					}
HXLINE( 632)					if (overlapFound) {
HXLINE( 634)						bool _hx_tmp1;
HXDLIN( 634)						if (hx::IsNotNull( tile->callbackFunction )) {
HXLINE( 634)							if (hx::IsNotNull( tile->filter )) {
HXLINE( 634)								_hx_tmp1 = ::Std_obj::is(Object,tile->filter);
            							}
            							else {
HXLINE( 634)								_hx_tmp1 = true;
            							}
            						}
            						else {
HXLINE( 634)							_hx_tmp1 = false;
            						}
HXDLIN( 634)						if (_hx_tmp1) {
HXLINE( 636)							tile->mapIndex = (rowStart + column);
HXLINE( 637)							tile->callbackFunction(tile,Object);
            						}
HXLINE( 640)						if ((tile->allowCollisions != 0)) {
HXLINE( 641)							results = true;
            						}
            					}
HXLINE( 644)					column = (column + 1);
            				}
HXLINE( 647)				rowStart = (rowStart + this->widthInTiles);
            			}
            		}
HXLINE( 650)		return results;
            	}


int FlxTilemap_obj::getTileIndexByCoords( ::flixel::math::FlxPoint Coord){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_654_getTileIndexByCoords)
HXLINE( 655)		Float localX = (Coord->x - this->x);
HXLINE( 656)		Float localY = (Coord->y - this->y);
HXLINE( 657)		if (Coord->_weak) {
HXLINE( 657)			Coord->put();
            		}
HXLINE( 659)		bool _hx_tmp;
HXDLIN( 659)		bool _hx_tmp1;
HXDLIN( 659)		bool _hx_tmp2;
HXDLIN( 659)		if (!((localX < 0))) {
HXLINE( 659)			_hx_tmp2 = (localY < 0);
            		}
            		else {
HXLINE( 659)			_hx_tmp2 = true;
            		}
HXDLIN( 659)		if (!(_hx_tmp2)) {
HXLINE( 659)			_hx_tmp1 = (localX >= this->get_width());
            		}
            		else {
HXLINE( 659)			_hx_tmp1 = true;
            		}
HXDLIN( 659)		if (!(_hx_tmp1)) {
HXLINE( 659)			_hx_tmp = (localY >= this->get_height());
            		}
            		else {
HXLINE( 659)			_hx_tmp = true;
            		}
HXDLIN( 659)		if (_hx_tmp) {
HXLINE( 660)			return -1;
            		}
HXLINE( 662)		int _hx_tmp3 = ::Std_obj::_hx_int((localY / this->_scaledTileHeight));
HXDLIN( 662)		int _hx_tmp4 = (_hx_tmp3 * this->widthInTiles);
HXDLIN( 662)		return (_hx_tmp4 + ::Std_obj::_hx_int((localX / this->_scaledTileWidth)));
            	}


 ::flixel::math::FlxPoint FlxTilemap_obj::getTileCoordsByIndex(int Index,hx::Null< bool >  __o_Midpoint){
            		bool Midpoint = __o_Midpoint.Default(true);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_666_getTileCoordsByIndex)
HXLINE( 667)		Float X = (this->x + (( (Float)(hx::Mod(Index,this->widthInTiles)) ) * this->_scaledTileWidth));
HXDLIN( 667)		Float Y = this->y;
HXDLIN( 667)		int Y1 = ::Std_obj::_hx_int((( (Float)(Index) ) / ( (Float)(this->widthInTiles) )));
HXDLIN( 667)		Float Y2 = (Y + (( (Float)(Y1) ) * this->_scaledTileHeight));
HXDLIN( 667)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y2);
HXDLIN( 667)		point->_inPool = false;
HXDLIN( 667)		 ::flixel::math::FlxPoint point1 = point;
HXLINE( 668)		if (Midpoint) {
HXLINE( 670)			{
HXLINE( 670)				 ::flixel::math::FlxPoint _g = point1;
HXDLIN( 670)				_g->set_x((_g->x + (this->_scaledTileWidth * ((Float)0.5))));
            			}
HXLINE( 671)			{
HXLINE( 671)				 ::flixel::math::FlxPoint _g1 = point1;
HXDLIN( 671)				_g1->set_y((_g1->y + (this->_scaledTileHeight * ((Float)0.5))));
            			}
            		}
HXLINE( 673)		return point1;
            	}


::Array< ::Dynamic> FlxTilemap_obj::getTileCoords(int Index,hx::Null< bool >  __o_Midpoint){
            		bool Midpoint = __o_Midpoint.Default(true);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_684_getTileCoords)
HXLINE( 685)		::Array< ::Dynamic> array = null();
HXLINE( 687)		 ::flixel::math::FlxPoint point;
HXLINE( 688)		int l = (this->widthInTiles * this->heightInTiles);
HXLINE( 690)		{
HXLINE( 690)			int _g = 0;
HXDLIN( 690)			int _g1 = l;
HXDLIN( 690)			while((_g < _g1)){
HXLINE( 690)				_g = (_g + 1);
HXDLIN( 690)				int i = (_g - 1);
HXLINE( 692)				if ((this->_data->__get(i) == Index)) {
HXLINE( 694)					Float X = (this->x + (( (Float)(hx::Mod(i,this->widthInTiles)) ) * this->_scaledTileWidth));
HXDLIN( 694)					Float Y = this->y;
HXDLIN( 694)					int Y1 = ::Std_obj::_hx_int((( (Float)(i) ) / ( (Float)(this->widthInTiles) )));
HXDLIN( 694)					Float Y2 = (Y + (( (Float)(Y1) ) * this->_scaledTileHeight));
HXDLIN( 694)					 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y2);
HXDLIN( 694)					point1->_inPool = false;
HXDLIN( 694)					point = point1;
HXLINE( 696)					if (Midpoint) {
HXLINE( 698)						{
HXLINE( 698)							 ::flixel::math::FlxPoint _g2 = point;
HXDLIN( 698)							_g2->set_x((_g2->x + (this->_scaledTileWidth * ((Float)0.5))));
            						}
HXLINE( 699)						{
HXLINE( 699)							 ::flixel::math::FlxPoint _g3 = point;
HXDLIN( 699)							_g3->set_y((_g3->y + (this->_scaledTileHeight * ((Float)0.5))));
            						}
            					}
HXLINE( 702)					if (hx::IsNull( array )) {
HXLINE( 704)						array = ::Array_obj< ::Dynamic>::__new();
            					}
HXLINE( 706)					array->push(point);
            				}
            			}
            		}
HXLINE( 710)		return array;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTilemap_obj,getTileCoords,return )

void FlxTilemap_obj::follow( ::flixel::FlxCamera Camera,hx::Null< int >  __o_Border,hx::Null< bool >  __o_UpdateWorld){
            		int Border = __o_Border.Default(0);
            		bool UpdateWorld = __o_UpdateWorld.Default(true);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_721_follow)
HXLINE( 722)		if (hx::IsNull( Camera )) {
HXLINE( 723)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 725)		Float _hx_tmp = (this->x + (( (Float)(Border) ) * this->_scaledTileWidth));
HXDLIN( 725)		Float _hx_tmp1 = (this->y + (( (Float)(Border) ) * this->_scaledTileHeight));
HXDLIN( 725)		Float _hx_tmp2 = this->get_width();
HXDLIN( 725)		Float _hx_tmp3 = (_hx_tmp2 - ((( (Float)(Border) ) * this->_scaledTileWidth) * ( (Float)(2) )));
HXDLIN( 725)		Float _hx_tmp4 = this->get_height();
HXDLIN( 725)		Camera->setScrollBoundsRect(_hx_tmp,_hx_tmp1,_hx_tmp3,(_hx_tmp4 - ((( (Float)(Border) ) * this->_scaledTileHeight) * ( (Float)(2) ))),UpdateWorld);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxTilemap_obj,follow,(void))

bool FlxTilemap_obj::ray( ::flixel::math::FlxPoint Start, ::flixel::math::FlxPoint End, ::flixel::math::FlxPoint Result,hx::Null< Float >  __o_Resolution){
            		Float Resolution = __o_Resolution.Default(1);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_739_ray)
HXLINE( 740)		Float step = this->_scaledTileWidth;
HXLINE( 742)		if ((this->_scaledTileHeight < this->_scaledTileWidth)) {
HXLINE( 743)			step = this->_scaledTileHeight;
            		}
HXLINE( 745)		step = (step / Resolution);
HXLINE( 746)		Float deltaX = (End->x - Start->x);
HXLINE( 747)		Float deltaY = (End->y - Start->y);
HXLINE( 748)		Float distance = ::Math_obj::sqrt(((deltaX * deltaX) + (deltaY * deltaY)));
HXLINE( 749)		int steps = ::Math_obj::ceil((distance / step));
HXLINE( 750)		Float stepX = (deltaX / ( (Float)(steps) ));
HXLINE( 751)		Float stepY = (deltaY / ( (Float)(steps) ));
HXLINE( 752)		Float curX = ((Start->x - stepX) - this->x);
HXLINE( 753)		Float curY = ((Start->y - stepY) - this->y);
HXLINE( 754)		int tileX;
HXLINE( 755)		int tileY;
HXLINE( 756)		int i = 0;
HXLINE( 758)		if (Start->_weak) {
HXLINE( 758)			Start->put();
            		}
HXLINE( 759)		if (End->_weak) {
HXLINE( 759)			End->put();
            		}
HXLINE( 761)		while((i < steps)){
HXLINE( 763)			curX = (curX + stepX);
HXLINE( 764)			curY = (curY + stepY);
HXLINE( 766)			bool _hx_tmp;
HXDLIN( 766)			bool _hx_tmp1;
HXDLIN( 766)			bool _hx_tmp2;
HXDLIN( 766)			if (!((curX < 0))) {
HXLINE( 766)				_hx_tmp2 = (curX > this->get_width());
            			}
            			else {
HXLINE( 766)				_hx_tmp2 = true;
            			}
HXDLIN( 766)			if (!(_hx_tmp2)) {
HXLINE( 766)				_hx_tmp1 = (curY < 0);
            			}
            			else {
HXLINE( 766)				_hx_tmp1 = true;
            			}
HXDLIN( 766)			if (!(_hx_tmp1)) {
HXLINE( 766)				_hx_tmp = (curY > this->get_height());
            			}
            			else {
HXLINE( 766)				_hx_tmp = true;
            			}
HXDLIN( 766)			if (_hx_tmp) {
HXLINE( 768)				i = (i + 1);
HXLINE( 769)				continue;
            			}
HXLINE( 772)			tileX = ::Math_obj::floor((curX / this->_scaledTileWidth));
HXLINE( 773)			tileY = ::Math_obj::floor((curY / this->_scaledTileHeight));
HXLINE( 775)			if ((Dynamic( this->_tileObjects->__get(this->_data->__get(((tileY * this->widthInTiles) + tileX)))).StaticCast<  ::flixel::tile::FlxTile >()->allowCollisions != 0)) {
HXLINE( 778)				tileX = (tileX * ::Std_obj::_hx_int(this->_scaledTileWidth));
HXLINE( 779)				tileY = (tileY * ::Std_obj::_hx_int(this->_scaledTileHeight));
HXLINE( 780)				Float rx = ( (Float)(0) );
HXLINE( 781)				Float ry = ( (Float)(0) );
HXLINE( 783)				Float lx = (curX - stepX);
HXLINE( 784)				Float ly = (curY - stepY);
HXLINE( 782)				Float q = ( (Float)(tileX) );
HXLINE( 789)				if ((deltaX < 0)) {
HXLINE( 791)					q = (q + this->_scaledTileWidth);
            				}
HXLINE( 794)				rx = q;
HXLINE( 795)				ry = (ly + (stepY * ((q - lx) / stepX)));
HXLINE( 797)				bool _hx_tmp3;
HXDLIN( 797)				if ((ry >= tileY)) {
HXLINE( 797)					_hx_tmp3 = (ry <= (tileY + this->_scaledTileHeight));
            				}
            				else {
HXLINE( 797)					_hx_tmp3 = false;
            				}
HXDLIN( 797)				if (_hx_tmp3) {
HXLINE( 799)					if (hx::IsNull( Result )) {
HXLINE( 801)						 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 801)						point->_inPool = false;
HXDLIN( 801)						Result = point;
            					}
HXLINE( 804)					Result->set(rx,ry);
HXLINE( 805)					return false;
            				}
HXLINE( 809)				q = ( (Float)(tileY) );
HXLINE( 811)				if ((deltaY < 0)) {
HXLINE( 813)					q = (q + this->_scaledTileHeight);
            				}
HXLINE( 816)				rx = (lx + (stepX * ((q - ly) / stepY)));
HXLINE( 817)				ry = q;
HXLINE( 819)				bool _hx_tmp4;
HXDLIN( 819)				if ((rx >= tileX)) {
HXLINE( 819)					_hx_tmp4 = (rx <= (tileX + this->_scaledTileWidth));
            				}
            				else {
HXLINE( 819)					_hx_tmp4 = false;
            				}
HXDLIN( 819)				if (_hx_tmp4) {
HXLINE( 821)					if (hx::IsNull( Result )) {
HXLINE( 823)						 ::flixel::math::FlxPoint point1 = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 823)						point1->_inPool = false;
HXDLIN( 823)						Result = point1;
            					}
HXLINE( 826)					Result->set(rx,ry);
HXLINE( 827)					return false;
            				}
HXLINE( 830)				return true;
            			}
HXLINE( 832)			i = (i + 1);
            		}
HXLINE( 835)		return true;
            	}


 ::flixel::FlxSprite FlxTilemap_obj::tileToSprite(int X,int Y,hx::Null< int >  __o_NewTile, ::Dynamic SpriteFactory){
            		int NewTile = __o_NewTile.Default(0);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_849_tileToSprite)
HXLINE( 850)		if (hx::IsNull( SpriteFactory )) {
HXLINE( 851)			SpriteFactory = this->defaultTileToSprite_dyn();
            		}
HXLINE( 853)		int rowIndex = (X + (Y * this->widthInTiles));
HXLINE( 854)		 ::flixel::tile::FlxTile tile = Dynamic( this->_tileObjects->__get(this->_data->__get(rowIndex))).StaticCast<  ::flixel::tile::FlxTile >();
HXLINE( 855)		 ::flixel::graphics::frames::FlxImageFrame image = null();
HXLINE( 857)		bool _hx_tmp;
HXDLIN( 857)		if (hx::IsNotNull( tile )) {
HXLINE( 857)			_hx_tmp = tile->visible;
            		}
            		else {
HXLINE( 857)			_hx_tmp = false;
            		}
HXDLIN( 857)		if (_hx_tmp) {
HXLINE( 858)			image = ::flixel::graphics::frames::FlxImageFrame_obj::fromFrame(tile->frame);
            		}
            		else {
HXLINE( 860)			 ::flixel::graphics::FlxGraphic image1 = this->graphic;
HXDLIN( 860)			Float Width = ( (Float)(this->_tileWidth) );
HXDLIN( 860)			Float Height = ( (Float)(this->_tileHeight) );
HXDLIN( 860)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 860)			_this->x = ( (Float)(0) );
HXDLIN( 860)			_this->y = ( (Float)(0) );
HXDLIN( 860)			_this->width = Width;
HXDLIN( 860)			_this->height = Height;
HXDLIN( 860)			 ::flixel::math::FlxRect rect = _this;
HXDLIN( 860)			rect->_inPool = false;
HXDLIN( 860)			image = ::flixel::graphics::frames::FlxImageFrame_obj::fromEmptyFrame(image1,rect);
            		}
HXLINE( 862)		Float tileX = ((( (Float)((X * this->_tileWidth)) ) * this->scale->x) + this->x);
HXLINE( 863)		Float tileY = ((( (Float)((Y * this->_tileHeight)) ) * this->scale->y) + this->y);
HXLINE( 864)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 864)		point->_inPool = false;
HXDLIN( 864)		 ::flixel::math::FlxPoint _this1 = point;
HXDLIN( 864)		 ::flixel::math::FlxPoint point1 = this->scale;
HXDLIN( 864)		_this1->set_x(point1->x);
HXDLIN( 864)		_this1->set_y(point1->y);
HXDLIN( 864)		if (point1->_weak) {
HXLINE( 864)			point1->put();
            		}
HXDLIN( 864)		 ::flixel::FlxSprite tileSprite = ( ( ::flixel::FlxSprite)(SpriteFactory( ::Dynamic(hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("blend",51,e8,f4,b4),this->blend)
            			->setFixed(1,HX_("x",78,00,00,00),tileX)
            			->setFixed(2,HX_("y",79,00,00,00),tileY)
            			->setFixed(3,HX_("alpha",5e,a7,96,21),this->alpha)
            			->setFixed(4,HX_("graphic",a8,5a,07,74),image)
            			->setFixed(5,HX_("scale",8a,ce,ce,78),_this1)))) );
HXLINE( 866)		if ((NewTile >= 0)) {
HXLINE( 867)			this->setTile(X,Y,NewTile,null());
            		}
HXLINE( 869)		return tileSprite;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxTilemap_obj,tileToSprite,return )

void FlxTilemap_obj::updateBuffers(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_876_updateBuffers)
HXLINE( 877)		::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_buffers);
HXLINE( 878)		this->_buffers = ::Array_obj< ::Dynamic>::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,updateBuffers,(void))

void FlxTilemap_obj::drawTilemap( ::flixel::tile::FlxTilemapBuffer Buffer, ::flixel::FlxCamera Camera){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_889_drawTilemap)
HXLINE( 890)		bool isColored;
HXDLIN( 890)		if ((this->alpha == 1)) {
HXLINE( 890)			isColored = (this->color != 16777215);
            		}
            		else {
HXLINE( 890)			isColored = true;
            		}
HXLINE( 893)		Float drawX = ( (Float)(0) );
HXLINE( 894)		Float drawY = ( (Float)(0) );
HXLINE( 895)		Float scaledWidth = ( (Float)(0) );
HXLINE( 896)		Float scaledHeight = ( (Float)(0) );
HXLINE( 897)		 ::flixel::graphics::tile::FlxDrawQuadsItem drawItem = null();
HXLINE( 899)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 901)			Buffer->fill(null());
            		}
            		else {
HXLINE( 905)			{
HXLINE( 905)				 ::flixel::math::FlxPoint _this = this->getScreenPosition(this->_point,Camera)->subtractPoint(this->offset);
HXDLIN( 905)				 ::openfl::geom::Point FlashPoint = this->_helperPoint;
HXDLIN( 905)				if (hx::IsNull( FlashPoint )) {
HXLINE( 905)					FlashPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            				}
HXDLIN( 905)				FlashPoint->x = _this->x;
HXDLIN( 905)				FlashPoint->y = _this->y;
            			}
HXLINE( 907)			Float _hx_tmp;
HXDLIN( 907)			if (this->isPixelPerfectRender(Camera)) {
HXLINE( 907)				_hx_tmp = ( (Float)(::Math_obj::floor(this->_helperPoint->x)) );
            			}
            			else {
HXLINE( 907)				_hx_tmp = this->_helperPoint->x;
            			}
HXDLIN( 907)			this->_helperPoint->x = _hx_tmp;
HXLINE( 908)			Float _hx_tmp1;
HXDLIN( 908)			if (this->isPixelPerfectRender(Camera)) {
HXLINE( 908)				_hx_tmp1 = ( (Float)(::Math_obj::floor(this->_helperPoint->y)) );
            			}
            			else {
HXLINE( 908)				_hx_tmp1 = this->_helperPoint->y;
            			}
HXDLIN( 908)			this->_helperPoint->y = _hx_tmp1;
HXLINE( 910)			scaledWidth = this->_scaledTileWidth;
HXLINE( 911)			scaledHeight = this->_scaledTileHeight;
HXLINE( 913)			bool hasColorOffsets;
HXDLIN( 913)			if (hx::IsNotNull( this->colorTransform )) {
HXLINE( 913)				hasColorOffsets = ::flixel::util::FlxColorTransformUtil_obj::hasRGBAOffsets(this->colorTransform);
            			}
            			else {
HXLINE( 913)				hasColorOffsets = false;
            			}
HXLINE( 914)			drawItem = Camera->startQuadBatch(this->graphic,isColored,hasColorOffsets,this->blend,this->antialiasing,this->shader);
            		}
HXLINE( 918)		this->_point->set_x(((((Camera->scroll->x * this->scrollFactor->x) - this->x) - this->offset->x) + Camera->viewOffsetX));
HXLINE( 919)		this->_point->set_y(((((Camera->scroll->y * this->scrollFactor->y) - this->y) - this->offset->y) + Camera->viewOffsetY));
HXLINE( 921)		int screenXInTiles = ::Math_obj::floor((this->_point->x / this->_scaledTileWidth));
HXLINE( 922)		int screenYInTiles = ::Math_obj::floor((this->_point->y / this->_scaledTileHeight));
HXLINE( 923)		int screenRows = Buffer->rows;
HXLINE( 924)		int screenColumns = Buffer->columns;
HXLINE( 927)		 ::Dynamic Max = (this->widthInTiles - screenColumns);
HXDLIN( 927)		Float lowerBound;
HXDLIN( 927)		if ((screenXInTiles < 0)) {
HXLINE( 927)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXLINE( 927)			lowerBound = ( (Float)(screenXInTiles) );
            		}
HXDLIN( 927)		Float screenXInTiles1;
HXDLIN( 927)		bool screenXInTiles2;
HXDLIN( 927)		if (hx::IsNotNull( Max )) {
HXLINE( 927)			screenXInTiles2 = hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE( 927)			screenXInTiles2 = false;
            		}
HXDLIN( 927)		if (screenXInTiles2) {
HXLINE( 927)			screenXInTiles1 = ( (Float)(Max) );
            		}
            		else {
HXLINE( 927)			screenXInTiles1 = lowerBound;
            		}
HXDLIN( 927)		screenXInTiles = ::Std_obj::_hx_int(screenXInTiles1);
HXLINE( 928)		 ::Dynamic Max1 = (this->heightInTiles - screenRows);
HXDLIN( 928)		Float lowerBound1;
HXDLIN( 928)		if ((screenYInTiles < 0)) {
HXLINE( 928)			lowerBound1 = ( (Float)(0) );
            		}
            		else {
HXLINE( 928)			lowerBound1 = ( (Float)(screenYInTiles) );
            		}
HXDLIN( 928)		Float screenYInTiles1;
HXDLIN( 928)		bool screenYInTiles2;
HXDLIN( 928)		if (hx::IsNotNull( Max1 )) {
HXLINE( 928)			screenYInTiles2 = hx::IsGreater( lowerBound1,Max1 );
            		}
            		else {
HXLINE( 928)			screenYInTiles2 = false;
            		}
HXDLIN( 928)		if (screenYInTiles2) {
HXLINE( 928)			screenYInTiles1 = ( (Float)(Max1) );
            		}
            		else {
HXLINE( 928)			screenYInTiles1 = lowerBound1;
            		}
HXDLIN( 928)		screenYInTiles = ::Std_obj::_hx_int(screenYInTiles1);
HXLINE( 930)		int rowIndex = ((screenYInTiles * this->widthInTiles) + screenXInTiles);
HXLINE( 931)		this->_flashPoint->y = ( (Float)(0) );
HXLINE( 932)		int columnIndex;
HXLINE( 933)		 ::flixel::tile::FlxTile tile;
HXLINE( 934)		 ::flixel::graphics::frames::FlxFrame frame;
HXLINE( 937)		 ::openfl::display::BitmapData debugTile;
HXLINE( 940)		{
HXLINE( 940)			int _g = 0;
HXDLIN( 940)			int _g1 = screenRows;
HXDLIN( 940)			while((_g < _g1)){
HXLINE( 940)				_g = (_g + 1);
HXDLIN( 940)				int row = (_g - 1);
HXLINE( 942)				columnIndex = rowIndex;
HXLINE( 943)				this->_flashPoint->x = ( (Float)(0) );
HXLINE( 945)				{
HXLINE( 945)					int _g2 = 0;
HXDLIN( 945)					int _g11 = screenColumns;
HXDLIN( 945)					while((_g2 < _g11)){
HXLINE( 945)						_g2 = (_g2 + 1);
HXDLIN( 945)						int column = (_g2 - 1);
HXLINE( 947)						tile = Dynamic( this->_tileObjects->__get(this->_data->__get(columnIndex))).StaticCast<  ::flixel::tile::FlxTile >();
HXLINE( 949)						bool _hx_tmp2;
HXDLIN( 949)						bool _hx_tmp3;
HXDLIN( 949)						if (hx::IsNotNull( tile )) {
HXLINE( 949)							_hx_tmp3 = tile->visible;
            						}
            						else {
HXLINE( 949)							_hx_tmp3 = false;
            						}
HXDLIN( 949)						if (_hx_tmp3) {
HXLINE( 949)							_hx_tmp2 = (tile->frame->type != 2);
            						}
            						else {
HXLINE( 949)							_hx_tmp2 = false;
            						}
HXDLIN( 949)						if (_hx_tmp2) {
HXLINE( 951)							frame = tile->frame;
HXLINE( 953)							if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 955)								frame->paint(Buffer->pixels,this->_flashPoint,true,null());
HXLINE( 958)								bool _hx_tmp4;
HXDLIN( 958)								if (::flixel::FlxG_obj::debugger->drawDebug) {
HXLINE( 958)									_hx_tmp4 = !(this->ignoreDrawDebug);
            								}
            								else {
HXLINE( 958)									_hx_tmp4 = false;
            								}
HXDLIN( 958)								if (_hx_tmp4) {
HXLINE( 960)									if ((tile->allowCollisions <= 0)) {
HXLINE( 962)										debugTile = this->_debugTileNotSolid;
            									}
            									else {
HXLINE( 964)										if ((tile->allowCollisions != 4369)) {
HXLINE( 966)											debugTile = this->_debugTilePartial;
            										}
            										else {
HXLINE( 970)											debugTile = this->_debugTileSolid;
            										}
            									}
HXLINE( 973)									{
HXLINE( 973)										 ::flixel::math::FlxPoint _this1 = this->offset;
HXDLIN( 973)										 ::openfl::geom::Point FlashPoint1 = this->_flashPoint;
HXDLIN( 973)										 ::openfl::geom::Point FlashPoint2 = FlashPoint1;
HXDLIN( 973)										FlashPoint2->x = (FlashPoint2->x + _this1->x);
HXDLIN( 973)										 ::openfl::geom::Point FlashPoint3 = FlashPoint1;
HXDLIN( 973)										FlashPoint3->y = (FlashPoint3->y + _this1->y);
            									}
HXLINE( 974)									Buffer->pixels->copyPixels(debugTile,this->_debugRect,this->_flashPoint,null(),null(),true);
HXLINE( 975)									{
HXLINE( 975)										 ::flixel::math::FlxPoint _this2 = this->offset;
HXDLIN( 975)										 ::openfl::geom::Point FlashPoint4 = this->_flashPoint;
HXDLIN( 975)										 ::openfl::geom::Point FlashPoint5 = FlashPoint4;
HXDLIN( 975)										FlashPoint5->x = (FlashPoint5->x - _this2->x);
HXDLIN( 975)										 ::openfl::geom::Point FlashPoint6 = FlashPoint4;
HXDLIN( 975)										FlashPoint6->y = (FlashPoint6->y - _this2->y);
            									}
            								}
            							}
            							else {
HXLINE( 981)								drawX = (this->_helperPoint->x + (( (Float)(hx::Mod(columnIndex,this->widthInTiles)) ) * scaledWidth));
HXLINE( 982)								drawY = (this->_helperPoint->y + (( (Float)(::Math_obj::floor((( (Float)(columnIndex) ) / ( (Float)(this->widthInTiles) )))) ) * scaledHeight));
HXLINE( 984)								this->_matrix->identity();
HXLINE( 986)								if ((frame->angle != 0)) {
HXLINE( 988)									frame->prepareMatrix(this->_matrix,null(),null(),null());
            								}
HXLINE( 991)								Float scaleX = this->scale->x;
HXLINE( 992)								Float scaleY = this->scale->y;
HXLINE( 994)								if (this->useScaleHack) {
HXLINE( 996)									scaleX = (scaleX + (( (Float)(1) ) / (frame->sourceSize->x * Camera->totalScaleX)));
HXLINE( 997)									scaleY = (scaleY + (( (Float)(1) ) / (frame->sourceSize->y * Camera->totalScaleY)));
            								}
HXLINE(1000)								this->_matrix->scale(scaleX,scaleY);
HXLINE(1001)								this->_matrix->translate(drawX,drawY);
HXLINE(1003)								drawItem->addQuad(frame,this->_matrix,this->colorTransform);
            							}
            						}
HXLINE(1007)						if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1008)							 ::openfl::geom::Point _hx_tmp5 = this->_flashPoint;
HXDLIN(1008)							_hx_tmp5->x = (_hx_tmp5->x + this->_tileWidth);
            						}
HXLINE(1010)						columnIndex = (columnIndex + 1);
            					}
            				}
HXLINE(1013)				if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1014)					 ::openfl::geom::Point _hx_tmp6 = this->_flashPoint;
HXDLIN(1014)					_hx_tmp6->y = (_hx_tmp6->y + this->_tileHeight);
            				}
HXLINE(1015)				rowIndex = (rowIndex + this->widthInTiles);
            			}
            		}
HXLINE(1018)		Buffer->x = (( (Float)(screenXInTiles) ) * this->_scaledTileWidth);
HXLINE(1019)		Buffer->y = (( (Float)(screenYInTiles) ) * this->_scaledTileHeight);
HXLINE(1021)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1023)			if (isColored) {
HXLINE(1024)				Buffer->colorTransform(this->colorTransform);
            			}
HXLINE(1025)			Buffer->blend = this->blend;
            		}
HXLINE(1028)		Buffer->dirty = false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTilemap_obj,drawTilemap,(void))

 ::openfl::display::BitmapData FlxTilemap_obj::makeDebugTile(int color){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1037_makeDebugTile)
HXLINE(1038)		if (::flixel::FlxG_obj::renderTile) {
HXLINE(1039)			return null();
            		}
HXLINE(1041)		 ::openfl::display::BitmapData debugTile =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->_tileWidth,this->_tileHeight,true,0);
HXLINE(1042)		this->drawDebugTile(debugTile,color);
HXLINE(1043)		return debugTile;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,makeDebugTile,return )

void FlxTilemap_obj::drawDebugTile( ::openfl::display::BitmapData debugTile,int color){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1048_drawDebugTile)
HXDLIN(1048)		if ((color != 0)) {
HXLINE(1050)			 ::openfl::display::Graphics gfx = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXLINE(1051)			gfx->clear();
HXLINE(1052)			gfx->moveTo(( (Float)(0) ),( (Float)(0) ));
HXLINE(1053)			gfx->lineStyle(1,color,((Float)0.5),null(),null(),null(),null(),null());
HXLINE(1054)			gfx->lineTo(( (Float)((this->_tileWidth - 1)) ),( (Float)(0) ));
HXLINE(1055)			gfx->lineTo(( (Float)((this->_tileWidth - 1)) ),( (Float)((this->_tileHeight - 1)) ));
HXLINE(1056)			gfx->lineTo(( (Float)(0) ),( (Float)((this->_tileHeight - 1)) ));
HXLINE(1057)			gfx->lineTo(( (Float)(0) ),( (Float)(0) ));
HXLINE(1059)			debugTile->draw(::flixel::util::FlxSpriteUtil_obj::flashGfxSprite,null(),null(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTilemap_obj,drawDebugTile,(void))

void FlxTilemap_obj::onDrawDebugChanged(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1065_onDrawDebugChanged)
HXDLIN(1065)		this->setDirty(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,onDrawDebugChanged,(void))

void FlxTilemap_obj::updateTile(int Index){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1075_updateTile)
HXLINE(1076)		 ::flixel::tile::FlxTile tile = Dynamic( this->_tileObjects->__get(Index)).StaticCast<  ::flixel::tile::FlxTile >();
HXLINE(1077)		bool _hx_tmp;
HXDLIN(1077)		if (hx::IsNotNull( tile )) {
HXLINE(1077)			_hx_tmp = !(tile->visible);
            		}
            		else {
HXLINE(1077)			_hx_tmp = true;
            		}
HXDLIN(1077)		if (_hx_tmp) {
HXLINE(1078)			return;
            		}
HXLINE(1080)		tile->frame = this->frames->frames->__get((Index - this->_startingIndex)).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
            	}


 ::flixel::tile::FlxTilemapBuffer FlxTilemap_obj::createBuffer( ::flixel::FlxCamera camera){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1084_createBuffer)
HXLINE(1085)		 ::flixel::tile::FlxTilemapBuffer buffer =  ::flixel::tile::FlxTilemapBuffer_obj::__alloc( HX_CTX ,this->_tileWidth,this->_tileHeight,this->widthInTiles,this->heightInTiles,camera,this->scale->x,this->scale->y);
HXLINE(1086)		buffer->pixelPerfectRender = this->pixelPerfectRender;
HXLINE(1087)		buffer->antialiasing = this->antialiasing;
HXLINE(1088)		return buffer;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,createBuffer,return )

bool FlxTilemap_obj::set_antialiasing(bool value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1092_set_antialiasing)
HXLINE(1093)		{
HXLINE(1093)			int _g = 0;
HXDLIN(1093)			::Array< ::Dynamic> _g1 = this->_buffers;
HXDLIN(1093)			while((_g < _g1->length)){
HXLINE(1093)				 ::flixel::tile::FlxTilemapBuffer buffer = _g1->__get(_g).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXDLIN(1093)				_g = (_g + 1);
HXLINE(1094)				buffer->antialiasing = value;
            			}
            		}
HXLINE(1095)		return (this->antialiasing = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_antialiasing,return )

 ::flixel::graphics::FlxGraphic FlxTilemap_obj::set_graphic( ::flixel::graphics::FlxGraphic Value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1103_set_graphic)
HXLINE(1105)		if (hx::IsNotEq( this->graphic,Value )) {
HXLINE(1108)			if (hx::IsNotNull( Value )) {
HXLINE(1109)				 ::flixel::graphics::FlxGraphic _g = Value;
HXDLIN(1109)				_g->set_useCount((_g->get_useCount() + 1));
            			}
HXLINE(1112)			if (hx::IsNotNull( this->graphic )) {
HXLINE(1113)				 ::flixel::graphics::FlxGraphic _g1 = this->graphic;
HXDLIN(1113)				_g1->set_useCount((_g1->get_useCount() - 1));
            			}
            		}
HXLINE(1116)		return (this->graphic = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_graphic,return )

bool FlxTilemap_obj::set_pixelPerfectRender(bool Value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1120_set_pixelPerfectRender)
HXLINE(1121)		if (hx::IsNotNull( this->_buffers )) {
HXLINE(1122)			int _g = 0;
HXDLIN(1122)			::Array< ::Dynamic> _g1 = this->_buffers;
HXDLIN(1122)			while((_g < _g1->length)){
HXLINE(1122)				 ::flixel::tile::FlxTilemapBuffer buffer = _g1->__get(_g).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXDLIN(1122)				_g = (_g + 1);
HXLINE(1123)				buffer->pixelPerfectRender = Value;
            			}
            		}
HXLINE(1125)		return ( (bool)((this->pixelPerfectRender = Value)) );
            	}


Float FlxTilemap_obj::set_alpha(Float Alpha){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1129_set_alpha)
HXLINE(1130)		Float lowerBound;
HXDLIN(1130)		if ((Alpha < 0)) {
HXLINE(1130)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXLINE(1130)			lowerBound = Alpha;
            		}
HXDLIN(1130)		Float _hx_tmp;
HXDLIN(1130)		if ((lowerBound > 1)) {
HXLINE(1130)			_hx_tmp = ( (Float)(1) );
            		}
            		else {
HXLINE(1130)			_hx_tmp = lowerBound;
            		}
HXDLIN(1130)		this->alpha = _hx_tmp;
HXLINE(1131)		this->updateColorTransform();
HXLINE(1132)		return this->alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_alpha,return )

int FlxTilemap_obj::set_color(int Color){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1136_set_color)
HXLINE(1137)		if ((this->color == Color)) {
HXLINE(1138)			return Color;
            		}
HXLINE(1140)		this->color = Color;
HXLINE(1141)		this->updateColorTransform();
HXLINE(1142)		return this->color;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_color,return )

void FlxTilemap_obj::updateColorTransform(){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1146_updateColorTransform)
HXLINE(1147)		if (hx::IsNull( this->colorTransform )) {
HXLINE(1148)			this->colorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1150)		bool _hx_tmp;
HXDLIN(1150)		if ((this->alpha == 1)) {
HXLINE(1150)			_hx_tmp = (this->color != 16777215);
            		}
            		else {
HXLINE(1150)			_hx_tmp = true;
            		}
HXDLIN(1150)		if (_hx_tmp) {
HXLINE(1151)			::flixel::util::FlxColorTransformUtil_obj::setMultipliers(this->colorTransform,(( (Float)(((this->color >> 16) & 255)) ) / ( (Float)(255) )),(( (Float)(((this->color >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this->color & 255)) ) / ( (Float)(255) )),this->alpha);
            		}
            		else {
HXLINE(1153)			::flixel::util::FlxColorTransformUtil_obj::setMultipliers(this->colorTransform,( (Float)(1) ),( (Float)(1) ),( (Float)(1) ),( (Float)(1) ));
            		}
HXLINE(1155)		this->setDirty(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,updateColorTransform,(void))

 ::Dynamic FlxTilemap_obj::set_blend( ::Dynamic Value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1159_set_blend)
HXLINE(1160)		this->setDirty(null());
HXLINE(1161)		return (this->blend = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_blend,return )

void FlxTilemap_obj::setScaleXYCallback( ::flixel::math::FlxPoint Scale){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1165_setScaleXYCallback)
HXLINE(1166)		this->setScaleXCallback(Scale);
HXLINE(1167)		this->setScaleYCallback(Scale);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,setScaleXYCallback,(void))

void FlxTilemap_obj::setScaleXCallback( ::flixel::math::FlxPoint Scale){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1171_setScaleXCallback)
HXLINE(1172)		this->_scaledTileWidth = (( (Float)(this->_tileWidth) ) * this->scale->x);
HXLINE(1173)		this->set_width((( (Float)(this->widthInTiles) ) * this->_scaledTileWidth));
HXLINE(1175)		if (hx::IsNull( this->get_cameras() )) {
HXLINE(1176)			return;
            		}
HXLINE(1178)		{
HXLINE(1178)			int _g = 0;
HXDLIN(1178)			int _g1 = this->get_cameras()->length;
HXDLIN(1178)			while((_g < _g1)){
HXLINE(1178)				_g = (_g + 1);
HXDLIN(1178)				int i = (_g - 1);
HXLINE(1179)				if (hx::IsNotNull( this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >() )) {
HXLINE(1180)					 ::flixel::tile::FlxTilemapBuffer _hx_tmp = this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXDLIN(1180)					int _hx_tmp1 = this->_tileWidth;
HXDLIN(1180)					int _hx_tmp2 = this->widthInTiles;
HXDLIN(1180)					Float _hx_tmp3 = this->scale->x;
HXDLIN(1180)					_hx_tmp->updateColumns(_hx_tmp1,_hx_tmp2,_hx_tmp3,this->get_cameras()->__get(i).StaticCast<  ::flixel::FlxCamera >());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,setScaleXCallback,(void))

void FlxTilemap_obj::setScaleYCallback( ::flixel::math::FlxPoint Scale){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1184_setScaleYCallback)
HXLINE(1185)		this->_scaledTileHeight = (( (Float)(this->_tileHeight) ) * this->scale->y);
HXLINE(1186)		this->set_height((( (Float)(this->heightInTiles) ) * this->_scaledTileHeight));
HXLINE(1188)		if (hx::IsNull( this->get_cameras() )) {
HXLINE(1189)			return;
            		}
HXLINE(1191)		{
HXLINE(1191)			int _g = 0;
HXDLIN(1191)			int _g1 = this->get_cameras()->length;
HXDLIN(1191)			while((_g < _g1)){
HXLINE(1191)				_g = (_g + 1);
HXDLIN(1191)				int i = (_g - 1);
HXLINE(1192)				if (hx::IsNotNull( this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >() )) {
HXLINE(1193)					 ::flixel::tile::FlxTilemapBuffer _hx_tmp = this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXDLIN(1193)					int _hx_tmp1 = this->_tileHeight;
HXDLIN(1193)					int _hx_tmp2 = this->heightInTiles;
HXDLIN(1193)					Float _hx_tmp3 = this->scale->y;
HXDLIN(1193)					_hx_tmp->updateRows(_hx_tmp1,_hx_tmp2,_hx_tmp3,this->get_cameras()->__get(i).StaticCast<  ::flixel::FlxCamera >());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,setScaleYCallback,(void))

 ::flixel::FlxSprite FlxTilemap_obj::defaultTileToSprite( ::Dynamic TileProperties){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1203_defaultTileToSprite)
HXLINE(1204)		 ::flixel::FlxSprite tileSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,TileProperties->__Field(HX_("x",78,00,00,00),hx::paccDynamic),TileProperties->__Field(HX_("y",79,00,00,00),hx::paccDynamic),null());
HXLINE(1205)		tileSprite->set_frames(( ( ::flixel::graphics::frames::FlxFramesCollection)(TileProperties->__Field(HX_("graphic",a8,5a,07,74),hx::paccDynamic)) ));
HXLINE(1206)		{
HXLINE(1206)			 ::flixel::math::FlxPoint _this = tileSprite->scale;
HXDLIN(1206)			 ::flixel::math::FlxPoint point = ( ( ::flixel::math::FlxPoint)(TileProperties->__Field(HX_("scale",8a,ce,ce,78),hx::paccDynamic)) );
HXDLIN(1206)			_this->set_x(point->x);
HXDLIN(1206)			_this->set_y(point->y);
HXDLIN(1206)			if (point->_weak) {
HXLINE(1206)				point->put();
            			}
            		}
HXLINE(1207)		TileProperties->__SetField(HX_("scale",8a,ce,ce,78),::flixel::util::FlxDestroyUtil_obj::put( ::Dynamic(TileProperties->__Field(HX_("scale",8a,ce,ce,78),hx::paccDynamic))),hx::paccDynamic);
HXLINE(1208)		tileSprite->set_alpha(( (Float)(TileProperties->__Field(HX_("alpha",5e,a7,96,21),hx::paccDynamic)) ));
HXLINE(1209)		tileSprite->set_blend(TileProperties->__Field(HX_("blend",51,e8,f4,b4),hx::paccDynamic));
HXLINE(1210)		return tileSprite;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,defaultTileToSprite,return )

int FlxTilemap_obj::set_allowCollisions(int Value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1214_set_allowCollisions)
HXLINE(1215)		{
HXLINE(1215)			int _g = 0;
HXDLIN(1215)			::Array< ::Dynamic> _g1 = this->_tileObjects;
HXDLIN(1215)			while((_g < _g1->length)){
HXLINE(1215)				 ::flixel::tile::FlxTile tile = _g1->__get(_g).StaticCast<  ::flixel::tile::FlxTile >();
HXDLIN(1215)				_g = (_g + 1);
HXLINE(1216)				if ((tile->index >= this->_collideIndex)) {
HXLINE(1217)					tile->set_allowCollisions(Value);
            				}
            			}
            		}
HXLINE(1219)		return this->super::set_allowCollisions(Value);
            	}


int FlxTilemap_obj::set_debugBoundingBoxColorSolid(int color){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1224_set_debugBoundingBoxColorSolid)
HXLINE(1225)		this->super::set_debugBoundingBoxColorSolid(color);
HXLINE(1226)		this->updateDebugTileBoundingBoxSolid();
HXLINE(1227)		return color;
            	}


int FlxTilemap_obj::set_debugBoundingBoxColorNotSolid(int color){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1231_set_debugBoundingBoxColorNotSolid)
HXLINE(1232)		this->super::set_debugBoundingBoxColorNotSolid(color);
HXLINE(1233)		this->updateDebugTileBoundingBoxNotSolid();
HXLINE(1234)		return color;
            	}


int FlxTilemap_obj::set_debugBoundingBoxColorPartial(int color){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1238_set_debugBoundingBoxColorPartial)
HXLINE(1239)		this->super::set_debugBoundingBoxColorPartial(color);
HXLINE(1240)		this->updateDebugTileBoundingBoxPartial();
HXLINE(1241)		return color;
            	}



hx::ObjectPtr< FlxTilemap_obj > FlxTilemap_obj::__new() {
	hx::ObjectPtr< FlxTilemap_obj > __this = new FlxTilemap_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FlxTilemap_obj > FlxTilemap_obj::__alloc(hx::Ctx *_hx_ctx) {
	FlxTilemap_obj *__this = (FlxTilemap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxTilemap_obj), true, "flixel.tile.FlxTilemap"));
	*(void **)__this = FlxTilemap_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxTilemap_obj::FlxTilemap_obj()
{
}

void FlxTilemap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTilemap);
	HX_MARK_MEMBER_NAME(useScaleHack,"useScaleHack");
	HX_MARK_MEMBER_NAME(scale,"scale");
	HX_MARK_MEMBER_NAME(antialiasing,"antialiasing");
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(frames,"frames");
	HX_MARK_MEMBER_NAME(graphic,"graphic");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_MEMBER_NAME(colorTransform,"colorTransform");
	HX_MARK_MEMBER_NAME(blend,"blend");
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_MARK_MEMBER_NAME(_flashRect,"_flashRect");
	HX_MARK_MEMBER_NAME(_buffers,"_buffers");
	HX_MARK_MEMBER_NAME(_tileWidth,"_tileWidth");
	HX_MARK_MEMBER_NAME(_tileHeight,"_tileHeight");
	HX_MARK_MEMBER_NAME(_scaledTileWidth,"_scaledTileWidth");
	HX_MARK_MEMBER_NAME(_scaledTileHeight,"_scaledTileHeight");
	HX_MARK_MEMBER_NAME(_debugTileNotSolid,"_debugTileNotSolid");
	HX_MARK_MEMBER_NAME(_debugTilePartial,"_debugTilePartial");
	HX_MARK_MEMBER_NAME(_debugTileSolid,"_debugTileSolid");
	HX_MARK_MEMBER_NAME(_debugRect,"_debugRect");
	HX_MARK_MEMBER_NAME(_helperPoint,"_helperPoint");
	HX_MARK_MEMBER_NAME(_matrix,"_matrix");
	HX_MARK_MEMBER_NAME(_checkBufferChanges,"_checkBufferChanges");
	 ::flixel::tile::FlxBaseTilemap_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTilemap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(useScaleHack,"useScaleHack");
	HX_VISIT_MEMBER_NAME(scale,"scale");
	HX_VISIT_MEMBER_NAME(antialiasing,"antialiasing");
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(frames,"frames");
	HX_VISIT_MEMBER_NAME(graphic,"graphic");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
	HX_VISIT_MEMBER_NAME(colorTransform,"colorTransform");
	HX_VISIT_MEMBER_NAME(blend,"blend");
	HX_VISIT_MEMBER_NAME(shader,"shader");
	HX_VISIT_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_VISIT_MEMBER_NAME(_flashRect,"_flashRect");
	HX_VISIT_MEMBER_NAME(_buffers,"_buffers");
	HX_VISIT_MEMBER_NAME(_tileWidth,"_tileWidth");
	HX_VISIT_MEMBER_NAME(_tileHeight,"_tileHeight");
	HX_VISIT_MEMBER_NAME(_scaledTileWidth,"_scaledTileWidth");
	HX_VISIT_MEMBER_NAME(_scaledTileHeight,"_scaledTileHeight");
	HX_VISIT_MEMBER_NAME(_debugTileNotSolid,"_debugTileNotSolid");
	HX_VISIT_MEMBER_NAME(_debugTilePartial,"_debugTilePartial");
	HX_VISIT_MEMBER_NAME(_debugTileSolid,"_debugTileSolid");
	HX_VISIT_MEMBER_NAME(_debugRect,"_debugRect");
	HX_VISIT_MEMBER_NAME(_helperPoint,"_helperPoint");
	HX_VISIT_MEMBER_NAME(_matrix,"_matrix");
	HX_VISIT_MEMBER_NAME(_checkBufferChanges,"_checkBufferChanges");
	 ::flixel::tile::FlxBaseTilemap_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxTilemap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ray") ) { return hx::Val( ray_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale ); }
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"alpha") ) { return hx::Val( alpha ); }
		if (HX_FIELD_EQ(inName,"blend") ) { return hx::Val( blend ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { return hx::Val( offset ); }
		if (HX_FIELD_EQ(inName,"frames") ) { return hx::Val( frames ); }
		if (HX_FIELD_EQ(inName,"shader") ) { return hx::Val( shader ); }
		if (HX_FIELD_EQ(inName,"follow") ) { return hx::Val( follow_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"graphic") ) { return hx::Val( graphic ); }
		if (HX_FIELD_EQ(inName,"_matrix") ) { return hx::Val( _matrix ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_buffers") ) { return hx::Val( _buffers ); }
		if (HX_FIELD_EQ(inName,"setDirty") ) { return hx::Val( setDirty_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"updateMap") ) { return hx::Val( updateMap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blend") ) { return hx::Val( set_blend_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_flashRect") ) { return hx::Val( _flashRect ); }
		if (HX_FIELD_EQ(inName,"_tileWidth") ) { return hx::Val( _tileWidth ); }
		if (HX_FIELD_EQ(inName,"_debugRect") ) { return hx::Val( _debugRect ); }
		if (HX_FIELD_EQ(inName,"set_frames") ) { return hx::Val( set_frames_dyn() ); }
		if (HX_FIELD_EQ(inName,"isOnScreen") ) { return hx::Val( isOnScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTile") ) { return hx::Val( updateTile_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { return hx::Val( _flashPoint ); }
		if (HX_FIELD_EQ(inName,"_tileHeight") ) { return hx::Val( _tileHeight ); }
		if (HX_FIELD_EQ(inName,"drawTilemap") ) { return hx::Val( drawTilemap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_graphic") ) { return hx::Val( set_graphic_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"useScaleHack") ) { return hx::Val( useScaleHack ); }
		if (HX_FIELD_EQ(inName,"antialiasing") ) { return hx::Val( antialiasing ); }
		if (HX_FIELD_EQ(inName,"_helperPoint") ) { return hx::Val( _helperPoint ); }
		if (HX_FIELD_EQ(inName,"tileToSprite") ) { return hx::Val( tileToSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"createBuffer") ) { return hx::Val( createBuffer_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onGameResized") ) { return hx::Val( onGameResized_dyn() ); }
		if (HX_FIELD_EQ(inName,"cacheGraphics") ) { return hx::Val( cacheGraphics_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTileCoords") ) { return hx::Val( getTileCoords_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateBuffers") ) { return hx::Val( updateBuffers_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeDebugTile") ) { return hx::Val( makeDebugTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawDebugTile") ) { return hx::Val( drawDebugTile_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform ); }
		if (HX_FIELD_EQ(inName,"refreshBuffers") ) { return hx::Val( refreshBuffers_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_debugTileSolid") ) { return hx::Val( _debugTileSolid ); }
		if (HX_FIELD_EQ(inName,"onCameraChanged") ) { return hx::Val( onCameraChanged_dyn() ); }
		if (HX_FIELD_EQ(inName,"initTileObjects") ) { return hx::Val( initTileObjects_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateDebugTile") ) { return hx::Val( updateDebugTile_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_scaledTileWidth") ) { return hx::Val( _scaledTileWidth ); }
		if (HX_FIELD_EQ(inName,"set_antialiasing") ) { return hx::Val( set_antialiasing_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_scaledTileHeight") ) { return hx::Val( _scaledTileHeight ); }
		if (HX_FIELD_EQ(inName,"_debugTilePartial") ) { return hx::Val( _debugTilePartial ); }
		if (HX_FIELD_EQ(inName,"computeDimensions") ) { return hx::Val( computeDimensions_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawDebugOnCamera") ) { return hx::Val( drawDebugOnCamera_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScaleXCallback") ) { return hx::Val( setScaleXCallback_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScaleYCallback") ) { return hx::Val( setScaleYCallback_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_debugTileNotSolid") ) { return hx::Val( _debugTileNotSolid ); }
		if (HX_FIELD_EQ(inName,"onDrawDebugChanged") ) { return hx::Val( onDrawDebugChanged_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScaleXYCallback") ) { return hx::Val( setScaleXYCallback_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_checkBufferChanges") ) { return hx::Val( _checkBufferChanges ); }
		if (HX_FIELD_EQ(inName,"defaultTileToSprite") ) { return hx::Val( defaultTileToSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_allowCollisions") ) { return hx::Val( set_allowCollisions_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"overlapsWithCallback") ) { return hx::Val( overlapsWithCallback_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTileIndexByCoords") ) { return hx::Val( getTileIndexByCoords_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTileCoordsByIndex") ) { return hx::Val( getTileCoordsByIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateColorTransform") ) { return hx::Val( updateColorTransform_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"set_pixelPerfectRender") ) { return hx::Val( set_pixelPerfectRender_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"set_debugBoundingBoxColorSolid") ) { return hx::Val( set_debugBoundingBoxColorSolid_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"updateDebugTileBoundingBoxSolid") ) { return hx::Val( updateDebugTileBoundingBoxSolid_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"set_debugBoundingBoxColorPartial") ) { return hx::Val( set_debugBoundingBoxColorPartial_dyn() ); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"updateDebugTileBoundingBoxPartial") ) { return hx::Val( updateDebugTileBoundingBoxPartial_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_debugBoundingBoxColorNotSolid") ) { return hx::Val( set_debugBoundingBoxColorNotSolid_dyn() ); }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"updateDebugTileBoundingBoxNotSolid") ) { return hx::Val( updateDebugTileBoundingBoxNotSolid_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxTilemap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { scale=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue.Cast< int >()) );color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue.Cast< Float >()) );alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blend") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blend(inValue.Cast<  ::Dynamic >()) );blend=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frames") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frames(inValue.Cast<  ::flixel::graphics::frames::FlxFramesCollection >()) );frames=inValue.Cast<  ::flixel::graphics::frames::FlxFramesCollection >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::flixel::graphics::tile::FlxGraphicsShader >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"graphic") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_graphic(inValue.Cast<  ::flixel::graphics::FlxGraphic >()) );graphic=inValue.Cast<  ::flixel::graphics::FlxGraphic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_matrix") ) { _matrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_buffers") ) { _buffers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_flashRect") ) { _flashRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tileWidth") ) { _tileWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_debugRect") ) { _debugRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { _flashPoint=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tileHeight") ) { _tileHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"useScaleHack") ) { useScaleHack=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"antialiasing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_antialiasing(inValue.Cast< bool >()) );antialiasing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_helperPoint") ) { _helperPoint=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { colorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_debugTileSolid") ) { _debugTileSolid=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_scaledTileWidth") ) { _scaledTileWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_scaledTileHeight") ) { _scaledTileHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_debugTilePartial") ) { _debugTilePartial=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_debugTileNotSolid") ) { _debugTileNotSolid=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_checkBufferChanges") ) { _checkBufferChanges=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTilemap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("useScaleHack",44,9c,16,98));
	outFields->push(HX_("scale",8a,ce,ce,78));
	outFields->push(HX_("antialiasing",f4,16,b3,48));
	outFields->push(HX_("offset",93,97,3f,60));
	outFields->push(HX_("frames",a6,af,85,ac));
	outFields->push(HX_("graphic",a8,5a,07,74));
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("alpha",5e,a7,96,21));
	outFields->push(HX_("colorTransform",89,d7,3f,ad));
	outFields->push(HX_("blend",51,e8,f4,b4));
	outFields->push(HX_("shader",25,bf,20,1d));
	outFields->push(HX_("_flashPoint",9f,1d,2a,b7));
	outFields->push(HX_("_flashRect",b5,c2,f3,5d));
	outFields->push(HX_("_buffers",f4,fc,48,eb));
	outFields->push(HX_("_tileWidth",b9,8f,60,b1));
	outFields->push(HX_("_tileHeight",d4,aa,6c,39));
	outFields->push(HX_("_scaledTileWidth",7f,28,09,38));
	outFields->push(HX_("_scaledTileHeight",4e,bf,49,86));
	outFields->push(HX_("_debugTileNotSolid",1a,df,89,53));
	outFields->push(HX_("_debugTilePartial",bf,14,2d,78));
	outFields->push(HX_("_debugTileSolid",e9,85,df,f6));
	outFields->push(HX_("_debugRect",d8,6c,95,8a));
	outFields->push(HX_("_helperPoint",03,e6,14,f8));
	outFields->push(HX_("_matrix",e0,47,3f,2a));
	outFields->push(HX_("_checkBufferChanges",1a,1a,89,0b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTilemap_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(FlxTilemap_obj,useScaleHack),HX_("useScaleHack",44,9c,16,98)},
	{hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(FlxTilemap_obj,scale),HX_("scale",8a,ce,ce,78)},
	{hx::fsBool,(int)offsetof(FlxTilemap_obj,antialiasing),HX_("antialiasing",f4,16,b3,48)},
	{hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(FlxTilemap_obj,offset),HX_("offset",93,97,3f,60)},
	{hx::fsObject /*  ::flixel::graphics::frames::FlxFramesCollection */ ,(int)offsetof(FlxTilemap_obj,frames),HX_("frames",a6,af,85,ac)},
	{hx::fsObject /*  ::flixel::graphics::FlxGraphic */ ,(int)offsetof(FlxTilemap_obj,graphic),HX_("graphic",a8,5a,07,74)},
	{hx::fsInt,(int)offsetof(FlxTilemap_obj,color),HX_("color",63,71,5c,4a)},
	{hx::fsFloat,(int)offsetof(FlxTilemap_obj,alpha),HX_("alpha",5e,a7,96,21)},
	{hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(int)offsetof(FlxTilemap_obj,colorTransform),HX_("colorTransform",89,d7,3f,ad)},
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxTilemap_obj,blend),HX_("blend",51,e8,f4,b4)},
	{hx::fsObject /*  ::flixel::graphics::tile::FlxGraphicsShader */ ,(int)offsetof(FlxTilemap_obj,shader),HX_("shader",25,bf,20,1d)},
	{hx::fsObject /*  ::openfl::geom::Point */ ,(int)offsetof(FlxTilemap_obj,_flashPoint),HX_("_flashPoint",9f,1d,2a,b7)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(FlxTilemap_obj,_flashRect),HX_("_flashRect",b5,c2,f3,5d)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxTilemap_obj,_buffers),HX_("_buffers",f4,fc,48,eb)},
	{hx::fsInt,(int)offsetof(FlxTilemap_obj,_tileWidth),HX_("_tileWidth",b9,8f,60,b1)},
	{hx::fsInt,(int)offsetof(FlxTilemap_obj,_tileHeight),HX_("_tileHeight",d4,aa,6c,39)},
	{hx::fsFloat,(int)offsetof(FlxTilemap_obj,_scaledTileWidth),HX_("_scaledTileWidth",7f,28,09,38)},
	{hx::fsFloat,(int)offsetof(FlxTilemap_obj,_scaledTileHeight),HX_("_scaledTileHeight",4e,bf,49,86)},
	{hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(FlxTilemap_obj,_debugTileNotSolid),HX_("_debugTileNotSolid",1a,df,89,53)},
	{hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(FlxTilemap_obj,_debugTilePartial),HX_("_debugTilePartial",bf,14,2d,78)},
	{hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(FlxTilemap_obj,_debugTileSolid),HX_("_debugTileSolid",e9,85,df,f6)},
	{hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(FlxTilemap_obj,_debugRect),HX_("_debugRect",d8,6c,95,8a)},
	{hx::fsObject /*  ::openfl::geom::Point */ ,(int)offsetof(FlxTilemap_obj,_helperPoint),HX_("_helperPoint",03,e6,14,f8)},
	{hx::fsObject /*  ::flixel::math::FlxMatrix */ ,(int)offsetof(FlxTilemap_obj,_matrix),HX_("_matrix",e0,47,3f,2a)},
	{hx::fsBool,(int)offsetof(FlxTilemap_obj,_checkBufferChanges),HX_("_checkBufferChanges",1a,1a,89,0b)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTilemap_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTilemap_obj_sMemberFields[] = {
	HX_("useScaleHack",44,9c,16,98),
	HX_("scale",8a,ce,ce,78),
	HX_("antialiasing",f4,16,b3,48),
	HX_("offset",93,97,3f,60),
	HX_("frames",a6,af,85,ac),
	HX_("graphic",a8,5a,07,74),
	HX_("color",63,71,5c,4a),
	HX_("alpha",5e,a7,96,21),
	HX_("colorTransform",89,d7,3f,ad),
	HX_("blend",51,e8,f4,b4),
	HX_("shader",25,bf,20,1d),
	HX_("_flashPoint",9f,1d,2a,b7),
	HX_("_flashRect",b5,c2,f3,5d),
	HX_("_buffers",f4,fc,48,eb),
	HX_("_tileWidth",b9,8f,60,b1),
	HX_("_tileHeight",d4,aa,6c,39),
	HX_("_scaledTileWidth",7f,28,09,38),
	HX_("_scaledTileHeight",4e,bf,49,86),
	HX_("_debugTileNotSolid",1a,df,89,53),
	HX_("_debugTilePartial",bf,14,2d,78),
	HX_("_debugTileSolid",e9,85,df,f6),
	HX_("_debugRect",d8,6c,95,8a),
	HX_("_helperPoint",03,e6,14,f8),
	HX_("_matrix",e0,47,3f,2a),
	HX_("_checkBufferChanges",1a,1a,89,0b),
	HX_("destroy",fa,2c,86,24),
	HX_("set_frames",e3,bd,8a,a0),
	HX_("onGameResized",3f,ef,13,ab),
	HX_("onCameraChanged",30,48,4e,5c),
	HX_("cacheGraphics",2d,61,95,fc),
	HX_("initTileObjects",16,be,45,2e),
	HX_("updateDebugTileBoundingBoxSolid",9c,41,64,d8),
	HX_("updateDebugTileBoundingBoxNotSolid",47,35,bd,4d),
	HX_("updateDebugTileBoundingBoxPartial",32,63,1e,51),
	HX_("updateDebugTile",d8,3f,d3,7f),
	HX_("computeDimensions",a4,a4,eb,f3),
	HX_("updateMap",13,e8,df,82),
	HX_("drawDebugOnCamera",f3,47,7b,cb),
	HX_("isOnScreen",f5,43,b9,a1),
	HX_("draw",04,2c,70,42),
	HX_("refreshBuffers",d8,b2,a5,26),
	HX_("setDirty",10,b9,04,e8),
	HX_("overlapsWithCallback",17,c3,72,a8),
	HX_("getTileIndexByCoords",03,79,8b,76),
	HX_("getTileCoordsByIndex",b9,63,25,a1),
	HX_("getTileCoords",22,d6,8d,89),
	HX_("follow",71,91,96,f9),
	HX_("ray",ea,d5,56,00),
	HX_("tileToSprite",2e,e9,26,c3),
	HX_("updateBuffers",6a,08,ff,7c),
	HX_("drawTilemap",8a,34,d7,8e),
	HX_("makeDebugTile",53,67,f1,28),
	HX_("drawDebugTile",7d,82,6f,8f),
	HX_("onDrawDebugChanged",44,e0,f1,9f),
	HX_("updateTile",d7,b5,b1,05),
	HX_("createBuffer",1c,fd,e9,f2),
	HX_("set_antialiasing",f1,f0,93,a3),
	HX_("set_graphic",cb,c1,6e,04),
	HX_("set_pixelPerfectRender",9a,4f,8f,bc),
	HX_("set_alpha",c1,ef,90,48),
	HX_("set_color",c6,b9,56,71),
	HX_("updateColorTransform",72,0f,d2,2f),
	HX_("set_blend",b4,30,ef,db),
	HX_("setScaleXYCallback",6e,fd,35,90),
	HX_("setScaleXCallback",b5,05,a2,03),
	HX_("setScaleYCallback",b6,6e,93,d6),
	HX_("defaultTileToSprite",8f,ab,7f,3f),
	HX_("set_allowCollisions",cd,8b,81,21),
	HX_("set_debugBoundingBoxColorSolid",19,c9,0b,4b),
	HX_("set_debugBoundingBoxColorNotSolid",ea,b9,e3,4b),
	HX_("set_debugBoundingBoxColorPartial",ef,83,54,62),
	::String(null()) };

hx::Class FlxTilemap_obj::__mClass;

void FlxTilemap_obj::__register()
{
	FlxTilemap_obj _hx_dummy;
	FlxTilemap_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("flixel.tile.FlxTilemap",2a,d5,63,29);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTilemap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTilemap_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTilemap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTilemap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace tile
