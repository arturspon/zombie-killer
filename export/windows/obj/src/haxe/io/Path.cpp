// Generated by Haxe 4.0.0-rc.2+77068e10c
#include <hxcpp.h>

#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c76bafa893b9a603_76_new,"haxe.io.Path","new",0x1b96d677,"haxe.io.Path.new","C:\\HaxeToolkit\\haxe\\std/haxe/io/Path.hx",76,0x4f1aa280)
HX_LOCAL_STACK_FRAME(_hx_pos_c76bafa893b9a603_115_toString,"haxe.io.Path","toString",0xc0ab5735,"haxe.io.Path.toString","C:\\HaxeToolkit\\haxe\\std/haxe/io/Path.hx",115,0x4f1aa280)
HX_LOCAL_STACK_FRAME(_hx_pos_c76bafa893b9a603_134_withoutDirectory,"haxe.io.Path","withoutDirectory",0xdf35ce8e,"haxe.io.Path.withoutDirectory","C:\\HaxeToolkit\\haxe\\std/haxe/io/Path.hx",134,0x4f1aa280)
HX_LOCAL_STACK_FRAME(_hx_pos_c76bafa893b9a603_147_directory,"haxe.io.Path","directory",0xbcfe23c4,"haxe.io.Path.directory","C:\\HaxeToolkit\\haxe\\std/haxe/io/Path.hx",147,0x4f1aa280)
HX_LOCAL_STACK_FRAME(_hx_pos_c76bafa893b9a603_190_join,"haxe.io.Path","join",0x05c781f3,"haxe.io.Path.join","C:\\HaxeToolkit\\haxe\\std/haxe/io/Path.hx",190,0x4f1aa280)
HX_LOCAL_STACK_FRAME(_hx_pos_c76bafa893b9a603_189_join,"haxe.io.Path","join",0x05c781f3,"haxe.io.Path.join","C:\\HaxeToolkit\\haxe\\std/haxe/io/Path.hx",189,0x4f1aa280)
HX_LOCAL_STACK_FRAME(_hx_pos_c76bafa893b9a603_210_normalize,"haxe.io.Path","normalize",0x585a68e4,"haxe.io.Path.normalize","C:\\HaxeToolkit\\haxe\\std/haxe/io/Path.hx",210,0x4f1aa280)
static const ::String _hx_array_data_4ec6cf05_11[] = {
	HX_("/",2f,00,00,00),
};
static const ::String _hx_array_data_4ec6cf05_12[] = {
	HX_(":",3a,00,00,00),
};
static const ::String _hx_array_data_4ec6cf05_13[] = {
	HX_("/",2f,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_c76bafa893b9a603_264_addTrailingSlash,"haxe.io.Path","addTrailingSlash",0x8b4f8e69,"haxe.io.Path.addTrailingSlash","C:\\HaxeToolkit\\haxe\\std/haxe/io/Path.hx",264,0x4f1aa280)
HX_LOCAL_STACK_FRAME(_hx_pos_c76bafa893b9a603_289_removeTrailingSlashes,"haxe.io.Path","removeTrailingSlashes",0x2dc73462,"haxe.io.Path.removeTrailingSlashes","C:\\HaxeToolkit\\haxe\\std/haxe/io/Path.hx",289,0x4f1aa280)
HX_LOCAL_STACK_FRAME(_hx_pos_c76bafa893b9a603_303_isAbsolute,"haxe.io.Path","isAbsolute",0xb396db4a,"haxe.io.Path.isAbsolute","C:\\HaxeToolkit\\haxe\\std/haxe/io/Path.hx",303,0x4f1aa280)
namespace haxe{
namespace io{

void Path_obj::__construct(::String path){
            	HX_STACKFRAME(&_hx_pos_c76bafa893b9a603_76_new)
HXLINE(  77)		::String _hx_switch_0 = path;
            		if (  (_hx_switch_0==HX_(".",2e,00,00,00)) ||  (_hx_switch_0==HX_("..",40,28,00,00)) ){
HXLINE(  79)			this->dir = path;
HXLINE(  80)			this->file = HX_("",00,00,00,00);
HXLINE(  81)			return;
HXLINE(  78)			goto _hx_goto_0;
            		}
            		_hx_goto_0:;
HXLINE(  83)		int c1 = path.lastIndexOf(HX_("/",2f,00,00,00),null());
HXLINE(  84)		int c2 = path.lastIndexOf(HX_("\\",5c,00,00,00),null());
HXLINE(  85)		if ((c1 < c2)) {
HXLINE(  86)			this->dir = path.substr(0,c2);
HXLINE(  87)			path = path.substr((c2 + 1),null());
HXLINE(  88)			this->backslash = true;
            		}
            		else {
HXLINE(  89)			if ((c2 < c1)) {
HXLINE(  90)				this->dir = path.substr(0,c1);
HXLINE(  91)				path = path.substr((c1 + 1),null());
            			}
            			else {
HXLINE(  93)				this->dir = null();
            			}
            		}
HXLINE(  94)		int cp = path.lastIndexOf(HX_(".",2e,00,00,00),null());
HXLINE(  95)		if ((cp != -1)) {
HXLINE(  96)			this->ext = path.substr((cp + 1),null());
HXLINE(  97)			this->file = path.substr(0,cp);
            		}
            		else {
HXLINE(  99)			this->ext = null();
HXLINE( 100)			this->file = path;
            		}
            	}

Dynamic Path_obj::__CreateEmpty() { return new Path_obj; }

void *Path_obj::_hx_vtable = 0;

Dynamic Path_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Path_obj > _hx_result = new Path_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Path_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x044b6ab5;
}

::String Path_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_c76bafa893b9a603_115_toString)
HXDLIN( 115)		::String _hx_tmp;
HXDLIN( 115)		if (hx::IsNull( this->dir )) {
HXDLIN( 115)			_hx_tmp = HX_("",00,00,00,00);
            		}
            		else {
HXDLIN( 115)			::String _hx_tmp1;
HXDLIN( 115)			if (this->backslash) {
HXDLIN( 115)				_hx_tmp1 = HX_("\\",5c,00,00,00);
            			}
            			else {
HXDLIN( 115)				_hx_tmp1 = HX_("/",2f,00,00,00);
            			}
HXDLIN( 115)			_hx_tmp = (this->dir + _hx_tmp1);
            		}
HXDLIN( 115)		::String _hx_tmp2;
HXDLIN( 115)		if (hx::IsNull( this->ext )) {
HXDLIN( 115)			_hx_tmp2 = HX_("",00,00,00,00);
            		}
            		else {
HXDLIN( 115)			_hx_tmp2 = (HX_(".",2e,00,00,00) + this->ext);
            		}
HXDLIN( 115)		return ((_hx_tmp + this->file) + _hx_tmp2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Path_obj,toString,return )

::String Path_obj::withoutDirectory(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_c76bafa893b9a603_134_withoutDirectory)
HXLINE( 135)		 ::haxe::io::Path s =  ::haxe::io::Path_obj::__alloc( HX_CTX ,path);
HXLINE( 136)		s->dir = null();
HXLINE( 137)		return s->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_obj,withoutDirectory,return )

::String Path_obj::directory(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_c76bafa893b9a603_147_directory)
HXLINE( 148)		 ::haxe::io::Path s =  ::haxe::io::Path_obj::__alloc( HX_CTX ,path);
HXLINE( 149)		if (hx::IsNull( s->dir )) {
HXLINE( 150)			return HX_("",00,00,00,00);
            		}
HXLINE( 151)		return s->dir;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_obj,directory,return )

::String Path_obj::join(::Array< ::String > paths){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		bool _hx_run(::String s){
            			HX_STACKFRAME(&_hx_pos_c76bafa893b9a603_190_join)
HXLINE( 190)			if (hx::IsNotNull( s )) {
HXLINE( 190)				return (s != HX_("",00,00,00,00));
            			}
            			else {
HXLINE( 190)				return false;
            			}
HXDLIN( 190)			return false;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_c76bafa893b9a603_189_join)
HXLINE( 190)		::Array< ::String > paths1 = paths->filter( ::Dynamic(new _hx_Closure_0()));
HXLINE( 191)		if ((paths1->length == 0)) {
HXLINE( 192)			return HX_("",00,00,00,00);
            		}
HXLINE( 194)		::String path = paths1->__get(0);
HXLINE( 195)		{
HXLINE( 195)			int _g = 1;
HXDLIN( 195)			int _g1 = paths1->length;
HXDLIN( 195)			while((_g < _g1)){
HXLINE( 195)				_g = (_g + 1);
HXDLIN( 195)				int i = (_g - 1);
HXLINE( 196)				path = ::haxe::io::Path_obj::addTrailingSlash(path);
HXLINE( 197)				path = (path + paths1->__get(i));
            			}
            		}
HXLINE( 199)		return ::haxe::io::Path_obj::normalize(path);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_obj,join,return )

::String Path_obj::normalize(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_c76bafa893b9a603_210_normalize)
HXLINE( 211)		::String slash = HX_("/",2f,00,00,00);
HXLINE( 212)		path = path.split(HX_("\\",5c,00,00,00))->join(slash);
HXLINE( 213)		if ((path == slash)) {
HXLINE( 213)			return slash;
            		}
HXLINE( 215)		::Array< ::String > target = ::Array_obj< ::String >::__new(0);
HXLINE( 217)		{
HXLINE( 217)			int _g = 0;
HXDLIN( 217)			::Array< ::String > _g1 = path.split(slash);
HXDLIN( 217)			while((_g < _g1->length)){
HXLINE( 217)				::String token = _g1->__get(_g);
HXDLIN( 217)				_g = (_g + 1);
HXLINE( 218)				bool _hx_tmp;
HXDLIN( 218)				bool _hx_tmp1;
HXDLIN( 218)				if ((token == HX_("..",40,28,00,00))) {
HXLINE( 218)					_hx_tmp1 = (target->length > 0);
            				}
            				else {
HXLINE( 218)					_hx_tmp1 = false;
            				}
HXDLIN( 218)				if (_hx_tmp1) {
HXLINE( 218)					_hx_tmp = (target->__get((target->length - 1)) != HX_("..",40,28,00,00));
            				}
            				else {
HXLINE( 218)					_hx_tmp = false;
            				}
HXDLIN( 218)				if (_hx_tmp) {
HXLINE( 219)					target->pop();
            				}
            				else {
HXLINE( 220)					if ((token == HX_("",00,00,00,00))) {
HXLINE( 221)						bool _hx_tmp2;
HXDLIN( 221)						if ((target->length <= 0)) {
HXLINE( 221)							_hx_tmp2 = hx::IsEq( path.charCodeAt(0),47 );
            						}
            						else {
HXLINE( 221)							_hx_tmp2 = true;
            						}
HXDLIN( 221)						if (_hx_tmp2) {
HXLINE( 222)							target->push(token);
            						}
            					}
            					else {
HXLINE( 224)						if ((token != HX_(".",2e,00,00,00))) {
HXLINE( 225)							target->push(token);
            						}
            					}
            				}
            			}
            		}
HXLINE( 229)		::String tmp = target->join(slash);
HXLINE( 230)		 ::StringBuf acc =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 231)		bool colon = false;
HXLINE( 232)		bool slashes = false;
HXLINE( 233)		{
HXLINE( 233)			int _g2 = 0;
HXDLIN( 233)			int _g3 = tmp.length;
HXDLIN( 233)			while((_g2 < _g3)){
HXLINE( 233)				_g2 = (_g2 + 1);
HXDLIN( 233)				int i = (_g2 - 1);
HXLINE( 234)				{
HXLINE( 234)					int _g21 = tmp.cca(i);
HXDLIN( 234)					switch((int)(_g21)){
            						case (int)47: {
HXLINE( 238)							if (!(colon)) {
HXLINE( 239)								slashes = true;
            							}
            							else {
HXLINE( 240)								int i1 = _g21;
HXDLIN( 240)								{
HXLINE( 241)									colon = false;
HXLINE( 242)									if (slashes) {
HXLINE( 243)										{
HXLINE( 243)											if (hx::IsNotNull( acc->charBuf )) {
HXLINE( 243)												acc->flush();
            											}
HXDLIN( 243)											if (hx::IsNull( acc->b )) {
HXLINE( 243)												acc->b = ::Array_obj< ::String >::fromData( _hx_array_data_4ec6cf05_11,1);
            											}
            											else {
HXLINE( 243)												acc->b->push(HX_("/",2f,00,00,00));
            											}
            										}
HXLINE( 244)										slashes = false;
            									}
HXLINE( 246)									{
HXLINE( 246)										if (hx::IsNull( acc->charBuf )) {
HXLINE( 246)											acc->charBuf = ::Array_obj< char >::__new();
            										}
HXDLIN( 246)										acc->charBuf->push(i1);
            									}
            								}
            							}
            						}
            						break;
            						case (int)58: {
HXLINE( 236)							{
HXLINE( 236)								if (hx::IsNotNull( acc->charBuf )) {
HXLINE( 236)									acc->flush();
            								}
HXDLIN( 236)								if (hx::IsNull( acc->b )) {
HXLINE( 236)									acc->b = ::Array_obj< ::String >::fromData( _hx_array_data_4ec6cf05_12,1);
            								}
            								else {
HXLINE( 236)									acc->b->push(HX_(":",3a,00,00,00));
            								}
            							}
HXLINE( 237)							colon = true;
            						}
            						break;
            						default:{
HXLINE( 240)							int i2 = _g21;
HXDLIN( 240)							{
HXLINE( 241)								colon = false;
HXLINE( 242)								if (slashes) {
HXLINE( 243)									{
HXLINE( 243)										if (hx::IsNotNull( acc->charBuf )) {
HXLINE( 243)											acc->flush();
            										}
HXDLIN( 243)										if (hx::IsNull( acc->b )) {
HXLINE( 243)											acc->b = ::Array_obj< ::String >::fromData( _hx_array_data_4ec6cf05_13,1);
            										}
            										else {
HXLINE( 243)											acc->b->push(HX_("/",2f,00,00,00));
            										}
            									}
HXLINE( 244)									slashes = false;
            								}
HXLINE( 246)								{
HXLINE( 246)									if (hx::IsNull( acc->charBuf )) {
HXLINE( 246)										acc->charBuf = ::Array_obj< char >::__new();
            									}
HXDLIN( 246)									acc->charBuf->push(i2);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 249)		return acc->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_obj,normalize,return )

::String Path_obj::addTrailingSlash(::String path){
            	HX_STACKFRAME(&_hx_pos_c76bafa893b9a603_264_addTrailingSlash)
HXLINE( 265)		if ((path.length == 0)) {
HXLINE( 266)			return HX_("/",2f,00,00,00);
            		}
HXLINE( 267)		int c1 = path.lastIndexOf(HX_("/",2f,00,00,00),null());
HXLINE( 268)		int c2 = path.lastIndexOf(HX_("\\",5c,00,00,00),null());
HXLINE( 269)		if ((c1 < c2)) {
HXLINE( 270)			if ((c2 != (path.length - 1))) {
HXLINE( 270)				return (path + HX_("\\",5c,00,00,00));
            			}
            			else {
HXLINE( 271)				return path;
            			}
            		}
            		else {
HXLINE( 273)			if ((c1 != (path.length - 1))) {
HXLINE( 273)				return (path + HX_("/",2f,00,00,00));
            			}
            			else {
HXLINE( 274)				return path;
            			}
            		}
HXLINE( 269)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_obj,addTrailingSlash,return )

::String Path_obj::removeTrailingSlashes(::String path){
            	HX_STACKFRAME(&_hx_pos_c76bafa893b9a603_289_removeTrailingSlashes)
HXLINE( 290)		while(true){
HXLINE( 291)			 ::Dynamic _g = path.charCodeAt((path.length - 1));
HXDLIN( 291)			if (hx::IsNull( _g )) {
HXLINE( 293)				goto _hx_goto_15;
            			}
            			else {
HXLINE( 291)				 ::Dynamic _hx_switch_0 = _g;
            				if (  (_hx_switch_0==47) ||  (_hx_switch_0==92) ){
HXLINE( 292)					path = path.substr(0,-1);
HXDLIN( 292)					goto _hx_goto_16;
            				}
            				/* default */{
HXLINE( 293)					goto _hx_goto_15;
            				}
            				_hx_goto_16:;
            			}
            		}
            		_hx_goto_15:;
HXLINE( 296)		return path;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_obj,removeTrailingSlashes,return )

bool Path_obj::isAbsolute(::String path){
            	HX_STACKFRAME(&_hx_pos_c76bafa893b9a603_303_isAbsolute)
HXLINE( 304)		if (::StringTools_obj::startsWith(path,HX_("/",2f,00,00,00))) {
HXLINE( 304)			return true;
            		}
HXLINE( 305)		if ((path.charAt(1) == HX_(":",3a,00,00,00))) {
HXLINE( 305)			return true;
            		}
HXLINE( 306)		if (::StringTools_obj::startsWith(path,HX_("\\\\",80,50,00,00))) {
HXLINE( 306)			return true;
            		}
HXLINE( 307)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Path_obj,isAbsolute,return )


hx::ObjectPtr< Path_obj > Path_obj::__new(::String path) {
	hx::ObjectPtr< Path_obj > __this = new Path_obj();
	__this->__construct(path);
	return __this;
}

hx::ObjectPtr< Path_obj > Path_obj::__alloc(hx::Ctx *_hx_ctx,::String path) {
	Path_obj *__this = (Path_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Path_obj), true, "haxe.io.Path"));
	*(void **)__this = Path_obj::_hx_vtable;
	__this->__construct(path);
	return __this;
}

Path_obj::Path_obj()
{
}

void Path_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Path);
	HX_MARK_MEMBER_NAME(dir,"dir");
	HX_MARK_MEMBER_NAME(file,"file");
	HX_MARK_MEMBER_NAME(ext,"ext");
	HX_MARK_MEMBER_NAME(backslash,"backslash");
	HX_MARK_END_CLASS();
}

void Path_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(dir,"dir");
	HX_VISIT_MEMBER_NAME(file,"file");
	HX_VISIT_MEMBER_NAME(ext,"ext");
	HX_VISIT_MEMBER_NAME(backslash,"backslash");
}

hx::Val Path_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"dir") ) { return hx::Val( dir ); }
		if (HX_FIELD_EQ(inName,"ext") ) { return hx::Val( ext ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"file") ) { return hx::Val( file ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"backslash") ) { return hx::Val( backslash ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Path_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"join") ) { outValue = join_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"directory") ) { outValue = directory_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"normalize") ) { outValue = normalize_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isAbsolute") ) { outValue = isAbsolute_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"withoutDirectory") ) { outValue = withoutDirectory_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addTrailingSlash") ) { outValue = addTrailingSlash_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"removeTrailingSlashes") ) { outValue = removeTrailingSlashes_dyn(); return true; }
	}
	return false;
}

hx::Val Path_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"dir") ) { dir=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ext") ) { ext=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"file") ) { file=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"backslash") ) { backslash=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Path_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("dir",4d,3d,4c,00));
	outFields->push(HX_("file",7c,ce,bb,43));
	outFields->push(HX_("ext",a1,0c,4d,00));
	outFields->push(HX_("backslash",b6,b8,45,c8));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Path_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Path_obj,dir),HX_("dir",4d,3d,4c,00)},
	{hx::fsString,(int)offsetof(Path_obj,file),HX_("file",7c,ce,bb,43)},
	{hx::fsString,(int)offsetof(Path_obj,ext),HX_("ext",a1,0c,4d,00)},
	{hx::fsBool,(int)offsetof(Path_obj,backslash),HX_("backslash",b6,b8,45,c8)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Path_obj_sStaticStorageInfo = 0;
#endif

static ::String Path_obj_sMemberFields[] = {
	HX_("dir",4d,3d,4c,00),
	HX_("file",7c,ce,bb,43),
	HX_("ext",a1,0c,4d,00),
	HX_("backslash",b6,b8,45,c8),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

hx::Class Path_obj::__mClass;

static ::String Path_obj_sStaticFields[] = {
	HX_("withoutDirectory",05,17,d2,7a),
	HX_("directory",6d,f2,44,10),
	HX_("join",ea,33,65,46),
	HX_("normalize",8d,37,a1,ab),
	HX_("addTrailingSlash",e0,d6,eb,26),
	HX_("removeTrailingSlashes",8b,dc,1d,43),
	HX_("isAbsolute",81,e0,44,3e),
	::String(null())
};

void Path_obj::__register()
{
	Path_obj _hx_dummy;
	Path_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("haxe.io.Path",05,cf,c6,4e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Path_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Path_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Path_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Path_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Path_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Path_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace io
